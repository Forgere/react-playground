import { jsxs as Jb, jsx as nc } from "react/jsx-runtime";
import * as qt from "react";
import Qb, { useReducer as hP, useRef as Po, useDebugValue as pP, useEffect as cd, useLayoutEffect as mP, useState as Sx, useMemo as vP } from "react";
/**
 * @license
 * Copyright 2010-2023 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const Og = "163", gP = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, yP = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, Kb = 0, Mx = 1, $b = 2, _P = 3, ew = 0, Fg = 1, ap = 2, ps = 3, Oo = 0, Dr = 1, ks = 2, Io = 0, lc = 1, Ex = 2, Tx = 3, bx = 4, tw = 5, Wl = 100, nw = 101, iw = 102, rw = 103, aw = 104, sw = 200, ow = 201, lw = 202, uw = 203, Cg = 204, Lg = 205, cw = 206, fw = 207, dw = 208, hw = 209, pw = 210, mw = 211, vw = 212, gw = 213, yw = 214, _w = 0, xw = 1, Sw = 2, cp = 3, Mw = 4, Ew = 5, Tw = 6, bw = 7, Np = 0, ww = 1, Aw = 2, Xs = 0, Rw = 1, Cw = 2, Lw = 3, pS = 4, Pw = 5, Dw = 6, Nw = 7, wx = "attached", Uw = "detached", zg = 300, Fo = 301, ql = 302, fp = 303, dp = 304, gd = 306, hp = 1e3, Ya = 1001, pp = 1002, ki = 1003, mS = 1004, xP = 1004, rd = 1005, SP = 1005, Ei = 1006, sp = 1007, MP = 1007, Gs = 1008, EP = 1008, qs = 1009, Iw = 1010, Ow = 1011, vS = 1012, gS = 1013, hc = 1014, ja = 1015, mp = 1016, yS = 1017, _S = 1018, yd = 1020, Fw = 35902, zw = 1021, Bw = 1022, Qr = 1023, Hw = 1024, Vw = 1025, uc = 1026, dd = 1027, xS = 1028, SS = 1029, kw = 1030, MS = 1031, ES = 1033, Sg = 33776, Mg = 33777, Eg = 33778, Tg = 33779, Ax = 35840, Rx = 35841, Cx = 35842, Lx = 35843, TS = 36196, Px = 37492, Dx = 37496, Nx = 37808, Ux = 37809, Ix = 37810, Ox = 37811, Fx = 37812, zx = 37813, Bx = 37814, Hx = 37815, Vx = 37816, kx = 37817, Gx = 37818, Wx = 37819, Xx = 37820, qx = 37821, bg = 36492, Yx = 36494, jx = 36495, Gw = 36283, Zx = 36284, Jx = 36285, Qx = 36286, Ww = 2200, Xw = 2201, qw = 2202, vp = 2300, gp = 2301, wg = 2302, rc = 2400, ac = 2401, yp = 2402, Bg = 2500, bS = 2501, TP = 0, bP = 1, wP = 2, Yw = 3200, jw = 3201, jl = 0, Zw = 1, Do = "", qa = "srgb", Bo = "srgb-linear", Hg = "display-p3", Up = "display-p3-linear", _p = "linear", Vn = "srgb", xp = "rec709", Sp = "p3", AP = 0, ec = 7680, RP = 7681, CP = 7682, LP = 7683, PP = 34055, DP = 34056, NP = 5386, UP = 512, IP = 513, OP = 514, FP = 515, zP = 516, BP = 517, HP = 518, Kx = 519, Jw = 512, Qw = 513, Kw = 514, wS = 515, $w = 516, eA = 517, tA = 518, nA = 519, Mp = 35044, VP = 35048, kP = 35040, GP = 35045, WP = 35049, XP = 35041, qP = 35046, YP = 35050, jP = 35042, ZP = "100", $x = "300 es", Ws = 2e3, Ep = 2001;
class Ho {
  addEventListener(e, t) {
    this._listeners === void 0 && (this._listeners = {});
    const n = this._listeners;
    n[e] === void 0 && (n[e] = []), n[e].indexOf(t) === -1 && n[e].push(t);
  }
  hasEventListener(e, t) {
    if (this._listeners === void 0)
      return !1;
    const n = this._listeners;
    return n[e] !== void 0 && n[e].indexOf(t) !== -1;
  }
  removeEventListener(e, t) {
    if (this._listeners === void 0)
      return;
    const r = this._listeners[e];
    if (r !== void 0) {
      const o = r.indexOf(t);
      o !== -1 && r.splice(o, 1);
    }
  }
  dispatchEvent(e) {
    if (this._listeners === void 0)
      return;
    const n = this._listeners[e.type];
    if (n !== void 0) {
      e.target = this;
      const r = n.slice(0);
      for (let o = 0, c = r.length; o < c; o++)
        r[o].call(this, e);
      e.target = null;
    }
  }
}
const mr = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let J1 = 1234567;
const cc = Math.PI / 180, hd = 180 / Math.PI;
function ya() {
  const s = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, t = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0;
  return (mr[s & 255] + mr[s >> 8 & 255] + mr[s >> 16 & 255] + mr[s >> 24 & 255] + "-" + mr[e & 255] + mr[e >> 8 & 255] + "-" + mr[e >> 16 & 15 | 64] + mr[e >> 24 & 255] + "-" + mr[t & 63 | 128] + mr[t >> 8 & 255] + "-" + mr[t >> 16 & 255] + mr[t >> 24 & 255] + mr[n & 255] + mr[n >> 8 & 255] + mr[n >> 16 & 255] + mr[n >> 24 & 255]).toLowerCase();
}
function ci(s, e, t) {
  return Math.max(e, Math.min(t, s));
}
function AS(s, e) {
  return (s % e + e) % e;
}
function JP(s, e, t, n, r) {
  return n + (s - e) * (r - n) / (t - e);
}
function QP(s, e, t) {
  return s !== e ? (t - s) / (e - s) : 0;
}
function op(s, e, t) {
  return (1 - t) * s + t * e;
}
function KP(s, e, t, n) {
  return op(s, e, 1 - Math.exp(-t * n));
}
function $P(s, e = 1) {
  return e - Math.abs(AS(s, e * 2) - e);
}
function eD(s, e, t) {
  return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * (3 - 2 * s));
}
function tD(s, e, t) {
  return s <= e ? 0 : s >= t ? 1 : (s = (s - e) / (t - e), s * s * s * (s * (s * 6 - 15) + 10));
}
function nD(s, e) {
  return s + Math.floor(Math.random() * (e - s + 1));
}
function iD(s, e) {
  return s + Math.random() * (e - s);
}
function rD(s) {
  return s * (0.5 - Math.random());
}
function aD(s) {
  s !== void 0 && (J1 = s);
  let e = J1 += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function sD(s) {
  return s * cc;
}
function oD(s) {
  return s * hd;
}
function lD(s) {
  return (s & s - 1) === 0 && s !== 0;
}
function uD(s) {
  return Math.pow(2, Math.ceil(Math.log(s) / Math.LN2));
}
function cD(s) {
  return Math.pow(2, Math.floor(Math.log(s) / Math.LN2));
}
function fD(s, e, t, n, r) {
  const o = Math.cos, c = Math.sin, f = o(t / 2), p = c(t / 2), h = o((e + n) / 2), g = c((e + n) / 2), _ = o((e - n) / 2), x = c((e - n) / 2), M = o((n - e) / 2), T = c((n - e) / 2);
  switch (r) {
    case "XYX":
      s.set(f * g, p * _, p * x, f * h);
      break;
    case "YZY":
      s.set(p * x, f * g, p * _, f * h);
      break;
    case "ZXZ":
      s.set(p * _, p * x, f * g, f * h);
      break;
    case "XZX":
      s.set(f * g, p * T, p * M, f * h);
      break;
    case "YXY":
      s.set(p * M, f * g, p * T, f * h);
      break;
    case "ZYZ":
      s.set(p * T, p * M, f * g, f * h);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
  }
}
function Pr(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return s / 4294967295;
    case Uint16Array:
      return s / 65535;
    case Uint8Array:
      return s / 255;
    case Int32Array:
      return Math.max(s / 2147483647, -1);
    case Int16Array:
      return Math.max(s / 32767, -1);
    case Int8Array:
      return Math.max(s / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function jt(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return Math.round(s * 4294967295);
    case Uint16Array:
      return Math.round(s * 65535);
    case Uint8Array:
      return Math.round(s * 255);
    case Int32Array:
      return Math.round(s * 2147483647);
    case Int16Array:
      return Math.round(s * 32767);
    case Int8Array:
      return Math.round(s * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const dD = {
  DEG2RAD: cc,
  RAD2DEG: hd,
  generateUUID: ya,
  clamp: ci,
  euclideanModulo: AS,
  mapLinear: JP,
  inverseLerp: QP,
  lerp: op,
  damp: KP,
  pingpong: $P,
  smoothstep: eD,
  smootherstep: tD,
  randInt: nD,
  randFloat: iD,
  randFloatSpread: rD,
  seededRandom: aD,
  degToRad: sD,
  radToDeg: oD,
  isPowerOfTwo: lD,
  ceilPowerOfTwo: uD,
  floorPowerOfTwo: cD,
  setQuaternionFromProperEuler: fD,
  normalize: jt,
  denormalize: Pr
};
class De {
  constructor(e = 0, t = 0) {
    De.prototype.isVector2 = !0, this.x = e, this.y = t;
  }
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  set(e, t) {
    return this.x = e, this.y = t, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, r = e.elements;
    return this.x = r[0] * t + r[3] * n + r[6], this.y = r[1] * t + r[4] * n + r[7], this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(ci(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y;
    return t * t + n * n;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this;
  }
  rotateAround(e, t) {
    const n = Math.cos(t), r = Math.sin(t), o = this.x - e.x, c = this.y - e.y;
    return this.x = o * n - c * r + e.x, this.y = o * r + c * n + e.y, this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class Yt {
  constructor(e, t, n, r, o, c, f, p, h) {
    Yt.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, r, o, c, f, p, h);
  }
  set(e, t, n, r, o, c, f, p, h) {
    const g = this.elements;
    return g[0] = e, g[1] = r, g[2] = f, g[3] = t, g[4] = o, g[5] = p, g[6] = n, g[7] = c, g[8] = h, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrix3Column(this, 0), t.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this;
  }
  setFromMatrix4(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[4],
      t[8],
      t[1],
      t[5],
      t[9],
      t[2],
      t[6],
      t[10]
    ), this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, r = t.elements, o = this.elements, c = n[0], f = n[3], p = n[6], h = n[1], g = n[4], _ = n[7], x = n[2], M = n[5], T = n[8], R = r[0], b = r[3], E = r[6], L = r[1], C = r[4], U = r[7], Y = r[2], B = r[5], H = r[8];
    return o[0] = c * R + f * L + p * Y, o[3] = c * b + f * C + p * B, o[6] = c * E + f * U + p * H, o[1] = h * R + g * L + _ * Y, o[4] = h * b + g * C + _ * B, o[7] = h * E + g * U + _ * H, o[2] = x * R + M * L + T * Y, o[5] = x * b + M * C + T * B, o[8] = x * E + M * U + T * H, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[3] *= e, t[6] *= e, t[1] *= e, t[4] *= e, t[7] *= e, t[2] *= e, t[5] *= e, t[8] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8];
    return t * c * g - t * f * h - n * o * g + n * f * p + r * o * h - r * c * p;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8], _ = g * c - f * h, x = f * p - g * o, M = h * o - c * p, T = t * _ + n * x + r * M;
    if (T === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const R = 1 / T;
    return e[0] = _ * R, e[1] = (r * h - g * n) * R, e[2] = (f * n - r * c) * R, e[3] = x * R, e[4] = (g * t - r * p) * R, e[5] = (r * o - f * t) * R, e[6] = M * R, e[7] = (n * p - h * t) * R, e[8] = (c * t - n * o) * R, this;
  }
  transpose() {
    let e;
    const t = this.elements;
    return e = t[1], t[1] = t[3], t[3] = e, e = t[2], t[2] = t[6], t[6] = e, e = t[5], t[5] = t[7], t[7] = e, this;
  }
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  transposeIntoArray(e) {
    const t = this.elements;
    return e[0] = t[0], e[1] = t[3], e[2] = t[6], e[3] = t[1], e[4] = t[4], e[5] = t[7], e[6] = t[2], e[7] = t[5], e[8] = t[8], this;
  }
  setUvTransform(e, t, n, r, o, c, f) {
    const p = Math.cos(o), h = Math.sin(o);
    return this.set(
      n * p,
      n * h,
      -n * (p * c + h * f) + c + e,
      -r * h,
      r * p,
      -r * (-h * c + p * f) + f + t,
      0,
      0,
      1
    ), this;
  }
  //
  scale(e, t) {
    return this.premultiply(T_.makeScale(e, t)), this;
  }
  rotate(e) {
    return this.premultiply(T_.makeRotation(-e)), this;
  }
  translate(e, t) {
    return this.premultiply(T_.makeTranslation(e, t)), this;
  }
  // for 2D Transforms
  makeTranslation(e, t) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      t,
      0,
      0,
      1
    ), this;
  }
  makeRotation(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      n,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t) {
    return this.set(
      e,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      1
    ), this;
  }
  //
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let r = 0; r < 9; r++)
      if (t[r] !== n[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 9; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const T_ = /* @__PURE__ */ new Yt();
function iA(s) {
  for (let e = s.length - 1; e >= 0; --e)
    if (s[e] >= 65535)
      return !0;
  return !1;
}
const hD = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function ad(s, e) {
  return new hD[s](e);
}
function Tp(s) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", s);
}
function rA() {
  const s = Tp("canvas");
  return s.style.display = "block", s;
}
const Q1 = {};
function aA(s) {
  s in Q1 || (Q1[s] = !0, console.warn(s));
}
const K1 = /* @__PURE__ */ new Yt().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
), $1 = /* @__PURE__ */ new Yt().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
), Rv = {
  [Bo]: {
    transfer: _p,
    primaries: xp,
    toReference: (s) => s,
    fromReference: (s) => s
  },
  [qa]: {
    transfer: Vn,
    primaries: xp,
    toReference: (s) => s.convertSRGBToLinear(),
    fromReference: (s) => s.convertLinearToSRGB()
  },
  [Up]: {
    transfer: _p,
    primaries: Sp,
    toReference: (s) => s.applyMatrix3($1),
    fromReference: (s) => s.applyMatrix3(K1)
  },
  [Hg]: {
    transfer: Vn,
    primaries: Sp,
    toReference: (s) => s.convertSRGBToLinear().applyMatrix3($1),
    fromReference: (s) => s.applyMatrix3(K1).convertLinearToSRGB()
  }
}, pD = /* @__PURE__ */ new Set([Bo, Up]), Ln = {
  enabled: !0,
  _workingColorSpace: Bo,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(s) {
    if (!pD.has(s))
      throw new Error(`Unsupported working color space, "${s}".`);
    this._workingColorSpace = s;
  },
  convert: function(s, e, t) {
    if (this.enabled === !1 || e === t || !e || !t)
      return s;
    const n = Rv[e].toReference, r = Rv[t].fromReference;
    return r(n(s));
  },
  fromWorkingColorSpace: function(s, e) {
    return this.convert(s, this._workingColorSpace, e);
  },
  toWorkingColorSpace: function(s, e) {
    return this.convert(s, e, this._workingColorSpace);
  },
  getPrimaries: function(s) {
    return Rv[s].primaries;
  },
  getTransfer: function(s) {
    return s === Do ? _p : Rv[s].transfer;
  }
};
function fd(s) {
  return s < 0.04045 ? s * 0.0773993808 : Math.pow(s * 0.9478672986 + 0.0521327014, 2.4);
}
function b_(s) {
  return s < 31308e-7 ? s * 12.92 : 1.055 * Math.pow(s, 0.41666) - 0.055;
}
let Df;
class sA {
  static getDataURL(e) {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let t;
    if (e instanceof HTMLCanvasElement)
      t = e;
    else {
      Df === void 0 && (Df = Tp("canvas")), Df.width = e.width, Df.height = e.height;
      const n = Df.getContext("2d");
      e instanceof ImageData ? n.putImageData(e, 0, 0) : n.drawImage(e, 0, 0, e.width, e.height), t = Df;
    }
    return t.width > 2048 || t.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", e), t.toDataURL("image/jpeg", 0.6)) : t.toDataURL("image/png");
  }
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const t = Tp("canvas");
      t.width = e.width, t.height = e.height;
      const n = t.getContext("2d");
      n.drawImage(e, 0, 0, e.width, e.height);
      const r = n.getImageData(0, 0, e.width, e.height), o = r.data;
      for (let c = 0; c < o.length; c++)
        o[c] = fd(o[c] / 255) * 255;
      return n.putImageData(r, 0, 0), t;
    } else if (e.data) {
      const t = e.data.slice(0);
      for (let n = 0; n < t.length; n++)
        t instanceof Uint8Array || t instanceof Uint8ClampedArray ? t[n] = Math.floor(fd(t[n] / 255) * 255) : t[n] = fd(t[n]);
      return {
        data: t,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let mD = 0;
class sc {
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: mD++ }), this.uuid = ya(), this.data = e, this.dataReady = !0, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const n = {
      uuid: this.uuid,
      url: ""
    }, r = this.data;
    if (r !== null) {
      let o;
      if (Array.isArray(r)) {
        o = [];
        for (let c = 0, f = r.length; c < f; c++)
          r[c].isDataTexture ? o.push(w_(r[c].image)) : o.push(w_(r[c]));
      } else
        o = w_(r);
      n.url = o;
    }
    return t || (e.images[this.uuid] = n), n;
  }
}
function w_(s) {
  return typeof HTMLImageElement < "u" && s instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s instanceof ImageBitmap ? sA.getDataURL(s) : s.data ? {
    data: Array.from(s.data),
    width: s.width,
    height: s.height,
    type: s.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let vD = 0;
class ai extends Ho {
  constructor(e = ai.DEFAULT_IMAGE, t = ai.DEFAULT_MAPPING, n = Ya, r = Ya, o = Ei, c = Gs, f = Qr, p = qs, h = ai.DEFAULT_ANISOTROPY, g = Do) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: vD++ }), this.uuid = ya(), this.name = "", this.source = new sc(e), this.mipmaps = [], this.mapping = t, this.channel = 0, this.wrapS = n, this.wrapT = r, this.magFilter = o, this.minFilter = c, this.anisotropy = h, this.format = f, this.internalFormat = null, this.type = p, this.offset = new De(0, 0), this.repeat = new De(1, 1), this.center = new De(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new Yt(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = g, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    if (!t && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const n = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (n.userData = this.userData), t || (e.textures[this.uuid] = n), n;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(e) {
    if (this.mapping !== zg)
      return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case hp:
          e.x = e.x - Math.floor(e.x);
          break;
        case Ya:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case pp:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case hp:
          e.y = e.y - Math.floor(e.y);
          break;
        case Ya:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case pp:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
ai.DEFAULT_IMAGE = null;
ai.DEFAULT_MAPPING = zg;
ai.DEFAULT_ANISOTROPY = 1;
class Pn {
  constructor(e = 0, t = 0, n = 0, r = 1) {
    Pn.prototype.isVector4 = !0, this.x = e, this.y = t, this.z = n, this.w = r;
  }
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  set(e, t, n, r) {
    return this.x = e, this.y = t, this.z = n, this.w = r, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setW(e) {
    return this.w = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      case 3:
        this.w = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this.w = e.w + t.w, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this.w += e.w * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this.w = e.w - t.w, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, r = this.z, o = this.w, c = e.elements;
    return this.x = c[0] * t + c[4] * n + c[8] * r + c[12] * o, this.y = c[1] * t + c[5] * n + c[9] * r + c[13] * o, this.z = c[2] * t + c[6] * n + c[10] * r + c[14] * o, this.w = c[3] * t + c[7] * n + c[11] * r + c[15] * o, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const t = Math.sqrt(1 - e.w * e.w);
    return t < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / t, this.y = e.y / t, this.z = e.z / t), this;
  }
  setAxisAngleFromRotationMatrix(e) {
    let t, n, r, o;
    const p = e.elements, h = p[0], g = p[4], _ = p[8], x = p[1], M = p[5], T = p[9], R = p[2], b = p[6], E = p[10];
    if (Math.abs(g - x) < 0.01 && Math.abs(_ - R) < 0.01 && Math.abs(T - b) < 0.01) {
      if (Math.abs(g + x) < 0.1 && Math.abs(_ + R) < 0.1 && Math.abs(T + b) < 0.1 && Math.abs(h + M + E - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      t = Math.PI;
      const C = (h + 1) / 2, U = (M + 1) / 2, Y = (E + 1) / 2, B = (g + x) / 4, H = (_ + R) / 4, k = (T + b) / 4;
      return C > U && C > Y ? C < 0.01 ? (n = 0, r = 0.707106781, o = 0.707106781) : (n = Math.sqrt(C), r = B / n, o = H / n) : U > Y ? U < 0.01 ? (n = 0.707106781, r = 0, o = 0.707106781) : (r = Math.sqrt(U), n = B / r, o = k / r) : Y < 0.01 ? (n = 0.707106781, r = 0.707106781, o = 0) : (o = Math.sqrt(Y), n = H / o, r = k / o), this.set(n, r, o, t), this;
    }
    let L = Math.sqrt((b - T) * (b - T) + (_ - R) * (_ - R) + (x - g) * (x - g));
    return Math.abs(L) < 1e-3 && (L = 1), this.x = (b - T) / L, this.y = (_ - R) / L, this.z = (x - g) / L, this.w = Math.acos((h + M + E - 1) / 2), this;
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this.w = Math.max(e.w, Math.min(t.w, this.w)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this.w = Math.max(e, Math.min(t, this.w)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this.w += (e.w - this.w) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this.w = e.w + (t.w - e.w) * n, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this.w = e[t + 3], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e[t + 3] = this.w, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this.w = e.getW(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class oA extends Ho {
  constructor(e = 1, t = 1, n = {}) {
    super(), this.isRenderTarget = !0, this.width = e, this.height = t, this.depth = 1, this.scissor = new Pn(0, 0, e, t), this.scissorTest = !1, this.viewport = new Pn(0, 0, e, t);
    const r = { width: e, height: t, depth: 1 };
    n = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: Ei,
      depthBuffer: !0,
      stencilBuffer: !1,
      depthTexture: null,
      samples: 0,
      count: 1
    }, n);
    const o = new ai(r, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.colorSpace);
    o.flipY = !1, o.generateMipmaps = n.generateMipmaps, o.internalFormat = n.internalFormat, this.textures = [];
    const c = n.count;
    for (let f = 0; f < c; f++)
      this.textures[f] = o.clone(), this.textures[f].isRenderTargetTexture = !0;
    this.depthBuffer = n.depthBuffer, this.stencilBuffer = n.stencilBuffer, this.depthTexture = n.depthTexture, this.samples = n.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  setSize(e, t, n = 1) {
    if (this.width !== e || this.height !== t || this.depth !== n) {
      this.width = e, this.height = t, this.depth = n;
      for (let r = 0, o = this.textures.length; r < o; r++)
        this.textures[r].image.width = e, this.textures[r].image.height = t, this.textures[r].image.depth = n;
      this.dispose();
    }
    this.viewport.set(0, 0, e, t), this.scissor.set(0, 0, e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
    for (let n = 0, r = e.textures.length; n < r; n++)
      this.textures[n] = e.textures[n].clone(), this.textures[n].isRenderTargetTexture = !0;
    const t = Object.assign({}, e.texture.image);
    return this.texture.source = new sc(t), this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class vs extends oA {
  constructor(e = 1, t = 1, n = {}) {
    super(e, t, n), this.isWebGLRenderTarget = !0;
  }
}
class Vg extends ai {
  constructor(e = null, t = 1, n = 1, r = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: t, height: n, depth: r }, this.magFilter = ki, this.minFilter = ki, this.wrapR = Ya, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class gD extends vs {
  constructor(e = 1, t = 1, n = 1, r = {}) {
    super(e, t, r), this.isWebGLArrayRenderTarget = !0, this.depth = n, this.texture = new Vg(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class RS extends ai {
  constructor(e = null, t = 1, n = 1, r = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: t, height: n, depth: r }, this.magFilter = ki, this.minFilter = ki, this.wrapR = Ya, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class yD extends vs {
  constructor(e = 1, t = 1, n = 1, r = {}) {
    super(e, t, r), this.isWebGL3DRenderTarget = !0, this.depth = n, this.texture = new RS(null, e, t, n), this.texture.isRenderTargetTexture = !0;
  }
}
class Kr {
  constructor(e = 0, t = 0, n = 0, r = 1) {
    this.isQuaternion = !0, this._x = e, this._y = t, this._z = n, this._w = r;
  }
  static slerpFlat(e, t, n, r, o, c, f) {
    let p = n[r + 0], h = n[r + 1], g = n[r + 2], _ = n[r + 3];
    const x = o[c + 0], M = o[c + 1], T = o[c + 2], R = o[c + 3];
    if (f === 0) {
      e[t + 0] = p, e[t + 1] = h, e[t + 2] = g, e[t + 3] = _;
      return;
    }
    if (f === 1) {
      e[t + 0] = x, e[t + 1] = M, e[t + 2] = T, e[t + 3] = R;
      return;
    }
    if (_ !== R || p !== x || h !== M || g !== T) {
      let b = 1 - f;
      const E = p * x + h * M + g * T + _ * R, L = E >= 0 ? 1 : -1, C = 1 - E * E;
      if (C > Number.EPSILON) {
        const Y = Math.sqrt(C), B = Math.atan2(Y, E * L);
        b = Math.sin(b * B) / Y, f = Math.sin(f * B) / Y;
      }
      const U = f * L;
      if (p = p * b + x * U, h = h * b + M * U, g = g * b + T * U, _ = _ * b + R * U, b === 1 - f) {
        const Y = 1 / Math.sqrt(p * p + h * h + g * g + _ * _);
        p *= Y, h *= Y, g *= Y, _ *= Y;
      }
    }
    e[t] = p, e[t + 1] = h, e[t + 2] = g, e[t + 3] = _;
  }
  static multiplyQuaternionsFlat(e, t, n, r, o, c) {
    const f = n[r], p = n[r + 1], h = n[r + 2], g = n[r + 3], _ = o[c], x = o[c + 1], M = o[c + 2], T = o[c + 3];
    return e[t] = f * T + g * _ + p * M - h * x, e[t + 1] = p * T + g * x + h * _ - f * M, e[t + 2] = h * T + g * M + f * x - p * _, e[t + 3] = g * T - f * _ - p * x - h * M, e;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  set(e, t, n, r) {
    return this._x = e, this._y = t, this._z = n, this._w = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  setFromEuler(e, t = !0) {
    const n = e._x, r = e._y, o = e._z, c = e._order, f = Math.cos, p = Math.sin, h = f(n / 2), g = f(r / 2), _ = f(o / 2), x = p(n / 2), M = p(r / 2), T = p(o / 2);
    switch (c) {
      case "XYZ":
        this._x = x * g * _ + h * M * T, this._y = h * M * _ - x * g * T, this._z = h * g * T + x * M * _, this._w = h * g * _ - x * M * T;
        break;
      case "YXZ":
        this._x = x * g * _ + h * M * T, this._y = h * M * _ - x * g * T, this._z = h * g * T - x * M * _, this._w = h * g * _ + x * M * T;
        break;
      case "ZXY":
        this._x = x * g * _ - h * M * T, this._y = h * M * _ + x * g * T, this._z = h * g * T + x * M * _, this._w = h * g * _ - x * M * T;
        break;
      case "ZYX":
        this._x = x * g * _ - h * M * T, this._y = h * M * _ + x * g * T, this._z = h * g * T - x * M * _, this._w = h * g * _ + x * M * T;
        break;
      case "YZX":
        this._x = x * g * _ + h * M * T, this._y = h * M * _ + x * g * T, this._z = h * g * T - x * M * _, this._w = h * g * _ - x * M * T;
        break;
      case "XZY":
        this._x = x * g * _ - h * M * T, this._y = h * M * _ - x * g * T, this._z = h * g * T + x * M * _, this._w = h * g * _ + x * M * T;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + c);
    }
    return t === !0 && this._onChangeCallback(), this;
  }
  setFromAxisAngle(e, t) {
    const n = t / 2, r = Math.sin(n);
    return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(n), this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e) {
    const t = e.elements, n = t[0], r = t[4], o = t[8], c = t[1], f = t[5], p = t[9], h = t[2], g = t[6], _ = t[10], x = n + f + _;
    if (x > 0) {
      const M = 0.5 / Math.sqrt(x + 1);
      this._w = 0.25 / M, this._x = (g - p) * M, this._y = (o - h) * M, this._z = (c - r) * M;
    } else if (n > f && n > _) {
      const M = 2 * Math.sqrt(1 + n - f - _);
      this._w = (g - p) / M, this._x = 0.25 * M, this._y = (r + c) / M, this._z = (o + h) / M;
    } else if (f > _) {
      const M = 2 * Math.sqrt(1 + f - n - _);
      this._w = (o - h) / M, this._x = (r + c) / M, this._y = 0.25 * M, this._z = (p + g) / M;
    } else {
      const M = 2 * Math.sqrt(1 + _ - n - f);
      this._w = (c - r) / M, this._x = (o + h) / M, this._y = (p + g) / M, this._z = 0.25 * M;
    }
    return this._onChangeCallback(), this;
  }
  setFromUnitVectors(e, t) {
    let n = e.dot(t) + 1;
    return n < Number.EPSILON ? (n = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = n)) : (this._x = e.y * t.z - e.z * t.y, this._y = e.z * t.x - e.x * t.z, this._z = e.x * t.y - e.y * t.x, this._w = n), this.normalize();
  }
  angleTo(e) {
    return 2 * Math.acos(Math.abs(ci(this.dot(e), -1, 1)));
  }
  rotateTowards(e, t) {
    const n = this.angleTo(e);
    if (n === 0)
      return this;
    const r = Math.min(1, t / n);
    return this.slerp(e, r), this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  multiplyQuaternions(e, t) {
    const n = e._x, r = e._y, o = e._z, c = e._w, f = t._x, p = t._y, h = t._z, g = t._w;
    return this._x = n * g + c * f + r * h - o * p, this._y = r * g + c * p + o * f - n * h, this._z = o * g + c * h + n * p - r * f, this._w = c * g - n * f - r * p - o * h, this._onChangeCallback(), this;
  }
  slerp(e, t) {
    if (t === 0)
      return this;
    if (t === 1)
      return this.copy(e);
    const n = this._x, r = this._y, o = this._z, c = this._w;
    let f = c * e._w + n * e._x + r * e._y + o * e._z;
    if (f < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, f = -f) : this.copy(e), f >= 1)
      return this._w = c, this._x = n, this._y = r, this._z = o, this;
    const p = 1 - f * f;
    if (p <= Number.EPSILON) {
      const M = 1 - t;
      return this._w = M * c + t * this._w, this._x = M * n + t * this._x, this._y = M * r + t * this._y, this._z = M * o + t * this._z, this.normalize(), this;
    }
    const h = Math.sqrt(p), g = Math.atan2(h, f), _ = Math.sin((1 - t) * g) / h, x = Math.sin(t * g) / h;
    return this._w = c * _ + this._w * x, this._x = n * _ + this._x * x, this._y = r * _ + this._y * x, this._z = o * _ + this._z * x, this._onChangeCallback(), this;
  }
  slerpQuaternions(e, t, n) {
    return this.copy(e).slerp(t, n);
  }
  random() {
    const e = 2 * Math.PI * Math.random(), t = 2 * Math.PI * Math.random(), n = Math.random(), r = Math.sqrt(1 - n), o = Math.sqrt(n);
    return this.set(
      r * Math.sin(e),
      r * Math.cos(e),
      o * Math.sin(t),
      o * Math.cos(t)
    );
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  fromArray(e, t = 0) {
    return this._x = e[t], this._y = e[t + 1], this._z = e[t + 2], this._w = e[t + 3], this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._w, e;
  }
  fromBufferAttribute(e, t) {
    return this._x = e.getX(t), this._y = e.getY(t), this._z = e.getZ(t), this._w = e.getW(t), this._onChangeCallback(), this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class q {
  constructor(e = 0, t = 0, n = 0) {
    q.prototype.isVector3 = !0, this.x = e, this.y = t, this.z = n;
  }
  set(e, t, n) {
    return n === void 0 && (n = this.z), this.x = e, this.y = t, this.z = n, this;
  }
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  setX(e) {
    return this.x = e, this;
  }
  setY(e) {
    return this.y = e, this;
  }
  setZ(e) {
    return this.z = e, this;
  }
  setComponent(e, t) {
    switch (e) {
      case 0:
        this.x = t;
        break;
      case 1:
        this.y = t;
        break;
      case 2:
        this.z = t;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  addVectors(e, t) {
    return this.x = e.x + t.x, this.y = e.y + t.y, this.z = e.z + t.z, this;
  }
  addScaledVector(e, t) {
    return this.x += e.x * t, this.y += e.y * t, this.z += e.z * t, this;
  }
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  subVectors(e, t) {
    return this.x = e.x - t.x, this.y = e.y - t.y, this.z = e.z - t.z, this;
  }
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  multiplyVectors(e, t) {
    return this.x = e.x * t.x, this.y = e.y * t.y, this.z = e.z * t.z, this;
  }
  applyEuler(e) {
    return this.applyQuaternion(eT.setFromEuler(e));
  }
  applyAxisAngle(e, t) {
    return this.applyQuaternion(eT.setFromAxisAngle(e, t));
  }
  applyMatrix3(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements;
    return this.x = o[0] * t + o[3] * n + o[6] * r, this.y = o[1] * t + o[4] * n + o[7] * r, this.z = o[2] * t + o[5] * n + o[8] * r, this;
  }
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  applyMatrix4(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements, c = 1 / (o[3] * t + o[7] * n + o[11] * r + o[15]);
    return this.x = (o[0] * t + o[4] * n + o[8] * r + o[12]) * c, this.y = (o[1] * t + o[5] * n + o[9] * r + o[13]) * c, this.z = (o[2] * t + o[6] * n + o[10] * r + o[14]) * c, this;
  }
  applyQuaternion(e) {
    const t = this.x, n = this.y, r = this.z, o = e.x, c = e.y, f = e.z, p = e.w, h = 2 * (c * r - f * n), g = 2 * (f * t - o * r), _ = 2 * (o * n - c * t);
    return this.x = t + p * h + c * _ - f * g, this.y = n + p * g + f * h - o * _, this.z = r + p * _ + o * g - c * h, this;
  }
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  transformDirection(e) {
    const t = this.x, n = this.y, r = this.z, o = e.elements;
    return this.x = o[0] * t + o[4] * n + o[8] * r, this.y = o[1] * t + o[5] * n + o[9] * r, this.z = o[2] * t + o[6] * n + o[10] * r, this.normalize();
  }
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  clamp(e, t) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  clampScalar(e, t) {
    return this.x = Math.max(e, Math.min(t, this.x)), this.y = Math.max(e, Math.min(t, this.y)), this.z = Math.max(e, Math.min(t, this.z)), this;
  }
  clampLength(e, t) {
    const n = this.length();
    return this.divideScalar(n || 1).multiplyScalar(Math.max(e, Math.min(t, n)));
  }
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  lerp(e, t) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  lerpVectors(e, t, n) {
    return this.x = e.x + (t.x - e.x) * n, this.y = e.y + (t.y - e.y) * n, this.z = e.z + (t.z - e.z) * n, this;
  }
  cross(e) {
    return this.crossVectors(this, e);
  }
  crossVectors(e, t) {
    const n = e.x, r = e.y, o = e.z, c = t.x, f = t.y, p = t.z;
    return this.x = r * p - o * f, this.y = o * c - n * p, this.z = n * f - r * c, this;
  }
  projectOnVector(e) {
    const t = e.lengthSq();
    if (t === 0)
      return this.set(0, 0, 0);
    const n = e.dot(this) / t;
    return this.copy(e).multiplyScalar(n);
  }
  projectOnPlane(e) {
    return A_.copy(this).projectOnVector(e), this.sub(A_);
  }
  reflect(e) {
    return this.sub(A_.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  angleTo(e) {
    const t = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (t === 0)
      return Math.PI / 2;
    const n = this.dot(e) / t;
    return Math.acos(ci(n, -1, 1));
  }
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  distanceToSquared(e) {
    const t = this.x - e.x, n = this.y - e.y, r = this.z - e.z;
    return t * t + n * n + r * r;
  }
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  setFromSphericalCoords(e, t, n) {
    const r = Math.sin(t) * e;
    return this.x = r * Math.sin(n), this.y = Math.cos(t) * e, this.z = r * Math.cos(n), this;
  }
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  setFromCylindricalCoords(e, t, n) {
    return this.x = e * Math.sin(t), this.y = n, this.z = e * Math.cos(t), this;
  }
  setFromMatrixPosition(e) {
    const t = e.elements;
    return this.x = t[12], this.y = t[13], this.z = t[14], this;
  }
  setFromMatrixScale(e) {
    const t = this.setFromMatrixColumn(e, 0).length(), n = this.setFromMatrixColumn(e, 1).length(), r = this.setFromMatrixColumn(e, 2).length();
    return this.x = t, this.y = n, this.z = r, this;
  }
  setFromMatrixColumn(e, t) {
    return this.fromArray(e.elements, t * 4);
  }
  setFromMatrix3Column(e, t) {
    return this.fromArray(e.elements, t * 3);
  }
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  fromArray(e, t = 0) {
    return this.x = e[t], this.y = e[t + 1], this.z = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.x, e[t + 1] = this.y, e[t + 2] = this.z, e;
  }
  fromBufferAttribute(e, t) {
    return this.x = e.getX(t), this.y = e.getY(t), this.z = e.getZ(t), this;
  }
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  randomDirection() {
    const e = Math.random() * Math.PI * 2, t = Math.random() * 2 - 1, n = Math.sqrt(1 - t * t);
    return this.x = n * Math.cos(e), this.y = t, this.z = n * Math.sin(e), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const A_ = /* @__PURE__ */ new q(), eT = /* @__PURE__ */ new Kr();
class Nr {
  constructor(e = new q(1 / 0, 1 / 0, 1 / 0), t = new q(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromArray(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t += 3)
      this.expandByPoint(fs.fromArray(e, t));
    return this;
  }
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let t = 0, n = e.count; t < n; t++)
      this.expandByPoint(fs.fromBufferAttribute(e, t));
    return this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = fs.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  setFromObject(e, t = !1) {
    return this.makeEmpty(), this.expandByObject(e, t);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  expandByObject(e, t = !1) {
    e.updateWorldMatrix(!1, !1);
    const n = e.geometry;
    if (n !== void 0) {
      const o = n.getAttribute("position");
      if (t === !0 && o !== void 0 && e.isInstancedMesh !== !0)
        for (let c = 0, f = o.count; c < f; c++)
          e.isMesh === !0 ? e.getVertexPosition(c, fs) : fs.fromBufferAttribute(o, c), fs.applyMatrix4(e.matrixWorld), this.expandByPoint(fs);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), Cv.copy(e.boundingBox)) : (n.boundingBox === null && n.computeBoundingBox(), Cv.copy(n.boundingBox)), Cv.applyMatrix4(e.matrixWorld), this.union(Cv);
    }
    const r = e.children;
    for (let o = 0, c = r.length; o < c; o++)
      this.expandByObject(r[o], t);
    return this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y || e.z < this.min.z || e.z > this.max.z);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y || e.max.z < this.min.z || e.min.z > this.max.z);
  }
  intersectsSphere(e) {
    return this.clampPoint(e.center, fs), fs.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  intersectsPlane(e) {
    let t, n;
    return e.normal.x > 0 ? (t = e.normal.x * this.min.x, n = e.normal.x * this.max.x) : (t = e.normal.x * this.max.x, n = e.normal.x * this.min.x), e.normal.y > 0 ? (t += e.normal.y * this.min.y, n += e.normal.y * this.max.y) : (t += e.normal.y * this.max.y, n += e.normal.y * this.min.y), e.normal.z > 0 ? (t += e.normal.z * this.min.z, n += e.normal.z * this.max.z) : (t += e.normal.z * this.max.z, n += e.normal.z * this.min.z), t <= -e.constant && n >= -e.constant;
  }
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(Wh), Lv.subVectors(this.max, Wh), Nf.subVectors(e.a, Wh), Uf.subVectors(e.b, Wh), If.subVectors(e.c, Wh), Nl.subVectors(Uf, Nf), Ul.subVectors(If, Uf), ku.subVectors(Nf, If);
    let t = [
      0,
      -Nl.z,
      Nl.y,
      0,
      -Ul.z,
      Ul.y,
      0,
      -ku.z,
      ku.y,
      Nl.z,
      0,
      -Nl.x,
      Ul.z,
      0,
      -Ul.x,
      ku.z,
      0,
      -ku.x,
      -Nl.y,
      Nl.x,
      0,
      -Ul.y,
      Ul.x,
      0,
      -ku.y,
      ku.x,
      0
    ];
    return !R_(t, Nf, Uf, If, Lv) || (t = [1, 0, 0, 0, 1, 0, 0, 0, 1], !R_(t, Nf, Uf, If, Lv)) ? !1 : (Pv.crossVectors(Nl, Ul), t = [Pv.x, Pv.y, Pv.z], R_(t, Nf, Uf, If, Lv));
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, fs).distanceTo(e);
  }
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(fs).length() * 0.5), e;
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  applyMatrix4(e) {
    return this.isEmpty() ? this : (bo[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), bo[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), bo[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), bo[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), bo[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), bo[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), bo[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), bo[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(bo), this);
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const bo = [
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q(),
  /* @__PURE__ */ new q()
], fs = /* @__PURE__ */ new q(), Cv = /* @__PURE__ */ new Nr(), Nf = /* @__PURE__ */ new q(), Uf = /* @__PURE__ */ new q(), If = /* @__PURE__ */ new q(), Nl = /* @__PURE__ */ new q(), Ul = /* @__PURE__ */ new q(), ku = /* @__PURE__ */ new q(), Wh = /* @__PURE__ */ new q(), Lv = /* @__PURE__ */ new q(), Pv = /* @__PURE__ */ new q(), Gu = /* @__PURE__ */ new q();
function R_(s, e, t, n, r) {
  for (let o = 0, c = s.length - 3; o <= c; o += 3) {
    Gu.fromArray(s, o);
    const f = r.x * Math.abs(Gu.x) + r.y * Math.abs(Gu.y) + r.z * Math.abs(Gu.z), p = e.dot(Gu), h = t.dot(Gu), g = n.dot(Gu);
    if (Math.max(-Math.max(p, h, g), Math.min(p, h, g)) > f)
      return !1;
  }
  return !0;
}
const _D = /* @__PURE__ */ new Nr(), Xh = /* @__PURE__ */ new q(), C_ = /* @__PURE__ */ new q();
class yr {
  constructor(e = new q(), t = -1) {
    this.isSphere = !0, this.center = e, this.radius = t;
  }
  set(e, t) {
    return this.center.copy(e), this.radius = t, this;
  }
  setFromPoints(e, t) {
    const n = this.center;
    t !== void 0 ? n.copy(t) : _D.setFromPoints(e).getCenter(n);
    let r = 0;
    for (let o = 0, c = e.length; o < c; o++)
      r = Math.max(r, n.distanceToSquared(e[o]));
    return this.radius = Math.sqrt(r), this;
  }
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(e) {
    const t = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= t * t;
  }
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(e, t) {
    const n = this.center.distanceToSquared(e);
    return t.copy(e), n > this.radius * this.radius && (t.sub(this.center).normalize(), t.multiplyScalar(this.radius).add(this.center)), t;
  }
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  translate(e) {
    return this.center.add(e), this;
  }
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    Xh.subVectors(e, this.center);
    const t = Xh.lengthSq();
    if (t > this.radius * this.radius) {
      const n = Math.sqrt(t), r = (n - this.radius) * 0.5;
      this.center.addScaledVector(Xh, r / n), this.radius += r;
    }
    return this;
  }
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (C_.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(Xh.copy(e.center).add(C_)), this.expandByPoint(Xh.copy(e.center).sub(C_))), this);
  }
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const wo = /* @__PURE__ */ new q(), L_ = /* @__PURE__ */ new q(), Dv = /* @__PURE__ */ new q(), Il = /* @__PURE__ */ new q(), P_ = /* @__PURE__ */ new q(), Nv = /* @__PURE__ */ new q(), D_ = /* @__PURE__ */ new q();
class _d {
  constructor(e = new q(), t = new q(0, 0, -1)) {
    this.origin = e, this.direction = t;
  }
  set(e, t) {
    return this.origin.copy(e), this.direction.copy(t), this;
  }
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  at(e, t) {
    return t.copy(this.origin).addScaledVector(this.direction, e);
  }
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  recast(e) {
    return this.origin.copy(this.at(e, wo)), this;
  }
  closestPointToPoint(e, t) {
    t.subVectors(e, this.origin);
    const n = t.dot(this.direction);
    return n < 0 ? t.copy(this.origin) : t.copy(this.origin).addScaledVector(this.direction, n);
  }
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  distanceSqToPoint(e) {
    const t = wo.subVectors(e, this.origin).dot(this.direction);
    return t < 0 ? this.origin.distanceToSquared(e) : (wo.copy(this.origin).addScaledVector(this.direction, t), wo.distanceToSquared(e));
  }
  distanceSqToSegment(e, t, n, r) {
    L_.copy(e).add(t).multiplyScalar(0.5), Dv.copy(t).sub(e).normalize(), Il.copy(this.origin).sub(L_);
    const o = e.distanceTo(t) * 0.5, c = -this.direction.dot(Dv), f = Il.dot(this.direction), p = -Il.dot(Dv), h = Il.lengthSq(), g = Math.abs(1 - c * c);
    let _, x, M, T;
    if (g > 0)
      if (_ = c * p - f, x = c * f - p, T = o * g, _ >= 0)
        if (x >= -T)
          if (x <= T) {
            const R = 1 / g;
            _ *= R, x *= R, M = _ * (_ + c * x + 2 * f) + x * (c * _ + x + 2 * p) + h;
          } else
            x = o, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
        else
          x = -o, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
      else
        x <= -T ? (_ = Math.max(0, -(-c * o + f)), x = _ > 0 ? -o : Math.min(Math.max(-o, -p), o), M = -_ * _ + x * (x + 2 * p) + h) : x <= T ? (_ = 0, x = Math.min(Math.max(-o, -p), o), M = x * (x + 2 * p) + h) : (_ = Math.max(0, -(c * o + f)), x = _ > 0 ? o : Math.min(Math.max(-o, -p), o), M = -_ * _ + x * (x + 2 * p) + h);
    else
      x = c > 0 ? -o : o, _ = Math.max(0, -(c * x + f)), M = -_ * _ + x * (x + 2 * p) + h;
    return n && n.copy(this.origin).addScaledVector(this.direction, _), r && r.copy(L_).addScaledVector(Dv, x), M;
  }
  intersectSphere(e, t) {
    wo.subVectors(e.center, this.origin);
    const n = wo.dot(this.direction), r = wo.dot(wo) - n * n, o = e.radius * e.radius;
    if (r > o)
      return null;
    const c = Math.sqrt(o - r), f = n - c, p = n + c;
    return p < 0 ? null : f < 0 ? this.at(p, t) : this.at(f, t);
  }
  intersectsSphere(e) {
    return this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  distanceToPlane(e) {
    const t = e.normal.dot(this.direction);
    if (t === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const n = -(this.origin.dot(e.normal) + e.constant) / t;
    return n >= 0 ? n : null;
  }
  intersectPlane(e, t) {
    const n = this.distanceToPlane(e);
    return n === null ? null : this.at(n, t);
  }
  intersectsPlane(e) {
    const t = e.distanceToPoint(this.origin);
    return t === 0 || e.normal.dot(this.direction) * t < 0;
  }
  intersectBox(e, t) {
    let n, r, o, c, f, p;
    const h = 1 / this.direction.x, g = 1 / this.direction.y, _ = 1 / this.direction.z, x = this.origin;
    return h >= 0 ? (n = (e.min.x - x.x) * h, r = (e.max.x - x.x) * h) : (n = (e.max.x - x.x) * h, r = (e.min.x - x.x) * h), g >= 0 ? (o = (e.min.y - x.y) * g, c = (e.max.y - x.y) * g) : (o = (e.max.y - x.y) * g, c = (e.min.y - x.y) * g), n > c || o > r || ((o > n || isNaN(n)) && (n = o), (c < r || isNaN(r)) && (r = c), _ >= 0 ? (f = (e.min.z - x.z) * _, p = (e.max.z - x.z) * _) : (f = (e.max.z - x.z) * _, p = (e.min.z - x.z) * _), n > p || f > r) || ((f > n || n !== n) && (n = f), (p < r || r !== r) && (r = p), r < 0) ? null : this.at(n >= 0 ? n : r, t);
  }
  intersectsBox(e) {
    return this.intersectBox(e, wo) !== null;
  }
  intersectTriangle(e, t, n, r, o) {
    P_.subVectors(t, e), Nv.subVectors(n, e), D_.crossVectors(P_, Nv);
    let c = this.direction.dot(D_), f;
    if (c > 0) {
      if (r)
        return null;
      f = 1;
    } else if (c < 0)
      f = -1, c = -c;
    else
      return null;
    Il.subVectors(this.origin, e);
    const p = f * this.direction.dot(Nv.crossVectors(Il, Nv));
    if (p < 0)
      return null;
    const h = f * this.direction.dot(P_.cross(Il));
    if (h < 0 || p + h > c)
      return null;
    const g = -f * Il.dot(D_);
    return g < 0 ? null : this.at(g / c, o);
  }
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class Ht {
  constructor(e, t, n, r, o, c, f, p, h, g, _, x, M, T, R, b) {
    Ht.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, t, n, r, o, c, f, p, h, g, _, x, M, T, R, b);
  }
  set(e, t, n, r, o, c, f, p, h, g, _, x, M, T, R, b) {
    const E = this.elements;
    return E[0] = e, E[4] = t, E[8] = n, E[12] = r, E[1] = o, E[5] = c, E[9] = f, E[13] = p, E[2] = h, E[6] = g, E[10] = _, E[14] = x, E[3] = M, E[7] = T, E[11] = R, E[15] = b, this;
  }
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  clone() {
    return new Ht().fromArray(this.elements);
  }
  copy(e) {
    const t = this.elements, n = e.elements;
    return t[0] = n[0], t[1] = n[1], t[2] = n[2], t[3] = n[3], t[4] = n[4], t[5] = n[5], t[6] = n[6], t[7] = n[7], t[8] = n[8], t[9] = n[9], t[10] = n[10], t[11] = n[11], t[12] = n[12], t[13] = n[13], t[14] = n[14], t[15] = n[15], this;
  }
  copyPosition(e) {
    const t = this.elements, n = e.elements;
    return t[12] = n[12], t[13] = n[13], t[14] = n[14], this;
  }
  setFromMatrix3(e) {
    const t = e.elements;
    return this.set(
      t[0],
      t[3],
      t[6],
      0,
      t[1],
      t[4],
      t[7],
      0,
      t[2],
      t[5],
      t[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractBasis(e, t, n) {
    return e.setFromMatrixColumn(this, 0), t.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this;
  }
  makeBasis(e, t, n) {
    return this.set(
      e.x,
      t.x,
      n.x,
      0,
      e.y,
      t.y,
      n.y,
      0,
      e.z,
      t.z,
      n.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  extractRotation(e) {
    const t = this.elements, n = e.elements, r = 1 / Of.setFromMatrixColumn(e, 0).length(), o = 1 / Of.setFromMatrixColumn(e, 1).length(), c = 1 / Of.setFromMatrixColumn(e, 2).length();
    return t[0] = n[0] * r, t[1] = n[1] * r, t[2] = n[2] * r, t[3] = 0, t[4] = n[4] * o, t[5] = n[5] * o, t[6] = n[6] * o, t[7] = 0, t[8] = n[8] * c, t[9] = n[9] * c, t[10] = n[10] * c, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromEuler(e) {
    const t = this.elements, n = e.x, r = e.y, o = e.z, c = Math.cos(n), f = Math.sin(n), p = Math.cos(r), h = Math.sin(r), g = Math.cos(o), _ = Math.sin(o);
    if (e.order === "XYZ") {
      const x = c * g, M = c * _, T = f * g, R = f * _;
      t[0] = p * g, t[4] = -p * _, t[8] = h, t[1] = M + T * h, t[5] = x - R * h, t[9] = -f * p, t[2] = R - x * h, t[6] = T + M * h, t[10] = c * p;
    } else if (e.order === "YXZ") {
      const x = p * g, M = p * _, T = h * g, R = h * _;
      t[0] = x + R * f, t[4] = T * f - M, t[8] = c * h, t[1] = c * _, t[5] = c * g, t[9] = -f, t[2] = M * f - T, t[6] = R + x * f, t[10] = c * p;
    } else if (e.order === "ZXY") {
      const x = p * g, M = p * _, T = h * g, R = h * _;
      t[0] = x - R * f, t[4] = -c * _, t[8] = T + M * f, t[1] = M + T * f, t[5] = c * g, t[9] = R - x * f, t[2] = -c * h, t[6] = f, t[10] = c * p;
    } else if (e.order === "ZYX") {
      const x = c * g, M = c * _, T = f * g, R = f * _;
      t[0] = p * g, t[4] = T * h - M, t[8] = x * h + R, t[1] = p * _, t[5] = R * h + x, t[9] = M * h - T, t[2] = -h, t[6] = f * p, t[10] = c * p;
    } else if (e.order === "YZX") {
      const x = c * p, M = c * h, T = f * p, R = f * h;
      t[0] = p * g, t[4] = R - x * _, t[8] = T * _ + M, t[1] = _, t[5] = c * g, t[9] = -f * g, t[2] = -h * g, t[6] = M * _ + T, t[10] = x - R * _;
    } else if (e.order === "XZY") {
      const x = c * p, M = c * h, T = f * p, R = f * h;
      t[0] = p * g, t[4] = -_, t[8] = h * g, t[1] = x * _ + R, t[5] = c * g, t[9] = M * _ - T, t[2] = T * _ - M, t[6] = f * g, t[10] = R * _ + x;
    }
    return t[3] = 0, t[7] = 0, t[11] = 0, t[12] = 0, t[13] = 0, t[14] = 0, t[15] = 1, this;
  }
  makeRotationFromQuaternion(e) {
    return this.compose(xD, e, SD);
  }
  lookAt(e, t, n) {
    const r = this.elements;
    return ma.subVectors(e, t), ma.lengthSq() === 0 && (ma.z = 1), ma.normalize(), Ol.crossVectors(n, ma), Ol.lengthSq() === 0 && (Math.abs(n.z) === 1 ? ma.x += 1e-4 : ma.z += 1e-4, ma.normalize(), Ol.crossVectors(n, ma)), Ol.normalize(), Uv.crossVectors(ma, Ol), r[0] = Ol.x, r[4] = Uv.x, r[8] = ma.x, r[1] = Ol.y, r[5] = Uv.y, r[9] = ma.y, r[2] = Ol.z, r[6] = Uv.z, r[10] = ma.z, this;
  }
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  multiplyMatrices(e, t) {
    const n = e.elements, r = t.elements, o = this.elements, c = n[0], f = n[4], p = n[8], h = n[12], g = n[1], _ = n[5], x = n[9], M = n[13], T = n[2], R = n[6], b = n[10], E = n[14], L = n[3], C = n[7], U = n[11], Y = n[15], B = r[0], H = r[4], k = r[8], F = r[12], N = r[1], X = r[5], K = r[9], J = r[13], ae = r[2], _e = r[6], Me = r[10], Fe = r[14], Q = r[3], ue = r[7], ne = r[11], be = r[15];
    return o[0] = c * B + f * N + p * ae + h * Q, o[4] = c * H + f * X + p * _e + h * ue, o[8] = c * k + f * K + p * Me + h * ne, o[12] = c * F + f * J + p * Fe + h * be, o[1] = g * B + _ * N + x * ae + M * Q, o[5] = g * H + _ * X + x * _e + M * ue, o[9] = g * k + _ * K + x * Me + M * ne, o[13] = g * F + _ * J + x * Fe + M * be, o[2] = T * B + R * N + b * ae + E * Q, o[6] = T * H + R * X + b * _e + E * ue, o[10] = T * k + R * K + b * Me + E * ne, o[14] = T * F + R * J + b * Fe + E * be, o[3] = L * B + C * N + U * ae + Y * Q, o[7] = L * H + C * X + U * _e + Y * ue, o[11] = L * k + C * K + U * Me + Y * ne, o[15] = L * F + C * J + U * Fe + Y * be, this;
  }
  multiplyScalar(e) {
    const t = this.elements;
    return t[0] *= e, t[4] *= e, t[8] *= e, t[12] *= e, t[1] *= e, t[5] *= e, t[9] *= e, t[13] *= e, t[2] *= e, t[6] *= e, t[10] *= e, t[14] *= e, t[3] *= e, t[7] *= e, t[11] *= e, t[15] *= e, this;
  }
  determinant() {
    const e = this.elements, t = e[0], n = e[4], r = e[8], o = e[12], c = e[1], f = e[5], p = e[9], h = e[13], g = e[2], _ = e[6], x = e[10], M = e[14], T = e[3], R = e[7], b = e[11], E = e[15];
    return T * (+o * p * _ - r * h * _ - o * f * x + n * h * x + r * f * M - n * p * M) + R * (+t * p * M - t * h * x + o * c * x - r * c * M + r * h * g - o * p * g) + b * (+t * h * _ - t * f * M - o * c * _ + n * c * M + o * f * g - n * h * g) + E * (-r * f * g - t * p * _ + t * f * x + r * c * _ - n * c * x + n * p * g);
  }
  transpose() {
    const e = this.elements;
    let t;
    return t = e[1], e[1] = e[4], e[4] = t, t = e[2], e[2] = e[8], e[8] = t, t = e[6], e[6] = e[9], e[9] = t, t = e[3], e[3] = e[12], e[12] = t, t = e[7], e[7] = e[13], e[13] = t, t = e[11], e[11] = e[14], e[14] = t, this;
  }
  setPosition(e, t, n) {
    const r = this.elements;
    return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = t, r[14] = n), this;
  }
  invert() {
    const e = this.elements, t = e[0], n = e[1], r = e[2], o = e[3], c = e[4], f = e[5], p = e[6], h = e[7], g = e[8], _ = e[9], x = e[10], M = e[11], T = e[12], R = e[13], b = e[14], E = e[15], L = _ * b * h - R * x * h + R * p * M - f * b * M - _ * p * E + f * x * E, C = T * x * h - g * b * h - T * p * M + c * b * M + g * p * E - c * x * E, U = g * R * h - T * _ * h + T * f * M - c * R * M - g * f * E + c * _ * E, Y = T * _ * p - g * R * p - T * f * x + c * R * x + g * f * b - c * _ * b, B = t * L + n * C + r * U + o * Y;
    if (B === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const H = 1 / B;
    return e[0] = L * H, e[1] = (R * x * o - _ * b * o - R * r * M + n * b * M + _ * r * E - n * x * E) * H, e[2] = (f * b * o - R * p * o + R * r * h - n * b * h - f * r * E + n * p * E) * H, e[3] = (_ * p * o - f * x * o - _ * r * h + n * x * h + f * r * M - n * p * M) * H, e[4] = C * H, e[5] = (g * b * o - T * x * o + T * r * M - t * b * M - g * r * E + t * x * E) * H, e[6] = (T * p * o - c * b * o - T * r * h + t * b * h + c * r * E - t * p * E) * H, e[7] = (c * x * o - g * p * o + g * r * h - t * x * h - c * r * M + t * p * M) * H, e[8] = U * H, e[9] = (T * _ * o - g * R * o - T * n * M + t * R * M + g * n * E - t * _ * E) * H, e[10] = (c * R * o - T * f * o + T * n * h - t * R * h - c * n * E + t * f * E) * H, e[11] = (g * f * o - c * _ * o - g * n * h + t * _ * h + c * n * M - t * f * M) * H, e[12] = Y * H, e[13] = (g * R * r - T * _ * r + T * n * x - t * R * x - g * n * b + t * _ * b) * H, e[14] = (T * f * r - c * R * r - T * n * p + t * R * p + c * n * b - t * f * b) * H, e[15] = (c * _ * r - g * f * r + g * n * p - t * _ * p - c * n * x + t * f * x) * H, this;
  }
  scale(e) {
    const t = this.elements, n = e.x, r = e.y, o = e.z;
    return t[0] *= n, t[4] *= r, t[8] *= o, t[1] *= n, t[5] *= r, t[9] *= o, t[2] *= n, t[6] *= r, t[10] *= o, t[3] *= n, t[7] *= r, t[11] *= o, this;
  }
  getMaxScaleOnAxis() {
    const e = this.elements, t = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], n = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(t, n, r));
  }
  makeTranslation(e, t, n) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      t,
      0,
      0,
      1,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationX(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationY(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      0,
      n,
      0,
      0,
      1,
      0,
      0,
      -n,
      0,
      t,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationZ(e) {
    const t = Math.cos(e), n = Math.sin(e);
    return this.set(
      t,
      -n,
      0,
      0,
      n,
      t,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeRotationAxis(e, t) {
    const n = Math.cos(t), r = Math.sin(t), o = 1 - n, c = e.x, f = e.y, p = e.z, h = o * c, g = o * f;
    return this.set(
      h * c + n,
      h * f - r * p,
      h * p + r * f,
      0,
      h * f + r * p,
      g * f + n,
      g * p - r * c,
      0,
      h * p - r * f,
      g * p + r * c,
      o * p * p + n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeScale(e, t, n) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      t,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  makeShear(e, t, n, r, o, c) {
    return this.set(
      1,
      n,
      o,
      0,
      e,
      1,
      c,
      0,
      t,
      r,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  compose(e, t, n) {
    const r = this.elements, o = t._x, c = t._y, f = t._z, p = t._w, h = o + o, g = c + c, _ = f + f, x = o * h, M = o * g, T = o * _, R = c * g, b = c * _, E = f * _, L = p * h, C = p * g, U = p * _, Y = n.x, B = n.y, H = n.z;
    return r[0] = (1 - (R + E)) * Y, r[1] = (M + U) * Y, r[2] = (T - C) * Y, r[3] = 0, r[4] = (M - U) * B, r[5] = (1 - (x + E)) * B, r[6] = (b + L) * B, r[7] = 0, r[8] = (T + C) * H, r[9] = (b - L) * H, r[10] = (1 - (x + R)) * H, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
  }
  decompose(e, t, n) {
    const r = this.elements;
    let o = Of.set(r[0], r[1], r[2]).length();
    const c = Of.set(r[4], r[5], r[6]).length(), f = Of.set(r[8], r[9], r[10]).length();
    this.determinant() < 0 && (o = -o), e.x = r[12], e.y = r[13], e.z = r[14], ds.copy(this);
    const h = 1 / o, g = 1 / c, _ = 1 / f;
    return ds.elements[0] *= h, ds.elements[1] *= h, ds.elements[2] *= h, ds.elements[4] *= g, ds.elements[5] *= g, ds.elements[6] *= g, ds.elements[8] *= _, ds.elements[9] *= _, ds.elements[10] *= _, t.setFromRotationMatrix(ds), n.x = o, n.y = c, n.z = f, this;
  }
  makePerspective(e, t, n, r, o, c, f = Ws) {
    const p = this.elements, h = 2 * o / (t - e), g = 2 * o / (n - r), _ = (t + e) / (t - e), x = (n + r) / (n - r);
    let M, T;
    if (f === Ws)
      M = -(c + o) / (c - o), T = -2 * c * o / (c - o);
    else if (f === Ep)
      M = -c / (c - o), T = -c * o / (c - o);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + f);
    return p[0] = h, p[4] = 0, p[8] = _, p[12] = 0, p[1] = 0, p[5] = g, p[9] = x, p[13] = 0, p[2] = 0, p[6] = 0, p[10] = M, p[14] = T, p[3] = 0, p[7] = 0, p[11] = -1, p[15] = 0, this;
  }
  makeOrthographic(e, t, n, r, o, c, f = Ws) {
    const p = this.elements, h = 1 / (t - e), g = 1 / (n - r), _ = 1 / (c - o), x = (t + e) * h, M = (n + r) * g;
    let T, R;
    if (f === Ws)
      T = (c + o) * _, R = -2 * _;
    else if (f === Ep)
      T = o * _, R = -1 * _;
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + f);
    return p[0] = 2 * h, p[4] = 0, p[8] = 0, p[12] = -x, p[1] = 0, p[5] = 2 * g, p[9] = 0, p[13] = -M, p[2] = 0, p[6] = 0, p[10] = R, p[14] = -T, p[3] = 0, p[7] = 0, p[11] = 0, p[15] = 1, this;
  }
  equals(e) {
    const t = this.elements, n = e.elements;
    for (let r = 0; r < 16; r++)
      if (t[r] !== n[r])
        return !1;
    return !0;
  }
  fromArray(e, t = 0) {
    for (let n = 0; n < 16; n++)
      this.elements[n] = e[n + t];
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.elements;
    return e[t] = n[0], e[t + 1] = n[1], e[t + 2] = n[2], e[t + 3] = n[3], e[t + 4] = n[4], e[t + 5] = n[5], e[t + 6] = n[6], e[t + 7] = n[7], e[t + 8] = n[8], e[t + 9] = n[9], e[t + 10] = n[10], e[t + 11] = n[11], e[t + 12] = n[12], e[t + 13] = n[13], e[t + 14] = n[14], e[t + 15] = n[15], e;
  }
}
const Of = /* @__PURE__ */ new q(), ds = /* @__PURE__ */ new Ht(), xD = /* @__PURE__ */ new q(0, 0, 0), SD = /* @__PURE__ */ new q(1, 1, 1), Ol = /* @__PURE__ */ new q(), Uv = /* @__PURE__ */ new q(), ma = /* @__PURE__ */ new q(), tT = /* @__PURE__ */ new Ht(), nT = /* @__PURE__ */ new Kr();
class _a {
  constructor(e = 0, t = 0, n = 0, r = _a.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = t, this._z = n, this._order = r;
  }
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  set(e, t, n, r = this._order) {
    return this._x = e, this._y = t, this._z = n, this._order = r, this._onChangeCallback(), this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  setFromRotationMatrix(e, t = this._order, n = !0) {
    const r = e.elements, o = r[0], c = r[4], f = r[8], p = r[1], h = r[5], g = r[9], _ = r[2], x = r[6], M = r[10];
    switch (t) {
      case "XYZ":
        this._y = Math.asin(ci(f, -1, 1)), Math.abs(f) < 0.9999999 ? (this._x = Math.atan2(-g, M), this._z = Math.atan2(-c, o)) : (this._x = Math.atan2(x, h), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-ci(g, -1, 1)), Math.abs(g) < 0.9999999 ? (this._y = Math.atan2(f, M), this._z = Math.atan2(p, h)) : (this._y = Math.atan2(-_, o), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(ci(x, -1, 1)), Math.abs(x) < 0.9999999 ? (this._y = Math.atan2(-_, M), this._z = Math.atan2(-c, h)) : (this._y = 0, this._z = Math.atan2(p, o));
        break;
      case "ZYX":
        this._y = Math.asin(-ci(_, -1, 1)), Math.abs(_) < 0.9999999 ? (this._x = Math.atan2(x, M), this._z = Math.atan2(p, o)) : (this._x = 0, this._z = Math.atan2(-c, h));
        break;
      case "YZX":
        this._z = Math.asin(ci(p, -1, 1)), Math.abs(p) < 0.9999999 ? (this._x = Math.atan2(-g, h), this._y = Math.atan2(-_, o)) : (this._x = 0, this._y = Math.atan2(f, M));
        break;
      case "XZY":
        this._z = Math.asin(-ci(c, -1, 1)), Math.abs(c) < 0.9999999 ? (this._x = Math.atan2(x, h), this._y = Math.atan2(f, o)) : (this._x = Math.atan2(-g, M), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + t);
    }
    return this._order = t, n === !0 && this._onChangeCallback(), this;
  }
  setFromQuaternion(e, t, n) {
    return tT.makeRotationFromQuaternion(e), this.setFromRotationMatrix(tT, t, n);
  }
  setFromVector3(e, t = this._order) {
    return this.set(e.x, e.y, e.z, t);
  }
  reorder(e) {
    return nT.setFromEuler(this), this.setFromQuaternion(nT, e);
  }
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this._x, e[t + 1] = this._y, e[t + 2] = this._z, e[t + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
_a.DEFAULT_ORDER = "XYZ";
class fc {
  constructor() {
    this.mask = 1;
  }
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  enableAll() {
    this.mask = -1;
  }
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let MD = 0;
const iT = /* @__PURE__ */ new q(), Ff = /* @__PURE__ */ new Kr(), Ao = /* @__PURE__ */ new Ht(), Iv = /* @__PURE__ */ new q(), qh = /* @__PURE__ */ new q(), ED = /* @__PURE__ */ new q(), TD = /* @__PURE__ */ new Kr(), rT = /* @__PURE__ */ new q(1, 0, 0), aT = /* @__PURE__ */ new q(0, 1, 0), sT = /* @__PURE__ */ new q(0, 0, 1), oT = { type: "added" }, bD = { type: "removed" }, zf = { type: "childadded", child: null }, N_ = { type: "childremoved", child: null };
class xn extends Ho {
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: MD++ }), this.uuid = ya(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = xn.DEFAULT_UP.clone();
    const e = new q(), t = new _a(), n = new Kr(), r = new q(1, 1, 1);
    function o() {
      n.setFromEuler(t, !1);
    }
    function c() {
      t.setFromQuaternion(n, void 0, !1);
    }
    t._onChange(o), n._onChange(c), Object.defineProperties(this, {
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: t
      },
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      scale: {
        configurable: !0,
        enumerable: !0,
        value: r
      },
      modelViewMatrix: {
        value: new Ht()
      },
      normalMatrix: {
        value: new Yt()
      }
    }), this.matrix = new Ht(), this.matrixWorld = new Ht(), this.matrixAutoUpdate = xn.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = xn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new fc(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  setRotationFromAxisAngle(e, t) {
    this.quaternion.setFromAxisAngle(e, t);
  }
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  rotateOnAxis(e, t) {
    return Ff.setFromAxisAngle(e, t), this.quaternion.multiply(Ff), this;
  }
  rotateOnWorldAxis(e, t) {
    return Ff.setFromAxisAngle(e, t), this.quaternion.premultiply(Ff), this;
  }
  rotateX(e) {
    return this.rotateOnAxis(rT, e);
  }
  rotateY(e) {
    return this.rotateOnAxis(aT, e);
  }
  rotateZ(e) {
    return this.rotateOnAxis(sT, e);
  }
  translateOnAxis(e, t) {
    return iT.copy(e).applyQuaternion(this.quaternion), this.position.add(iT.multiplyScalar(t)), this;
  }
  translateX(e) {
    return this.translateOnAxis(rT, e);
  }
  translateY(e) {
    return this.translateOnAxis(aT, e);
  }
  translateZ(e) {
    return this.translateOnAxis(sT, e);
  }
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(Ao.copy(this.matrixWorld).invert());
  }
  lookAt(e, t, n) {
    e.isVector3 ? Iv.copy(e) : Iv.set(e, t, n);
    const r = this.parent;
    this.updateWorldMatrix(!0, !1), qh.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Ao.lookAt(qh, Iv, this.up) : Ao.lookAt(Iv, qh, this.up), this.quaternion.setFromRotationMatrix(Ao), r && (Ao.extractRotation(r.matrixWorld), Ff.setFromRotationMatrix(Ao), this.quaternion.premultiply(Ff.invert()));
  }
  add(e) {
    if (arguments.length > 1) {
      for (let t = 0; t < arguments.length; t++)
        this.add(arguments[t]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent(oT), zf.child = e, this.dispatchEvent(zf), zf.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  remove(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.remove(arguments[n]);
      return this;
    }
    const t = this.children.indexOf(e);
    return t !== -1 && (e.parent = null, this.children.splice(t, 1), e.dispatchEvent(bD), N_.child = e, this.dispatchEvent(N_), N_.child = null), this;
  }
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(e) {
    return this.updateWorldMatrix(!0, !1), Ao.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), Ao.multiply(e.parent.matrixWorld)), e.applyMatrix4(Ao), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(!1, !0), e.dispatchEvent(oT), zf.child = e, this.dispatchEvent(zf), zf.child = null, this;
  }
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  getObjectByProperty(e, t) {
    if (this[e] === t)
      return this;
    for (let n = 0, r = this.children.length; n < r; n++) {
      const c = this.children[n].getObjectByProperty(e, t);
      if (c !== void 0)
        return c;
    }
  }
  getObjectsByProperty(e, t, n = []) {
    this[e] === t && n.push(this);
    const r = this.children;
    for (let o = 0, c = r.length; o < c; o++)
      r[o].getObjectsByProperty(e, t, n);
    return n;
  }
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(qh, e, ED), e;
  }
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(qh, TD, e), e;
  }
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const t = this.matrixWorld.elements;
    return e.set(t[8], t[9], t[10]).normalize();
  }
  raycast() {
  }
  traverse(e) {
    e(this);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++)
      t[n].traverse(e);
  }
  traverseVisible(e) {
    if (this.visible === !1)
      return;
    e(this);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++)
      t[n].traverseVisible(e);
  }
  traverseAncestors(e) {
    const t = this.parent;
    t !== null && (e(t), t.traverseAncestors(e));
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, e = !0);
    const t = this.children;
    for (let n = 0, r = t.length; n < r; n++) {
      const o = t[n];
      (o.matrixWorldAutoUpdate === !0 || e === !0) && o.updateMatrixWorld(e);
    }
  }
  updateWorldMatrix(e, t) {
    const n = this.parent;
    if (e === !0 && n !== null && n.matrixWorldAutoUpdate === !0 && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), t === !0) {
      const r = this.children;
      for (let o = 0, c = r.length; o < c; o++) {
        const f = r[o];
        f.matrixWorldAutoUpdate === !0 && f.updateWorldMatrix(!1, !0);
      }
    }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string", n = {};
    t && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, n.metadata = {
      version: 4.6,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const r = {};
    r.uuid = this.uuid, r.type = this.type, this.name !== "" && (r.name = this.name), this.castShadow === !0 && (r.castShadow = !0), this.receiveShadow === !0 && (r.receiveShadow = !0), this.visible === !1 && (r.visible = !1), this.frustumCulled === !1 && (r.frustumCulled = !1), this.renderOrder !== 0 && (r.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), r.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (r.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (r.type = "BatchedMesh", r.perObjectFrustumCulled = this.perObjectFrustumCulled, r.sortObjects = this.sortObjects, r.drawRanges = this._drawRanges, r.reservedRanges = this._reservedRanges, r.visibility = this._visibility, r.active = this._active, r.bounds = this._bounds.map((f) => ({
      boxInitialized: f.boxInitialized,
      boxMin: f.box.min.toArray(),
      boxMax: f.box.max.toArray(),
      sphereInitialized: f.sphereInitialized,
      sphereRadius: f.sphere.radius,
      sphereCenter: f.sphere.center.toArray()
    })), r.maxGeometryCount = this._maxGeometryCount, r.maxVertexCount = this._maxVertexCount, r.maxIndexCount = this._maxIndexCount, r.geometryInitialized = this._geometryInitialized, r.geometryCount = this._geometryCount, r.matricesTexture = this._matricesTexture.toJSON(e), this.boundingSphere !== null && (r.boundingSphere = {
      center: r.boundingSphere.center.toArray(),
      radius: r.boundingSphere.radius
    }), this.boundingBox !== null && (r.boundingBox = {
      min: r.boundingBox.min.toArray(),
      max: r.boundingBox.max.toArray()
    }));
    function o(f, p) {
      return f[p.uuid] === void 0 && (f[p.uuid] = p.toJSON(e)), p.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? r.background = this.background.toJSON() : this.background.isTexture && (r.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (r.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      r.geometry = o(e.geometries, this.geometry);
      const f = this.geometry.parameters;
      if (f !== void 0 && f.shapes !== void 0) {
        const p = f.shapes;
        if (Array.isArray(p))
          for (let h = 0, g = p.length; h < g; h++) {
            const _ = p[h];
            o(e.shapes, _);
          }
        else
          o(e.shapes, p);
      }
    }
    if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (o(e.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const f = [];
        for (let p = 0, h = this.material.length; p < h; p++)
          f.push(o(e.materials, this.material[p]));
        r.material = f;
      } else
        r.material = o(e.materials, this.material);
    if (this.children.length > 0) {
      r.children = [];
      for (let f = 0; f < this.children.length; f++)
        r.children.push(this.children[f].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      r.animations = [];
      for (let f = 0; f < this.animations.length; f++) {
        const p = this.animations[f];
        r.animations.push(o(e.animations, p));
      }
    }
    if (t) {
      const f = c(e.geometries), p = c(e.materials), h = c(e.textures), g = c(e.images), _ = c(e.shapes), x = c(e.skeletons), M = c(e.animations), T = c(e.nodes);
      f.length > 0 && (n.geometries = f), p.length > 0 && (n.materials = p), h.length > 0 && (n.textures = h), g.length > 0 && (n.images = g), _.length > 0 && (n.shapes = _), x.length > 0 && (n.skeletons = x), M.length > 0 && (n.animations = M), T.length > 0 && (n.nodes = T);
    }
    return n.object = r, n;
    function c(f) {
      const p = [];
      for (const h in f) {
        const g = f[h];
        delete g.metadata, p.push(g);
      }
      return p;
    }
  }
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  copy(e, t = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), t === !0)
      for (let n = 0; n < e.children.length; n++) {
        const r = e.children[n];
        this.add(r.clone());
      }
    return this;
  }
}
xn.DEFAULT_UP = /* @__PURE__ */ new q(0, 1, 0);
xn.DEFAULT_MATRIX_AUTO_UPDATE = !0;
xn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const hs = /* @__PURE__ */ new q(), Ro = /* @__PURE__ */ new q(), U_ = /* @__PURE__ */ new q(), Co = /* @__PURE__ */ new q(), Bf = /* @__PURE__ */ new q(), Hf = /* @__PURE__ */ new q(), lT = /* @__PURE__ */ new q(), I_ = /* @__PURE__ */ new q(), O_ = /* @__PURE__ */ new q(), F_ = /* @__PURE__ */ new q();
class ga {
  constructor(e = new q(), t = new q(), n = new q()) {
    this.a = e, this.b = t, this.c = n;
  }
  static getNormal(e, t, n, r) {
    r.subVectors(n, t), hs.subVectors(e, t), r.cross(hs);
    const o = r.lengthSq();
    return o > 0 ? r.multiplyScalar(1 / Math.sqrt(o)) : r.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(e, t, n, r, o) {
    hs.subVectors(r, t), Ro.subVectors(n, t), U_.subVectors(e, t);
    const c = hs.dot(hs), f = hs.dot(Ro), p = hs.dot(U_), h = Ro.dot(Ro), g = Ro.dot(U_), _ = c * h - f * f;
    if (_ === 0)
      return o.set(0, 0, 0), null;
    const x = 1 / _, M = (h * p - f * g) * x, T = (c * g - f * p) * x;
    return o.set(1 - M - T, T, M);
  }
  static containsPoint(e, t, n, r) {
    return this.getBarycoord(e, t, n, r, Co) === null ? !1 : Co.x >= 0 && Co.y >= 0 && Co.x + Co.y <= 1;
  }
  static getInterpolation(e, t, n, r, o, c, f, p) {
    return this.getBarycoord(e, t, n, r, Co) === null ? (p.x = 0, p.y = 0, "z" in p && (p.z = 0), "w" in p && (p.w = 0), null) : (p.setScalar(0), p.addScaledVector(o, Co.x), p.addScaledVector(c, Co.y), p.addScaledVector(f, Co.z), p);
  }
  static isFrontFacing(e, t, n, r) {
    return hs.subVectors(n, t), Ro.subVectors(e, t), hs.cross(Ro).dot(r) < 0;
  }
  set(e, t, n) {
    return this.a.copy(e), this.b.copy(t), this.c.copy(n), this;
  }
  setFromPointsAndIndices(e, t, n, r) {
    return this.a.copy(e[t]), this.b.copy(e[n]), this.c.copy(e[r]), this;
  }
  setFromAttributeAndIndices(e, t, n, r) {
    return this.a.fromBufferAttribute(e, t), this.b.fromBufferAttribute(e, n), this.c.fromBufferAttribute(e, r), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  getArea() {
    return hs.subVectors(this.c, this.b), Ro.subVectors(this.a, this.b), hs.cross(Ro).length() * 0.5;
  }
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(e) {
    return ga.getNormal(this.a, this.b, this.c, e);
  }
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(e, t) {
    return ga.getBarycoord(e, this.a, this.b, this.c, t);
  }
  getInterpolation(e, t, n, r, o) {
    return ga.getInterpolation(e, this.a, this.b, this.c, t, n, r, o);
  }
  containsPoint(e) {
    return ga.containsPoint(e, this.a, this.b, this.c);
  }
  isFrontFacing(e) {
    return ga.isFrontFacing(this.a, this.b, this.c, e);
  }
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  closestPointToPoint(e, t) {
    const n = this.a, r = this.b, o = this.c;
    let c, f;
    Bf.subVectors(r, n), Hf.subVectors(o, n), I_.subVectors(e, n);
    const p = Bf.dot(I_), h = Hf.dot(I_);
    if (p <= 0 && h <= 0)
      return t.copy(n);
    O_.subVectors(e, r);
    const g = Bf.dot(O_), _ = Hf.dot(O_);
    if (g >= 0 && _ <= g)
      return t.copy(r);
    const x = p * _ - g * h;
    if (x <= 0 && p >= 0 && g <= 0)
      return c = p / (p - g), t.copy(n).addScaledVector(Bf, c);
    F_.subVectors(e, o);
    const M = Bf.dot(F_), T = Hf.dot(F_);
    if (T >= 0 && M <= T)
      return t.copy(o);
    const R = M * h - p * T;
    if (R <= 0 && h >= 0 && T <= 0)
      return f = h / (h - T), t.copy(n).addScaledVector(Hf, f);
    const b = g * T - M * _;
    if (b <= 0 && _ - g >= 0 && M - T >= 0)
      return lT.subVectors(o, r), f = (_ - g) / (_ - g + (M - T)), t.copy(r).addScaledVector(lT, f);
    const E = 1 / (b + R + x);
    return c = R * E, f = x * E, t.copy(n).addScaledVector(Bf, c).addScaledVector(Hf, f);
  }
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const lA = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, Fl = { h: 0, s: 0, l: 0 }, Ov = { h: 0, s: 0, l: 0 };
function z_(s, e, t) {
  return t < 0 && (t += 1), t > 1 && (t -= 1), t < 1 / 6 ? s + (e - s) * 6 * t : t < 1 / 2 ? e : t < 2 / 3 ? s + (e - s) * 6 * (2 / 3 - t) : s;
}
class mt {
  constructor(e, t, n) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, t, n);
  }
  set(e, t, n) {
    if (t === void 0 && n === void 0) {
      const r = e;
      r && r.isColor ? this.copy(r) : typeof r == "number" ? this.setHex(r) : typeof r == "string" && this.setStyle(r);
    } else
      this.setRGB(e, t, n);
    return this;
  }
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  setHex(e, t = qa) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, Ln.toWorkingColorSpace(this, t), this;
  }
  setRGB(e, t, n, r = Ln.workingColorSpace) {
    return this.r = e, this.g = t, this.b = n, Ln.toWorkingColorSpace(this, r), this;
  }
  setHSL(e, t, n, r = Ln.workingColorSpace) {
    if (e = AS(e, 1), t = ci(t, 0, 1), n = ci(n, 0, 1), t === 0)
      this.r = this.g = this.b = n;
    else {
      const o = n <= 0.5 ? n * (1 + t) : n + t - n * t, c = 2 * n - o;
      this.r = z_(c, o, e + 1 / 3), this.g = z_(c, o, e), this.b = z_(c, o, e - 1 / 3);
    }
    return Ln.toWorkingColorSpace(this, r), this;
  }
  setStyle(e, t = qa) {
    function n(o) {
      o !== void 0 && parseFloat(o) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let r;
    if (r = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let o;
      const c = r[1], f = r[2];
      switch (c) {
        case "rgb":
        case "rgba":
          if (o = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setRGB(
              Math.min(255, parseInt(o[1], 10)) / 255,
              Math.min(255, parseInt(o[2], 10)) / 255,
              Math.min(255, parseInt(o[3], 10)) / 255,
              t
            );
          if (o = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setRGB(
              Math.min(100, parseInt(o[1], 10)) / 100,
              Math.min(100, parseInt(o[2], 10)) / 100,
              Math.min(100, parseInt(o[3], 10)) / 100,
              t
            );
          break;
        case "hsl":
        case "hsla":
          if (o = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(f))
            return n(o[4]), this.setHSL(
              parseFloat(o[1]) / 360,
              parseFloat(o[2]) / 100,
              parseFloat(o[3]) / 100,
              t
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (r = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const o = r[1], c = o.length;
      if (c === 3)
        return this.setRGB(
          parseInt(o.charAt(0), 16) / 15,
          parseInt(o.charAt(1), 16) / 15,
          parseInt(o.charAt(2), 16) / 15,
          t
        );
      if (c === 6)
        return this.setHex(parseInt(o, 16), t);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, t);
    return this;
  }
  setColorName(e, t = qa) {
    const n = lA[e.toLowerCase()];
    return n !== void 0 ? this.setHex(n, t) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  copySRGBToLinear(e) {
    return this.r = fd(e.r), this.g = fd(e.g), this.b = fd(e.b), this;
  }
  copyLinearToSRGB(e) {
    return this.r = b_(e.r), this.g = b_(e.g), this.b = b_(e.b), this;
  }
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  getHex(e = qa) {
    return Ln.fromWorkingColorSpace(vr.copy(this), e), Math.round(ci(vr.r * 255, 0, 255)) * 65536 + Math.round(ci(vr.g * 255, 0, 255)) * 256 + Math.round(ci(vr.b * 255, 0, 255));
  }
  getHexString(e = qa) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  getHSL(e, t = Ln.workingColorSpace) {
    Ln.fromWorkingColorSpace(vr.copy(this), t);
    const n = vr.r, r = vr.g, o = vr.b, c = Math.max(n, r, o), f = Math.min(n, r, o);
    let p, h;
    const g = (f + c) / 2;
    if (f === c)
      p = 0, h = 0;
    else {
      const _ = c - f;
      switch (h = g <= 0.5 ? _ / (c + f) : _ / (2 - c - f), c) {
        case n:
          p = (r - o) / _ + (r < o ? 6 : 0);
          break;
        case r:
          p = (o - n) / _ + 2;
          break;
        case o:
          p = (n - r) / _ + 4;
          break;
      }
      p /= 6;
    }
    return e.h = p, e.s = h, e.l = g, e;
  }
  getRGB(e, t = Ln.workingColorSpace) {
    return Ln.fromWorkingColorSpace(vr.copy(this), t), e.r = vr.r, e.g = vr.g, e.b = vr.b, e;
  }
  getStyle(e = qa) {
    Ln.fromWorkingColorSpace(vr.copy(this), e);
    const t = vr.r, n = vr.g, r = vr.b;
    return e !== qa ? `color(${e} ${t.toFixed(3)} ${n.toFixed(3)} ${r.toFixed(3)})` : `rgb(${Math.round(t * 255)},${Math.round(n * 255)},${Math.round(r * 255)})`;
  }
  offsetHSL(e, t, n) {
    return this.getHSL(Fl), this.setHSL(Fl.h + e, Fl.s + t, Fl.l + n);
  }
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  addColors(e, t) {
    return this.r = e.r + t.r, this.g = e.g + t.g, this.b = e.b + t.b, this;
  }
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  lerp(e, t) {
    return this.r += (e.r - this.r) * t, this.g += (e.g - this.g) * t, this.b += (e.b - this.b) * t, this;
  }
  lerpColors(e, t, n) {
    return this.r = e.r + (t.r - e.r) * n, this.g = e.g + (t.g - e.g) * n, this.b = e.b + (t.b - e.b) * n, this;
  }
  lerpHSL(e, t) {
    this.getHSL(Fl), e.getHSL(Ov);
    const n = op(Fl.h, Ov.h, t), r = op(Fl.s, Ov.s, t), o = op(Fl.l, Ov.l, t);
    return this.setHSL(n, r, o), this;
  }
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  applyMatrix3(e) {
    const t = this.r, n = this.g, r = this.b, o = e.elements;
    return this.r = o[0] * t + o[3] * n + o[6] * r, this.g = o[1] * t + o[4] * n + o[7] * r, this.b = o[2] * t + o[5] * n + o[8] * r, this;
  }
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  fromArray(e, t = 0) {
    return this.r = e[t], this.g = e[t + 1], this.b = e[t + 2], this;
  }
  toArray(e = [], t = 0) {
    return e[t] = this.r, e[t + 1] = this.g, e[t + 2] = this.b, e;
  }
  fromBufferAttribute(e, t) {
    return this.r = e.getX(t), this.g = e.getY(t), this.b = e.getZ(t), this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const vr = /* @__PURE__ */ new mt();
mt.NAMES = lA;
let wD = 0;
class ir extends Ho {
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: wD++ }), this.uuid = ya(), this.name = "", this.type = "Material", this.blending = lc, this.side = Oo, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = Cg, this.blendDst = Lg, this.blendEquation = Wl, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new mt(0, 0, 0), this.blendAlpha = 0, this.depthFunc = cp, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = Kx, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = ec, this.stencilZFail = ec, this.stencilZPass = ec, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  onBuild() {
  }
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(e) {
    if (e !== void 0)
      for (const t in e) {
        const n = e[t];
        if (n === void 0) {
          console.warn(`THREE.Material: parameter '${t}' has value of undefined.`);
          continue;
        }
        const r = this[t];
        if (r === void 0) {
          console.warn(`THREE.Material: '${t}' is not a property of THREE.${this.type}.`);
          continue;
        }
        r && r.isColor ? r.set(n) : r && r.isVector3 && n && n.isVector3 ? r.copy(n) : this[t] = n;
      }
  }
  toJSON(e) {
    const t = e === void 0 || typeof e == "string";
    t && (e = {
      textures: {},
      images: {}
    });
    const n = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    n.uuid = this.uuid, n.type = this.type, this.name !== "" && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), this.roughness !== void 0 && (n.roughness = this.roughness), this.metalness !== void 0 && (n.metalness = this.metalness), this.sheen !== void 0 && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (n.shininess = this.shininess), this.clearcoat !== void 0 && (n.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.iridescence !== void 0 && (n.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (n.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (n.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (n.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (n.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(e).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(e).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(e).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(e).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(e).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (n.combine = this.combine)), this.envMapRotation !== void 0 && (n.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (n.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (n.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (n.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (n.size = this.size), this.shadowSide !== null && (n.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== lc && (n.blending = this.blending), this.side !== Oo && (n.side = this.side), this.vertexColors === !0 && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), this.transparent === !0 && (n.transparent = !0), this.blendSrc !== Cg && (n.blendSrc = this.blendSrc), this.blendDst !== Lg && (n.blendDst = this.blendDst), this.blendEquation !== Wl && (n.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (n.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (n.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (n.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (n.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (n.blendAlpha = this.blendAlpha), this.depthFunc !== cp && (n.depthFunc = this.depthFunc), this.depthTest === !1 && (n.depthTest = this.depthTest), this.depthWrite === !1 && (n.depthWrite = this.depthWrite), this.colorWrite === !1 && (n.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (n.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== Kx && (n.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (n.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (n.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== ec && (n.stencilFail = this.stencilFail), this.stencilZFail !== ec && (n.stencilZFail = this.stencilZFail), this.stencilZPass !== ec && (n.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (n.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (n.rotation = this.rotation), this.polygonOffset === !0 && (n.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (n.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (n.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (n.linewidth = this.linewidth), this.dashSize !== void 0 && (n.dashSize = this.dashSize), this.gapSize !== void 0 && (n.gapSize = this.gapSize), this.scale !== void 0 && (n.scale = this.scale), this.dithering === !0 && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), this.alphaHash === !0 && (n.alphaHash = !0), this.alphaToCoverage === !0 && (n.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (n.premultipliedAlpha = !0), this.forceSinglePass === !0 && (n.forceSinglePass = !0), this.wireframe === !0 && (n.wireframe = !0), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (n.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (n.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (n.flatShading = !0), this.visible === !1 && (n.visible = !1), this.toneMapped === !1 && (n.toneMapped = !1), this.fog === !1 && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData);
    function r(o) {
      const c = [];
      for (const f in o) {
        const p = o[f];
        delete p.metadata, c.push(p);
      }
      return c;
    }
    if (t) {
      const o = r(e.textures), c = r(e.images);
      o.length > 0 && (n.textures = o), c.length > 0 && (n.images = c);
    }
    return n;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const t = e.clippingPlanes;
    let n = null;
    if (t !== null) {
      const r = t.length;
      n = new Array(r);
      for (let o = 0; o !== r; ++o)
        n[o] = t[o].clone();
    }
    return this.clippingPlanes = n, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
class Zl extends ir {
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new mt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = Np, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const No = /* @__PURE__ */ AD();
function AD() {
  const s = new ArrayBuffer(4), e = new Float32Array(s), t = new Uint32Array(s), n = new Uint32Array(512), r = new Uint32Array(512);
  for (let p = 0; p < 256; ++p) {
    const h = p - 127;
    h < -27 ? (n[p] = 0, n[p | 256] = 32768, r[p] = 24, r[p | 256] = 24) : h < -14 ? (n[p] = 1024 >> -h - 14, n[p | 256] = 1024 >> -h - 14 | 32768, r[p] = -h - 1, r[p | 256] = -h - 1) : h <= 15 ? (n[p] = h + 15 << 10, n[p | 256] = h + 15 << 10 | 32768, r[p] = 13, r[p | 256] = 13) : h < 128 ? (n[p] = 31744, n[p | 256] = 64512, r[p] = 24, r[p | 256] = 24) : (n[p] = 31744, n[p | 256] = 64512, r[p] = 13, r[p | 256] = 13);
  }
  const o = new Uint32Array(2048), c = new Uint32Array(64), f = new Uint32Array(64);
  for (let p = 1; p < 1024; ++p) {
    let h = p << 13, g = 0;
    for (; !(h & 8388608); )
      h <<= 1, g -= 8388608;
    h &= -8388609, g += 947912704, o[p] = h | g;
  }
  for (let p = 1024; p < 2048; ++p)
    o[p] = 939524096 + (p - 1024 << 13);
  for (let p = 1; p < 31; ++p)
    c[p] = p << 23;
  c[31] = 1199570944, c[32] = 2147483648;
  for (let p = 33; p < 63; ++p)
    c[p] = 2147483648 + (p - 32 << 23);
  c[63] = 3347054592;
  for (let p = 1; p < 64; ++p)
    p !== 32 && (f[p] = 1024);
  return {
    floatView: e,
    uint32View: t,
    baseTable: n,
    shiftTable: r,
    mantissaTable: o,
    exponentTable: c,
    offsetTable: f
  };
}
function Jr(s) {
  Math.abs(s) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), s = ci(s, -65504, 65504), No.floatView[0] = s;
  const e = No.uint32View[0], t = e >> 23 & 511;
  return No.baseTable[t] + ((e & 8388607) >> No.shiftTable[t]);
}
function ip(s) {
  const e = s >> 10;
  return No.uint32View[0] = No.mantissaTable[No.offsetTable[e] + (s & 1023)] + No.exponentTable[e], No.floatView[0];
}
const RD = {
  toHalfFloat: Jr,
  fromHalfFloat: ip
}, Mi = /* @__PURE__ */ new q(), Fv = /* @__PURE__ */ new De();
class Dn {
  constructor(e, t, n = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, this.name = "", this.array = e, this.itemSize = t, this.count = e !== void 0 ? e.length / t : 0, this.normalized = n, this.usage = Mp, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.gpuType = ja, this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return aA("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  copyAt(e, t, n) {
    e *= this.itemSize, n *= t.itemSize;
    for (let r = 0, o = this.itemSize; r < o; r++)
      this.array[e + r] = t.array[n + r];
    return this;
  }
  copyArray(e) {
    return this.array.set(e), this;
  }
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let t = 0, n = this.count; t < n; t++)
        Fv.fromBufferAttribute(this, t), Fv.applyMatrix3(e), this.setXY(t, Fv.x, Fv.y);
    else if (this.itemSize === 3)
      for (let t = 0, n = this.count; t < n; t++)
        Mi.fromBufferAttribute(this, t), Mi.applyMatrix3(e), this.setXYZ(t, Mi.x, Mi.y, Mi.z);
    return this;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Mi.fromBufferAttribute(this, t), Mi.applyMatrix4(e), this.setXYZ(t, Mi.x, Mi.y, Mi.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Mi.fromBufferAttribute(this, t), Mi.applyNormalMatrix(e), this.setXYZ(t, Mi.x, Mi.y, Mi.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Mi.fromBufferAttribute(this, t), Mi.transformDirection(e), this.setXYZ(t, Mi.x, Mi.y, Mi.z);
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.itemSize + t];
    return this.normalized && (n = Pr(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = jt(n, this.array)), this.array[e * this.itemSize + t] = n, this;
  }
  getX(e) {
    let t = this.array[e * this.itemSize];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize] = t, this;
  }
  getY(e) {
    let t = this.array[e * this.itemSize + 1];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 1] = t, this;
  }
  getZ(e) {
    let t = this.array[e * this.itemSize + 2];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 2] = t, this;
  }
  getW(e) {
    let t = this.array[e * this.itemSize + 3];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 3] = t, this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, r) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this;
  }
  setXYZW(e, t, n, r, o) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array), o = jt(o, this.array)), this.array[e + 0] = t, this.array[e + 1] = n, this.array[e + 2] = r, this.array[e + 3] = o, this;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Mp && (e.usage = this.usage), e;
  }
}
class CD extends Dn {
  constructor(e, t, n) {
    super(new Int8Array(e), t, n);
  }
}
class LD extends Dn {
  constructor(e, t, n) {
    super(new Uint8Array(e), t, n);
  }
}
class PD extends Dn {
  constructor(e, t, n) {
    super(new Uint8ClampedArray(e), t, n);
  }
}
class DD extends Dn {
  constructor(e, t, n) {
    super(new Int16Array(e), t, n);
  }
}
class CS extends Dn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n);
  }
}
class ND extends Dn {
  constructor(e, t, n) {
    super(new Int32Array(e), t, n);
  }
}
class LS extends Dn {
  constructor(e, t, n) {
    super(new Uint32Array(e), t, n);
  }
}
class UD extends Dn {
  constructor(e, t, n) {
    super(new Uint16Array(e), t, n), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let t = ip(this.array[e * this.itemSize]);
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setX(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize] = Jr(t), this;
  }
  getY(e) {
    let t = ip(this.array[e * this.itemSize + 1]);
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setY(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 1] = Jr(t), this;
  }
  getZ(e) {
    let t = ip(this.array[e * this.itemSize + 2]);
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setZ(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 2] = Jr(t), this;
  }
  getW(e) {
    let t = ip(this.array[e * this.itemSize + 3]);
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setW(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.array[e * this.itemSize + 3] = Jr(t), this;
  }
  setXY(e, t, n) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array)), this.array[e + 0] = Jr(t), this.array[e + 1] = Jr(n), this;
  }
  setXYZ(e, t, n, r) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array)), this.array[e + 0] = Jr(t), this.array[e + 1] = Jr(n), this.array[e + 2] = Jr(r), this;
  }
  setXYZW(e, t, n, r, o) {
    return e *= this.itemSize, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array), o = jt(o, this.array)), this.array[e + 0] = Jr(t), this.array[e + 1] = Jr(n), this.array[e + 2] = Jr(r), this.array[e + 3] = Jr(o), this;
  }
}
class Mt extends Dn {
  constructor(e, t, n) {
    super(new Float32Array(e), t, n);
  }
}
let ID = 0;
const Xa = /* @__PURE__ */ new Ht(), B_ = /* @__PURE__ */ new xn(), Vf = /* @__PURE__ */ new q(), va = /* @__PURE__ */ new Nr(), Yh = /* @__PURE__ */ new Nr(), Hi = /* @__PURE__ */ new q();
class $t extends Ho {
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: ID++ }), this.uuid = ya(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (iA(e) ? LS : CS)(e, 1) : this.index = e, this;
  }
  getAttribute(e) {
    return this.attributes[e];
  }
  setAttribute(e, t) {
    return this.attributes[e] = t, this;
  }
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  addGroup(e, t, n = 0) {
    this.groups.push({
      start: e,
      count: t,
      materialIndex: n
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(e, t) {
    this.drawRange.start = e, this.drawRange.count = t;
  }
  applyMatrix4(e) {
    const t = this.attributes.position;
    t !== void 0 && (t.applyMatrix4(e), t.needsUpdate = !0);
    const n = this.attributes.normal;
    if (n !== void 0) {
      const o = new Yt().getNormalMatrix(e);
      n.applyNormalMatrix(o), n.needsUpdate = !0;
    }
    const r = this.attributes.tangent;
    return r !== void 0 && (r.transformDirection(e), r.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  applyQuaternion(e) {
    return Xa.makeRotationFromQuaternion(e), this.applyMatrix4(Xa), this;
  }
  rotateX(e) {
    return Xa.makeRotationX(e), this.applyMatrix4(Xa), this;
  }
  rotateY(e) {
    return Xa.makeRotationY(e), this.applyMatrix4(Xa), this;
  }
  rotateZ(e) {
    return Xa.makeRotationZ(e), this.applyMatrix4(Xa), this;
  }
  translate(e, t, n) {
    return Xa.makeTranslation(e, t, n), this.applyMatrix4(Xa), this;
  }
  scale(e, t, n) {
    return Xa.makeScale(e, t, n), this.applyMatrix4(Xa), this;
  }
  lookAt(e) {
    return B_.lookAt(e), B_.updateMatrix(), this.applyMatrix4(B_.matrix), this;
  }
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(Vf).negate(), this.translate(Vf.x, Vf.y, Vf.z), this;
  }
  setFromPoints(e) {
    const t = [];
    for (let n = 0, r = e.length; n < r; n++) {
      const o = e[n];
      t.push(o.x, o.y, o.z || 0);
    }
    return this.setAttribute("position", new Mt(t, 3)), this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Nr());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new q(-1 / 0, -1 / 0, -1 / 0),
        new q(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), t)
        for (let n = 0, r = t.length; n < r; n++) {
          const o = t[n];
          va.setFromBufferAttribute(o), this.morphTargetsRelative ? (Hi.addVectors(this.boundingBox.min, va.min), this.boundingBox.expandByPoint(Hi), Hi.addVectors(this.boundingBox.max, va.max), this.boundingBox.expandByPoint(Hi)) : (this.boundingBox.expandByPoint(va.min), this.boundingBox.expandByPoint(va.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new yr());
    const e = this.attributes.position, t = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new q(), 1 / 0);
      return;
    }
    if (e) {
      const n = this.boundingSphere.center;
      if (va.setFromBufferAttribute(e), t)
        for (let o = 0, c = t.length; o < c; o++) {
          const f = t[o];
          Yh.setFromBufferAttribute(f), this.morphTargetsRelative ? (Hi.addVectors(va.min, Yh.min), va.expandByPoint(Hi), Hi.addVectors(va.max, Yh.max), va.expandByPoint(Hi)) : (va.expandByPoint(Yh.min), va.expandByPoint(Yh.max));
        }
      va.getCenter(n);
      let r = 0;
      for (let o = 0, c = e.count; o < c; o++)
        Hi.fromBufferAttribute(e, o), r = Math.max(r, n.distanceToSquared(Hi));
      if (t)
        for (let o = 0, c = t.length; o < c; o++) {
          const f = t[o], p = this.morphTargetsRelative;
          for (let h = 0, g = f.count; h < g; h++)
            Hi.fromBufferAttribute(f, h), p && (Vf.fromBufferAttribute(e, h), Hi.add(Vf)), r = Math.max(r, n.distanceToSquared(Hi));
        }
      this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeTangents() {
    const e = this.index, t = this.attributes;
    if (e === null || t.position === void 0 || t.normal === void 0 || t.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const n = t.position, r = t.normal, o = t.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Dn(new Float32Array(4 * n.count), 4));
    const c = this.getAttribute("tangent"), f = [], p = [];
    for (let k = 0; k < n.count; k++)
      f[k] = new q(), p[k] = new q();
    const h = new q(), g = new q(), _ = new q(), x = new De(), M = new De(), T = new De(), R = new q(), b = new q();
    function E(k, F, N) {
      h.fromBufferAttribute(n, k), g.fromBufferAttribute(n, F), _.fromBufferAttribute(n, N), x.fromBufferAttribute(o, k), M.fromBufferAttribute(o, F), T.fromBufferAttribute(o, N), g.sub(h), _.sub(h), M.sub(x), T.sub(x);
      const X = 1 / (M.x * T.y - T.x * M.y);
      isFinite(X) && (R.copy(g).multiplyScalar(T.y).addScaledVector(_, -M.y).multiplyScalar(X), b.copy(_).multiplyScalar(M.x).addScaledVector(g, -T.x).multiplyScalar(X), f[k].add(R), f[F].add(R), f[N].add(R), p[k].add(b), p[F].add(b), p[N].add(b));
    }
    let L = this.groups;
    L.length === 0 && (L = [{
      start: 0,
      count: e.count
    }]);
    for (let k = 0, F = L.length; k < F; ++k) {
      const N = L[k], X = N.start, K = N.count;
      for (let J = X, ae = X + K; J < ae; J += 3)
        E(
          e.getX(J + 0),
          e.getX(J + 1),
          e.getX(J + 2)
        );
    }
    const C = new q(), U = new q(), Y = new q(), B = new q();
    function H(k) {
      Y.fromBufferAttribute(r, k), B.copy(Y);
      const F = f[k];
      C.copy(F), C.sub(Y.multiplyScalar(Y.dot(F))).normalize(), U.crossVectors(B, F);
      const X = U.dot(p[k]) < 0 ? -1 : 1;
      c.setXYZW(k, C.x, C.y, C.z, X);
    }
    for (let k = 0, F = L.length; k < F; ++k) {
      const N = L[k], X = N.start, K = N.count;
      for (let J = X, ae = X + K; J < ae; J += 3)
        H(e.getX(J + 0)), H(e.getX(J + 1)), H(e.getX(J + 2));
    }
  }
  computeVertexNormals() {
    const e = this.index, t = this.getAttribute("position");
    if (t !== void 0) {
      let n = this.getAttribute("normal");
      if (n === void 0)
        n = new Dn(new Float32Array(t.count * 3), 3), this.setAttribute("normal", n);
      else
        for (let x = 0, M = n.count; x < M; x++)
          n.setXYZ(x, 0, 0, 0);
      const r = new q(), o = new q(), c = new q(), f = new q(), p = new q(), h = new q(), g = new q(), _ = new q();
      if (e)
        for (let x = 0, M = e.count; x < M; x += 3) {
          const T = e.getX(x + 0), R = e.getX(x + 1), b = e.getX(x + 2);
          r.fromBufferAttribute(t, T), o.fromBufferAttribute(t, R), c.fromBufferAttribute(t, b), g.subVectors(c, o), _.subVectors(r, o), g.cross(_), f.fromBufferAttribute(n, T), p.fromBufferAttribute(n, R), h.fromBufferAttribute(n, b), f.add(g), p.add(g), h.add(g), n.setXYZ(T, f.x, f.y, f.z), n.setXYZ(R, p.x, p.y, p.z), n.setXYZ(b, h.x, h.y, h.z);
        }
      else
        for (let x = 0, M = t.count; x < M; x += 3)
          r.fromBufferAttribute(t, x + 0), o.fromBufferAttribute(t, x + 1), c.fromBufferAttribute(t, x + 2), g.subVectors(c, o), _.subVectors(r, o), g.cross(_), n.setXYZ(x + 0, g.x, g.y, g.z), n.setXYZ(x + 1, g.x, g.y, g.z), n.setXYZ(x + 2, g.x, g.y, g.z);
      this.normalizeNormals(), n.needsUpdate = !0;
    }
  }
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let t = 0, n = e.count; t < n; t++)
      Hi.fromBufferAttribute(e, t), Hi.normalize(), e.setXYZ(t, Hi.x, Hi.y, Hi.z);
  }
  toNonIndexed() {
    function e(f, p) {
      const h = f.array, g = f.itemSize, _ = f.normalized, x = new h.constructor(p.length * g);
      let M = 0, T = 0;
      for (let R = 0, b = p.length; R < b; R++) {
        f.isInterleavedBufferAttribute ? M = p[R] * f.data.stride + f.offset : M = p[R] * g;
        for (let E = 0; E < g; E++)
          x[T++] = h[M++];
      }
      return new Dn(x, g, _);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const t = new $t(), n = this.index.array, r = this.attributes;
    for (const f in r) {
      const p = r[f], h = e(p, n);
      t.setAttribute(f, h);
    }
    const o = this.morphAttributes;
    for (const f in o) {
      const p = [], h = o[f];
      for (let g = 0, _ = h.length; g < _; g++) {
        const x = h[g], M = e(x, n);
        p.push(M);
      }
      t.morphAttributes[f] = p;
    }
    t.morphTargetsRelative = this.morphTargetsRelative;
    const c = this.groups;
    for (let f = 0, p = c.length; f < p; f++) {
      const h = c[f];
      t.addGroup(h.start, h.count, h.materialIndex);
    }
    return t;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const p = this.parameters;
      for (const h in p)
        p[h] !== void 0 && (e[h] = p[h]);
      return e;
    }
    e.data = { attributes: {} };
    const t = this.index;
    t !== null && (e.data.index = {
      type: t.array.constructor.name,
      array: Array.prototype.slice.call(t.array)
    });
    const n = this.attributes;
    for (const p in n) {
      const h = n[p];
      e.data.attributes[p] = h.toJSON(e.data);
    }
    const r = {};
    let o = !1;
    for (const p in this.morphAttributes) {
      const h = this.morphAttributes[p], g = [];
      for (let _ = 0, x = h.length; _ < x; _++) {
        const M = h[_];
        g.push(M.toJSON(e.data));
      }
      g.length > 0 && (r[p] = g, o = !0);
    }
    o && (e.data.morphAttributes = r, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const c = this.groups;
    c.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(c)));
    const f = this.boundingSphere;
    return f !== null && (e.data.boundingSphere = {
      center: f.center.toArray(),
      radius: f.radius
    }), e;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const t = {};
    this.name = e.name;
    const n = e.index;
    n !== null && this.setIndex(n.clone(t));
    const r = e.attributes;
    for (const h in r) {
      const g = r[h];
      this.setAttribute(h, g.clone(t));
    }
    const o = e.morphAttributes;
    for (const h in o) {
      const g = [], _ = o[h];
      for (let x = 0, M = _.length; x < M; x++)
        g.push(_[x].clone(t));
      this.morphAttributes[h] = g;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const c = e.groups;
    for (let h = 0, g = c.length; h < g; h++) {
      const _ = c[h];
      this.addGroup(_.start, _.count, _.materialIndex);
    }
    const f = e.boundingBox;
    f !== null && (this.boundingBox = f.clone());
    const p = e.boundingSphere;
    return p !== null && (this.boundingSphere = p.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const uT = /* @__PURE__ */ new Ht(), Wu = /* @__PURE__ */ new _d(), zv = /* @__PURE__ */ new yr(), cT = /* @__PURE__ */ new q(), kf = /* @__PURE__ */ new q(), Gf = /* @__PURE__ */ new q(), Wf = /* @__PURE__ */ new q(), H_ = /* @__PURE__ */ new q(), Bv = /* @__PURE__ */ new q(), Hv = /* @__PURE__ */ new De(), Vv = /* @__PURE__ */ new De(), kv = /* @__PURE__ */ new De(), fT = /* @__PURE__ */ new q(), dT = /* @__PURE__ */ new q(), hT = /* @__PURE__ */ new q(), Gv = /* @__PURE__ */ new q(), Wv = /* @__PURE__ */ new q();
class Ti extends xn {
  constructor(e = new $t(), t = new Zl()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
  getVertexPosition(e, t) {
    const n = this.geometry, r = n.attributes.position, o = n.morphAttributes.position, c = n.morphTargetsRelative;
    t.fromBufferAttribute(r, e);
    const f = this.morphTargetInfluences;
    if (o && f) {
      Bv.set(0, 0, 0);
      for (let p = 0, h = o.length; p < h; p++) {
        const g = f[p], _ = o[p];
        g !== 0 && (H_.fromBufferAttribute(_, e), c ? Bv.addScaledVector(H_, g) : Bv.addScaledVector(H_.sub(t), g));
      }
      t.add(Bv);
    }
    return t;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.material, o = this.matrixWorld;
    r !== void 0 && (n.boundingSphere === null && n.computeBoundingSphere(), zv.copy(n.boundingSphere), zv.applyMatrix4(o), Wu.copy(e.ray).recast(e.near), !(zv.containsPoint(Wu.origin) === !1 && (Wu.intersectSphere(zv, cT) === null || Wu.origin.distanceToSquared(cT) > (e.far - e.near) ** 2)) && (uT.copy(o).invert(), Wu.copy(e.ray).applyMatrix4(uT), !(n.boundingBox !== null && Wu.intersectsBox(n.boundingBox) === !1) && this._computeIntersections(e, t, Wu)));
  }
  _computeIntersections(e, t, n) {
    let r;
    const o = this.geometry, c = this.material, f = o.index, p = o.attributes.position, h = o.attributes.uv, g = o.attributes.uv1, _ = o.attributes.normal, x = o.groups, M = o.drawRange;
    if (f !== null)
      if (Array.isArray(c))
        for (let T = 0, R = x.length; T < R; T++) {
          const b = x[T], E = c[b.materialIndex], L = Math.max(b.start, M.start), C = Math.min(f.count, Math.min(b.start + b.count, M.start + M.count));
          for (let U = L, Y = C; U < Y; U += 3) {
            const B = f.getX(U), H = f.getX(U + 1), k = f.getX(U + 2);
            r = Xv(this, E, e, n, h, g, _, B, H, k), r && (r.faceIndex = Math.floor(U / 3), r.face.materialIndex = b.materialIndex, t.push(r));
          }
        }
      else {
        const T = Math.max(0, M.start), R = Math.min(f.count, M.start + M.count);
        for (let b = T, E = R; b < E; b += 3) {
          const L = f.getX(b), C = f.getX(b + 1), U = f.getX(b + 2);
          r = Xv(this, c, e, n, h, g, _, L, C, U), r && (r.faceIndex = Math.floor(b / 3), t.push(r));
        }
      }
    else if (p !== void 0)
      if (Array.isArray(c))
        for (let T = 0, R = x.length; T < R; T++) {
          const b = x[T], E = c[b.materialIndex], L = Math.max(b.start, M.start), C = Math.min(p.count, Math.min(b.start + b.count, M.start + M.count));
          for (let U = L, Y = C; U < Y; U += 3) {
            const B = U, H = U + 1, k = U + 2;
            r = Xv(this, E, e, n, h, g, _, B, H, k), r && (r.faceIndex = Math.floor(U / 3), r.face.materialIndex = b.materialIndex, t.push(r));
          }
        }
      else {
        const T = Math.max(0, M.start), R = Math.min(p.count, M.start + M.count);
        for (let b = T, E = R; b < E; b += 3) {
          const L = b, C = b + 1, U = b + 2;
          r = Xv(this, c, e, n, h, g, _, L, C, U), r && (r.faceIndex = Math.floor(b / 3), t.push(r));
        }
      }
  }
}
function OD(s, e, t, n, r, o, c, f) {
  let p;
  if (e.side === Dr ? p = n.intersectTriangle(c, o, r, !0, f) : p = n.intersectTriangle(r, o, c, e.side === Oo, f), p === null)
    return null;
  Wv.copy(f), Wv.applyMatrix4(s.matrixWorld);
  const h = t.ray.origin.distanceTo(Wv);
  return h < t.near || h > t.far ? null : {
    distance: h,
    point: Wv.clone(),
    object: s
  };
}
function Xv(s, e, t, n, r, o, c, f, p, h) {
  s.getVertexPosition(f, kf), s.getVertexPosition(p, Gf), s.getVertexPosition(h, Wf);
  const g = OD(s, e, t, n, kf, Gf, Wf, Gv);
  if (g) {
    r && (Hv.fromBufferAttribute(r, f), Vv.fromBufferAttribute(r, p), kv.fromBufferAttribute(r, h), g.uv = ga.getInterpolation(Gv, kf, Gf, Wf, Hv, Vv, kv, new De())), o && (Hv.fromBufferAttribute(o, f), Vv.fromBufferAttribute(o, p), kv.fromBufferAttribute(o, h), g.uv1 = ga.getInterpolation(Gv, kf, Gf, Wf, Hv, Vv, kv, new De())), c && (fT.fromBufferAttribute(c, f), dT.fromBufferAttribute(c, p), hT.fromBufferAttribute(c, h), g.normal = ga.getInterpolation(Gv, kf, Gf, Wf, fT, dT, hT, new q()), g.normal.dot(n.direction) > 0 && g.normal.multiplyScalar(-1));
    const _ = {
      a: f,
      b: p,
      c: h,
      normal: new q(),
      materialIndex: 0
    };
    ga.getNormal(kf, Gf, Wf, _.normal), g.face = _;
  }
  return g;
}
class vc extends $t {
  constructor(e = 1, t = 1, n = 1, r = 1, o = 1, c = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: t,
      depth: n,
      widthSegments: r,
      heightSegments: o,
      depthSegments: c
    };
    const f = this;
    r = Math.floor(r), o = Math.floor(o), c = Math.floor(c);
    const p = [], h = [], g = [], _ = [];
    let x = 0, M = 0;
    T("z", "y", "x", -1, -1, n, t, e, c, o, 0), T("z", "y", "x", 1, -1, n, t, -e, c, o, 1), T("x", "z", "y", 1, 1, e, n, t, r, c, 2), T("x", "z", "y", 1, -1, e, n, -t, r, c, 3), T("x", "y", "z", 1, -1, e, t, n, r, o, 4), T("x", "y", "z", -1, -1, e, t, -n, r, o, 5), this.setIndex(p), this.setAttribute("position", new Mt(h, 3)), this.setAttribute("normal", new Mt(g, 3)), this.setAttribute("uv", new Mt(_, 2));
    function T(R, b, E, L, C, U, Y, B, H, k, F) {
      const N = U / H, X = Y / k, K = U / 2, J = Y / 2, ae = B / 2, _e = H + 1, Me = k + 1;
      let Fe = 0, Q = 0;
      const ue = new q();
      for (let ne = 0; ne < Me; ne++) {
        const be = ne * X - J;
        for (let Oe = 0; Oe < _e; Oe++) {
          const ht = Oe * N - K;
          ue[R] = ht * L, ue[b] = be * C, ue[E] = ae, h.push(ue.x, ue.y, ue.z), ue[R] = 0, ue[b] = 0, ue[E] = B > 0 ? 1 : -1, g.push(ue.x, ue.y, ue.z), _.push(Oe / H), _.push(1 - ne / k), Fe += 1;
        }
      }
      for (let ne = 0; ne < k; ne++)
        for (let be = 0; be < H; be++) {
          const Oe = x + be + _e * ne, ht = x + be + _e * (ne + 1), ve = x + (be + 1) + _e * (ne + 1), Ue = x + (be + 1) + _e * ne;
          p.push(Oe, ht, Ue), p.push(ht, ve, Ue), Q += 6;
        }
      f.addGroup(M, Q, F), M += Q, x += Fe;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new vc(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function pd(s) {
  const e = {};
  for (const t in s) {
    e[t] = {};
    for (const n in s[t]) {
      const r = s[t][n];
      r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? r.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[t][n] = null) : e[t][n] = r.clone() : Array.isArray(r) ? e[t][n] = r.slice() : e[t][n] = r;
    }
  }
  return e;
}
function Lr(s) {
  const e = {};
  for (let t = 0; t < s.length; t++) {
    const n = pd(s[t]);
    for (const r in n)
      e[r] = n[r];
  }
  return e;
}
function FD(s) {
  const e = [];
  for (let t = 0; t < s.length; t++)
    e.push(s[t].clone());
  return e;
}
function uA(s) {
  const e = s.getRenderTarget();
  return e === null ? s.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : Ln.workingColorSpace;
}
const cA = { clone: pd, merge: Lr };
var zD = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, BD = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class gs extends ir {
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = zD, this.fragmentShader = BD, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = pd(e.uniforms), this.uniformsGroups = FD(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    t.glslVersion = this.glslVersion, t.uniforms = {};
    for (const r in this.uniforms) {
      const c = this.uniforms[r].value;
      c && c.isTexture ? t.uniforms[r] = {
        type: "t",
        value: c.toJSON(e).uuid
      } : c && c.isColor ? t.uniforms[r] = {
        type: "c",
        value: c.getHex()
      } : c && c.isVector2 ? t.uniforms[r] = {
        type: "v2",
        value: c.toArray()
      } : c && c.isVector3 ? t.uniforms[r] = {
        type: "v3",
        value: c.toArray()
      } : c && c.isVector4 ? t.uniforms[r] = {
        type: "v4",
        value: c.toArray()
      } : c && c.isMatrix3 ? t.uniforms[r] = {
        type: "m3",
        value: c.toArray()
      } : c && c.isMatrix4 ? t.uniforms[r] = {
        type: "m4",
        value: c.toArray()
      } : t.uniforms[r] = {
        value: c
      };
    }
    Object.keys(this.defines).length > 0 && (t.defines = this.defines), t.vertexShader = this.vertexShader, t.fragmentShader = this.fragmentShader, t.lights = this.lights, t.clipping = this.clipping;
    const n = {};
    for (const r in this.extensions)
      this.extensions[r] === !0 && (n[r] = !0);
    return Object.keys(n).length > 0 && (t.extensions = n), t;
  }
}
class Ip extends xn {
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new Ht(), this.projectionMatrix = new Ht(), this.projectionMatrixInverse = new Ht(), this.coordinateSystem = Ws;
  }
  copy(e, t) {
    return super.copy(e, t), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, t) {
    super.updateWorldMatrix(e, t), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const zl = /* @__PURE__ */ new q(), pT = /* @__PURE__ */ new De(), mT = /* @__PURE__ */ new De();
class Vi extends Ip {
  constructor(e = 50, t = 1, n = 0.1, r = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = n, this.far = r, this.focus = 10, this.aspect = t, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const t = 0.5 * this.getFilmHeight() / e;
    this.fov = hd * 2 * Math.atan(t), this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const e = Math.tan(cc * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  getEffectiveFOV() {
    return hd * 2 * Math.atan(
      Math.tan(cc * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   */
  getViewBounds(e, t, n) {
    zl.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), t.set(zl.x, zl.y).multiplyScalar(-e / zl.z), zl.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), n.set(zl.x, zl.y).multiplyScalar(-e / zl.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   * Copies the result into the target Vector2, where x is width and y is height.
   */
  getViewSize(e, t) {
    return this.getViewBounds(e, pT, mT), t.subVectors(mT, pT);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(e, t, n, r, o, c) {
    this.aspect = e / t, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = o, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = this.near;
    let t = e * Math.tan(cc * 0.5 * this.fov) / this.zoom, n = 2 * t, r = this.aspect * n, o = -0.5 * r;
    const c = this.view;
    if (this.view !== null && this.view.enabled) {
      const p = c.fullWidth, h = c.fullHeight;
      o += c.offsetX * r / p, t -= c.offsetY * n / h, r *= c.width / p, n *= c.height / h;
    }
    const f = this.filmOffset;
    f !== 0 && (o += e * f / this.getFilmWidth()), this.projectionMatrix.makePerspective(o, o + r, t, t - n, e, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.fov = this.fov, t.object.zoom = this.zoom, t.object.near = this.near, t.object.far = this.far, t.object.focus = this.focus, t.object.aspect = this.aspect, this.view !== null && (t.object.view = Object.assign({}, this.view)), t.object.filmGauge = this.filmGauge, t.object.filmOffset = this.filmOffset, t;
  }
}
const Xf = -90, qf = 1;
class fA extends xn {
  constructor(e, t, n) {
    super(), this.type = "CubeCamera", this.renderTarget = n, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const r = new Vi(Xf, qf, e, t);
    r.layers = this.layers, this.add(r);
    const o = new Vi(Xf, qf, e, t);
    o.layers = this.layers, this.add(o);
    const c = new Vi(Xf, qf, e, t);
    c.layers = this.layers, this.add(c);
    const f = new Vi(Xf, qf, e, t);
    f.layers = this.layers, this.add(f);
    const p = new Vi(Xf, qf, e, t);
    p.layers = this.layers, this.add(p);
    const h = new Vi(Xf, qf, e, t);
    h.layers = this.layers, this.add(h);
  }
  updateCoordinateSystem() {
    const e = this.coordinateSystem, t = this.children.concat(), [n, r, o, c, f, p] = t;
    for (const h of t)
      this.remove(h);
    if (e === Ws)
      n.up.set(0, 1, 0), n.lookAt(1, 0, 0), r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), o.up.set(0, 0, -1), o.lookAt(0, 1, 0), c.up.set(0, 0, 1), c.lookAt(0, -1, 0), f.up.set(0, 1, 0), f.lookAt(0, 0, 1), p.up.set(0, 1, 0), p.lookAt(0, 0, -1);
    else if (e === Ep)
      n.up.set(0, -1, 0), n.lookAt(-1, 0, 0), r.up.set(0, -1, 0), r.lookAt(1, 0, 0), o.up.set(0, 0, 1), o.lookAt(0, 1, 0), c.up.set(0, 0, -1), c.lookAt(0, -1, 0), f.up.set(0, -1, 0), f.lookAt(0, 0, 1), p.up.set(0, -1, 0), p.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const h of t)
      this.add(h), h.updateMatrixWorld();
  }
  update(e, t) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: n, activeMipmapLevel: r } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [o, c, f, p, h, g] = this.children, _ = e.getRenderTarget(), x = e.getActiveCubeFace(), M = e.getActiveMipmapLevel(), T = e.xr.enabled;
    e.xr.enabled = !1;
    const R = n.texture.generateMipmaps;
    n.texture.generateMipmaps = !1, e.setRenderTarget(n, 0, r), e.render(t, o), e.setRenderTarget(n, 1, r), e.render(t, c), e.setRenderTarget(n, 2, r), e.render(t, f), e.setRenderTarget(n, 3, r), e.render(t, p), e.setRenderTarget(n, 4, r), e.render(t, h), n.texture.generateMipmaps = R, e.setRenderTarget(n, 5, r), e.render(t, g), e.setRenderTarget(_, x, M), e.xr.enabled = T, n.texture.needsPMREMUpdate = !0;
  }
}
class Op extends ai {
  constructor(e, t, n, r, o, c, f, p, h, g) {
    e = e !== void 0 ? e : [], t = t !== void 0 ? t : Fo, super(e, t, n, r, o, c, f, p, h, g), this.isCubeTexture = !0, this.flipY = !1;
  }
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class dA extends vs {
  constructor(e = 1, t = {}) {
    super(e, e, t), this.isWebGLCubeRenderTarget = !0;
    const n = { width: e, height: e, depth: 1 }, r = [n, n, n, n, n, n];
    this.texture = new Op(r, t.mapping, t.wrapS, t.wrapT, t.magFilter, t.minFilter, t.format, t.type, t.anisotropy, t.colorSpace), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = t.generateMipmaps !== void 0 ? t.generateMipmaps : !1, this.texture.minFilter = t.minFilter !== void 0 ? t.minFilter : Ei;
  }
  fromEquirectangularTexture(e, t) {
    this.texture.type = t.type, this.texture.colorSpace = t.colorSpace, this.texture.generateMipmaps = t.generateMipmaps, this.texture.minFilter = t.minFilter, this.texture.magFilter = t.magFilter;
    const n = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, r = new vc(5, 5, 5), o = new gs({
      name: "CubemapFromEquirect",
      uniforms: pd(n.uniforms),
      vertexShader: n.vertexShader,
      fragmentShader: n.fragmentShader,
      side: Dr,
      blending: Io
    });
    o.uniforms.tEquirect.value = t;
    const c = new Ti(r, o), f = t.minFilter;
    return t.minFilter === Gs && (t.minFilter = Ei), new fA(1, 10, this).update(e, c), t.minFilter = f, c.geometry.dispose(), c.material.dispose(), this;
  }
  clear(e, t, n, r) {
    const o = e.getRenderTarget();
    for (let c = 0; c < 6; c++)
      e.setRenderTarget(this, c), e.clear(t, n, r);
    e.setRenderTarget(o);
  }
}
const V_ = /* @__PURE__ */ new q(), HD = /* @__PURE__ */ new q(), VD = /* @__PURE__ */ new Yt();
class Gl {
  constructor(e = new q(1, 0, 0), t = 0) {
    this.isPlane = !0, this.normal = e, this.constant = t;
  }
  set(e, t) {
    return this.normal.copy(e), this.constant = t, this;
  }
  setComponents(e, t, n, r) {
    return this.normal.set(e, t, n), this.constant = r, this;
  }
  setFromNormalAndCoplanarPoint(e, t) {
    return this.normal.copy(e), this.constant = -t.dot(this.normal), this;
  }
  setFromCoplanarPoints(e, t, n) {
    const r = V_.subVectors(n, t).cross(HD.subVectors(e, t)).normalize();
    return this.setFromNormalAndCoplanarPoint(r, e), this;
  }
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  projectPoint(e, t) {
    return t.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  intersectLine(e, t) {
    const n = e.delta(V_), r = this.normal.dot(n);
    if (r === 0)
      return this.distanceToPoint(e.start) === 0 ? t.copy(e.start) : null;
    const o = -(e.start.dot(this.normal) + this.constant) / r;
    return o < 0 || o > 1 ? null : t.copy(e.start).addScaledVector(n, o);
  }
  intersectsLine(e) {
    const t = this.distanceToPoint(e.start), n = this.distanceToPoint(e.end);
    return t < 0 && n > 0 || n < 0 && t > 0;
  }
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(e, t) {
    const n = t || VD.getNormalMatrix(e), r = this.coplanarPoint(V_).applyMatrix4(e), o = this.normal.applyMatrix3(n).normalize();
    return this.constant = -r.dot(o), this;
  }
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Xu = /* @__PURE__ */ new yr(), qv = /* @__PURE__ */ new q();
class Fp {
  constructor(e = new Gl(), t = new Gl(), n = new Gl(), r = new Gl(), o = new Gl(), c = new Gl()) {
    this.planes = [e, t, n, r, o, c];
  }
  set(e, t, n, r, o, c) {
    const f = this.planes;
    return f[0].copy(e), f[1].copy(t), f[2].copy(n), f[3].copy(r), f[4].copy(o), f[5].copy(c), this;
  }
  copy(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      t[n].copy(e.planes[n]);
    return this;
  }
  setFromProjectionMatrix(e, t = Ws) {
    const n = this.planes, r = e.elements, o = r[0], c = r[1], f = r[2], p = r[3], h = r[4], g = r[5], _ = r[6], x = r[7], M = r[8], T = r[9], R = r[10], b = r[11], E = r[12], L = r[13], C = r[14], U = r[15];
    if (n[0].setComponents(p - o, x - h, b - M, U - E).normalize(), n[1].setComponents(p + o, x + h, b + M, U + E).normalize(), n[2].setComponents(p + c, x + g, b + T, U + L).normalize(), n[3].setComponents(p - c, x - g, b - T, U - L).normalize(), n[4].setComponents(p - f, x - _, b - R, U - C).normalize(), t === Ws)
      n[5].setComponents(p + f, x + _, b + R, U + C).normalize();
    else if (t === Ep)
      n[5].setComponents(f, _, R, C).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + t);
    return this;
  }
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), Xu.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const t = e.geometry;
      t.boundingSphere === null && t.computeBoundingSphere(), Xu.copy(t.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(Xu);
  }
  intersectsSprite(e) {
    return Xu.center.set(0, 0, 0), Xu.radius = 0.7071067811865476, Xu.applyMatrix4(e.matrixWorld), this.intersectsSphere(Xu);
  }
  intersectsSphere(e) {
    const t = this.planes, n = e.center, r = -e.radius;
    for (let o = 0; o < 6; o++)
      if (t[o].distanceToPoint(n) < r)
        return !1;
    return !0;
  }
  intersectsBox(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++) {
      const r = t[n];
      if (qv.x = r.normal.x > 0 ? e.max.x : e.min.x, qv.y = r.normal.y > 0 ? e.max.y : e.min.y, qv.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(qv) < 0)
        return !1;
    }
    return !0;
  }
  containsPoint(e) {
    const t = this.planes;
    for (let n = 0; n < 6; n++)
      if (t[n].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
function hA() {
  let s = null, e = !1, t = null, n = null;
  function r(o, c) {
    t(o, c), n = s.requestAnimationFrame(r);
  }
  return {
    start: function() {
      e !== !0 && t !== null && (n = s.requestAnimationFrame(r), e = !0);
    },
    stop: function() {
      s.cancelAnimationFrame(n), e = !1;
    },
    setAnimationLoop: function(o) {
      t = o;
    },
    setContext: function(o) {
      s = o;
    }
  };
}
function kD(s) {
  const e = /* @__PURE__ */ new WeakMap();
  function t(f, p) {
    const h = f.array, g = f.usage, _ = h.byteLength, x = s.createBuffer();
    s.bindBuffer(p, x), s.bufferData(p, h, g), f.onUploadCallback();
    let M;
    if (h instanceof Float32Array)
      M = s.FLOAT;
    else if (h instanceof Uint16Array)
      f.isFloat16BufferAttribute ? M = s.HALF_FLOAT : M = s.UNSIGNED_SHORT;
    else if (h instanceof Int16Array)
      M = s.SHORT;
    else if (h instanceof Uint32Array)
      M = s.UNSIGNED_INT;
    else if (h instanceof Int32Array)
      M = s.INT;
    else if (h instanceof Int8Array)
      M = s.BYTE;
    else if (h instanceof Uint8Array)
      M = s.UNSIGNED_BYTE;
    else if (h instanceof Uint8ClampedArray)
      M = s.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + h);
    return {
      buffer: x,
      type: M,
      bytesPerElement: h.BYTES_PER_ELEMENT,
      version: f.version,
      size: _
    };
  }
  function n(f, p, h) {
    const g = p.array, _ = p._updateRange, x = p.updateRanges;
    if (s.bindBuffer(h, f), _.count === -1 && x.length === 0 && s.bufferSubData(h, 0, g), x.length !== 0) {
      for (let M = 0, T = x.length; M < T; M++) {
        const R = x[M];
        s.bufferSubData(
          h,
          R.start * g.BYTES_PER_ELEMENT,
          g,
          R.start,
          R.count
        );
      }
      p.clearUpdateRanges();
    }
    _.count !== -1 && (s.bufferSubData(
      h,
      _.offset * g.BYTES_PER_ELEMENT,
      g,
      _.offset,
      _.count
    ), _.count = -1), p.onUploadCallback();
  }
  function r(f) {
    return f.isInterleavedBufferAttribute && (f = f.data), e.get(f);
  }
  function o(f) {
    f.isInterleavedBufferAttribute && (f = f.data);
    const p = e.get(f);
    p && (s.deleteBuffer(p.buffer), e.delete(f));
  }
  function c(f, p) {
    if (f.isGLBufferAttribute) {
      const g = e.get(f);
      (!g || g.version < f.version) && e.set(f, {
        buffer: f.buffer,
        type: f.type,
        bytesPerElement: f.elementSize,
        version: f.version
      });
      return;
    }
    f.isInterleavedBufferAttribute && (f = f.data);
    const h = e.get(f);
    if (h === void 0)
      e.set(f, t(f, p));
    else if (h.version < f.version) {
      if (h.size !== f.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      n(h.buffer, f, p), h.version = f.version;
    }
  }
  return {
    get: r,
    remove: o,
    update: c
  };
}
class xd extends $t {
  constructor(e = 1, t = 1, n = 1, r = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: t,
      widthSegments: n,
      heightSegments: r
    };
    const o = e / 2, c = t / 2, f = Math.floor(n), p = Math.floor(r), h = f + 1, g = p + 1, _ = e / f, x = t / p, M = [], T = [], R = [], b = [];
    for (let E = 0; E < g; E++) {
      const L = E * x - c;
      for (let C = 0; C < h; C++) {
        const U = C * _ - o;
        T.push(U, -L, 0), R.push(0, 0, 1), b.push(C / f), b.push(1 - E / p);
      }
    }
    for (let E = 0; E < p; E++)
      for (let L = 0; L < f; L++) {
        const C = L + h * E, U = L + h * (E + 1), Y = L + 1 + h * (E + 1), B = L + 1 + h * E;
        M.push(C, U, B), M.push(U, Y, B);
      }
    this.setIndex(M), this.setAttribute("position", new Mt(T, 3)), this.setAttribute("normal", new Mt(R, 3)), this.setAttribute("uv", new Mt(b, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new xd(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
var GD = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, WD = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, XD = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, qD = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, YD = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, jD = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, ZD = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, JD = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, QD = `#ifdef USE_BATCHING
	attribute float batchId;
	uniform highp sampler2D batchingTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, KD = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( batchId );
#endif`, $D = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, eN = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, tN = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, nN = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, iN = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, rN = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, aN = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, sN = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, oN = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, lN = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, uN = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, cN = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	varying vec3 vColor;
#endif`, fN = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif`, dN = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
float luminance( const in vec3 rgb ) {
	const vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );
	return dot( weights, rgb );
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, hN = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, pN = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, mN = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, vN = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, gN = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, yN = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, _N = "gl_FragColor = linearToOutputTexel( gl_FragColor );", xN = `
const mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(
	vec3( 0.8224621, 0.177538, 0.0 ),
	vec3( 0.0331941, 0.9668058, 0.0 ),
	vec3( 0.0170827, 0.0723974, 0.9105199 )
);
const mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(
	vec3( 1.2249401, - 0.2249404, 0.0 ),
	vec3( - 0.0420569, 1.0420571, 0.0 ),
	vec3( - 0.0196376, - 0.0786361, 1.0982735 )
);
vec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {
	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );
}
vec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {
	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );
}
vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}
vec4 LinearToLinear( in vec4 value ) {
	return value;
}
vec4 LinearTosRGB( in vec4 value ) {
	return sRGBTransferOETF( value );
}`, SN = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, MN = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, EN = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, TN = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, bN = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, wN = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, AN = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, RN = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, CN = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, LN = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, PN = `#ifdef USE_LIGHTMAP
	vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
	vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
	reflectedLight.indirectDiffuse += lightMapIrradiance;
#endif`, DN = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, NN = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, UN = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, IN = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	#if defined ( LEGACY_LIGHTS )
		if ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {
			return pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );
		}
		return 1.0;
	#else
		float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
		if ( cutoffDistance > 0.0 ) {
			distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
		}
		return distanceFalloff;
	#endif
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, ON = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, FN = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, zN = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, BN = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, HN = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, VN = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, kN = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, GN = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, WN = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, XN = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, qN = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, YN = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, jN = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, ZN = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, JN = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );
	
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, QN = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, KN = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, $N = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, eU = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, tU = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, nU = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[MORPHTARGETS_COUNT];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, iU = `#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, rU = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		objectNormal += morphNormal0 * morphTargetInfluences[ 0 ];
		objectNormal += morphNormal1 * morphTargetInfluences[ 1 ];
		objectNormal += morphNormal2 * morphTargetInfluences[ 2 ];
		objectNormal += morphNormal3 * morphTargetInfluences[ 3 ];
	#endif
#endif`, aU = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
	#endif
	#ifdef MORPHTARGETS_TEXTURE
		#ifndef USE_INSTANCING_MORPH
			uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
		#endif
		uniform sampler2DArray morphTargetsTexture;
		uniform ivec2 morphTargetsTextureSize;
		vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
			int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
			int y = texelIndex / morphTargetsTextureSize.x;
			int x = texelIndex - y * morphTargetsTextureSize.x;
			ivec3 morphUV = ivec3( x, y, morphTargetIndex );
			return texelFetch( morphTargetsTexture, morphUV, 0 );
		}
	#else
		#ifndef USE_MORPHNORMALS
			uniform float morphTargetInfluences[ 8 ];
		#else
			uniform float morphTargetInfluences[ 4 ];
		#endif
	#endif
#endif`, sU = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	#ifdef MORPHTARGETS_TEXTURE
		for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
			if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
		}
	#else
		transformed += morphTarget0 * morphTargetInfluences[ 0 ];
		transformed += morphTarget1 * morphTargetInfluences[ 1 ];
		transformed += morphTarget2 * morphTargetInfluences[ 2 ];
		transformed += morphTarget3 * morphTargetInfluences[ 3 ];
		#ifndef USE_MORPHNORMALS
			transformed += morphTarget4 * morphTargetInfluences[ 4 ];
			transformed += morphTarget5 * morphTargetInfluences[ 5 ];
			transformed += morphTarget6 * morphTargetInfluences[ 6 ];
			transformed += morphTarget7 * morphTargetInfluences[ 7 ];
		#endif
	#endif
#endif`, oU = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, lU = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, uU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, cU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, fU = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, dU = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, hU = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, pU = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, mU = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, vU = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, gU = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, yU = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;
const vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );
const vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );
const float ShiftRight8 = 1. / 256.;
vec4 packDepthToRGBA( const in float v ) {
	vec4 r = vec4( fract( v * PackFactors ), v );
	r.yzw -= r.xyz * ShiftRight8;	return r * PackUpscale;
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors );
}
vec2 packDepthToRG( in highp float v ) {
	return packDepthToRGBA( v ).yx;
}
float unpackRGToDepth( const in highp vec2 v ) {
	return unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );
}
vec4 pack2HalfToRGBA( vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, _U = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, xU = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, SU = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, MU = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, EU = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, TU = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, bU = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		float hard_shadow = step( compare , distribution.x );
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return shadow;
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return shadow;
	}
#endif`, wU = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, AU = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, RU = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, CU = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, LU = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, PU = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, DU = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, NU = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, UU = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, IU = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, OU = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 OptimizedCineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	float startCompression = 0.8 - 0.04;
	float desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min(color.r, min(color.g, color.b));
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max(color.r, max(color.g, color.b));
	if (peak < startCompression) return color;
	float d = 1. - startCompression;
	float newPeak = 1. - d * d / (peak + d - startCompression);
	color *= newPeak / peak;
	float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
	return mix(color, newPeak * vec3(1, 1, 1), g);
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, FU = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, zU = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
		vec3 refractedRayExit = position + transmissionRay;
		vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
		vec2 refractionCoords = ndcPos.xy / ndcPos.w;
		refractionCoords += 1.0;
		refractionCoords /= 2.0;
		vec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
		vec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, BU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, HU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, VU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, kU = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const GU = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, WU = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, XU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, qU = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, YU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, jU = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, ZU = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, JU = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#endif
}`, QU = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, KU = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, $U = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, e3 = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, t3 = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, n3 = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, i3 = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, r3 = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, a3 = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, s3 = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, o3 = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, l3 = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, u3 = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, c3 = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, f3 = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, d3 = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, h3 = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, p3 = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, m3 = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, v3 = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, g3 = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, y3 = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, _3 = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, x3 = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, S3 = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );
	vec2 scale;
	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );
	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, M3 = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, Kt = {
  alphahash_fragment: GD,
  alphahash_pars_fragment: WD,
  alphamap_fragment: XD,
  alphamap_pars_fragment: qD,
  alphatest_fragment: YD,
  alphatest_pars_fragment: jD,
  aomap_fragment: ZD,
  aomap_pars_fragment: JD,
  batching_pars_vertex: QD,
  batching_vertex: KD,
  begin_vertex: $D,
  beginnormal_vertex: eN,
  bsdfs: tN,
  iridescence_fragment: nN,
  bumpmap_pars_fragment: iN,
  clipping_planes_fragment: rN,
  clipping_planes_pars_fragment: aN,
  clipping_planes_pars_vertex: sN,
  clipping_planes_vertex: oN,
  color_fragment: lN,
  color_pars_fragment: uN,
  color_pars_vertex: cN,
  color_vertex: fN,
  common: dN,
  cube_uv_reflection_fragment: hN,
  defaultnormal_vertex: pN,
  displacementmap_pars_vertex: mN,
  displacementmap_vertex: vN,
  emissivemap_fragment: gN,
  emissivemap_pars_fragment: yN,
  colorspace_fragment: _N,
  colorspace_pars_fragment: xN,
  envmap_fragment: SN,
  envmap_common_pars_fragment: MN,
  envmap_pars_fragment: EN,
  envmap_pars_vertex: TN,
  envmap_physical_pars_fragment: ON,
  envmap_vertex: bN,
  fog_vertex: wN,
  fog_pars_vertex: AN,
  fog_fragment: RN,
  fog_pars_fragment: CN,
  gradientmap_pars_fragment: LN,
  lightmap_fragment: PN,
  lightmap_pars_fragment: DN,
  lights_lambert_fragment: NN,
  lights_lambert_pars_fragment: UN,
  lights_pars_begin: IN,
  lights_toon_fragment: FN,
  lights_toon_pars_fragment: zN,
  lights_phong_fragment: BN,
  lights_phong_pars_fragment: HN,
  lights_physical_fragment: VN,
  lights_physical_pars_fragment: kN,
  lights_fragment_begin: GN,
  lights_fragment_maps: WN,
  lights_fragment_end: XN,
  logdepthbuf_fragment: qN,
  logdepthbuf_pars_fragment: YN,
  logdepthbuf_pars_vertex: jN,
  logdepthbuf_vertex: ZN,
  map_fragment: JN,
  map_pars_fragment: QN,
  map_particle_fragment: KN,
  map_particle_pars_fragment: $N,
  metalnessmap_fragment: eU,
  metalnessmap_pars_fragment: tU,
  morphinstance_vertex: nU,
  morphcolor_vertex: iU,
  morphnormal_vertex: rU,
  morphtarget_pars_vertex: aU,
  morphtarget_vertex: sU,
  normal_fragment_begin: oU,
  normal_fragment_maps: lU,
  normal_pars_fragment: uU,
  normal_pars_vertex: cU,
  normal_vertex: fU,
  normalmap_pars_fragment: dU,
  clearcoat_normal_fragment_begin: hU,
  clearcoat_normal_fragment_maps: pU,
  clearcoat_pars_fragment: mU,
  iridescence_pars_fragment: vU,
  opaque_fragment: gU,
  packing: yU,
  premultiplied_alpha_fragment: _U,
  project_vertex: xU,
  dithering_fragment: SU,
  dithering_pars_fragment: MU,
  roughnessmap_fragment: EU,
  roughnessmap_pars_fragment: TU,
  shadowmap_pars_fragment: bU,
  shadowmap_pars_vertex: wU,
  shadowmap_vertex: AU,
  shadowmask_pars_fragment: RU,
  skinbase_vertex: CU,
  skinning_pars_vertex: LU,
  skinning_vertex: PU,
  skinnormal_vertex: DU,
  specularmap_fragment: NU,
  specularmap_pars_fragment: UU,
  tonemapping_fragment: IU,
  tonemapping_pars_fragment: OU,
  transmission_fragment: FU,
  transmission_pars_fragment: zU,
  uv_pars_fragment: BU,
  uv_pars_vertex: HU,
  uv_vertex: VU,
  worldpos_vertex: kU,
  background_vert: GU,
  background_frag: WU,
  backgroundCube_vert: XU,
  backgroundCube_frag: qU,
  cube_vert: YU,
  cube_frag: jU,
  depth_vert: ZU,
  depth_frag: JU,
  distanceRGBA_vert: QU,
  distanceRGBA_frag: KU,
  equirect_vert: $U,
  equirect_frag: e3,
  linedashed_vert: t3,
  linedashed_frag: n3,
  meshbasic_vert: i3,
  meshbasic_frag: r3,
  meshlambert_vert: a3,
  meshlambert_frag: s3,
  meshmatcap_vert: o3,
  meshmatcap_frag: l3,
  meshnormal_vert: u3,
  meshnormal_frag: c3,
  meshphong_vert: f3,
  meshphong_frag: d3,
  meshphysical_vert: h3,
  meshphysical_frag: p3,
  meshtoon_vert: m3,
  meshtoon_frag: v3,
  points_vert: g3,
  points_frag: y3,
  shadow_vert: _3,
  shadow_frag: x3,
  sprite_vert: S3,
  sprite_frag: M3
}, at = {
  common: {
    diffuse: { value: /* @__PURE__ */ new mt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Yt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Yt() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new Yt() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new Yt() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new Yt() },
    normalScale: { value: /* @__PURE__ */ new De(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new Yt() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new Yt() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new mt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new mt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Yt() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new Yt() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new mt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new De(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Yt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Yt() },
    alphaTest: { value: 0 }
  }
}, ms = {
  basic: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.specularmap,
      at.envmap,
      at.aomap,
      at.lightmap,
      at.fog
    ]),
    vertexShader: Kt.meshbasic_vert,
    fragmentShader: Kt.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.specularmap,
      at.envmap,
      at.aomap,
      at.lightmap,
      at.emissivemap,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      at.fog,
      at.lights,
      {
        emissive: { value: /* @__PURE__ */ new mt(0) }
      }
    ]),
    vertexShader: Kt.meshlambert_vert,
    fragmentShader: Kt.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.specularmap,
      at.envmap,
      at.aomap,
      at.lightmap,
      at.emissivemap,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      at.fog,
      at.lights,
      {
        emissive: { value: /* @__PURE__ */ new mt(0) },
        specular: { value: /* @__PURE__ */ new mt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: Kt.meshphong_vert,
    fragmentShader: Kt.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.envmap,
      at.aomap,
      at.lightmap,
      at.emissivemap,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      at.roughnessmap,
      at.metalnessmap,
      at.fog,
      at.lights,
      {
        emissive: { value: /* @__PURE__ */ new mt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: Kt.meshphysical_vert,
    fragmentShader: Kt.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.aomap,
      at.lightmap,
      at.emissivemap,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      at.gradientmap,
      at.fog,
      at.lights,
      {
        emissive: { value: /* @__PURE__ */ new mt(0) }
      }
    ]),
    vertexShader: Kt.meshtoon_vert,
    fragmentShader: Kt.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      at.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: Kt.meshmatcap_vert,
    fragmentShader: Kt.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Lr([
      at.points,
      at.fog
    ]),
    vertexShader: Kt.points_vert,
    fragmentShader: Kt.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: Kt.linedashed_vert,
    fragmentShader: Kt.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.displacementmap
    ]),
    vertexShader: Kt.depth_vert,
    fragmentShader: Kt.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.bumpmap,
      at.normalmap,
      at.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Kt.meshnormal_vert,
    fragmentShader: Kt.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Lr([
      at.sprite,
      at.fog
    ]),
    vertexShader: Kt.sprite_vert,
    fragmentShader: Kt.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new Yt() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: Kt.background_vert,
    fragmentShader: Kt.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new Yt() }
    },
    vertexShader: Kt.backgroundCube_vert,
    fragmentShader: Kt.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: Kt.cube_vert,
    fragmentShader: Kt.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: Kt.equirect_vert,
    fragmentShader: Kt.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Lr([
      at.common,
      at.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new q() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: Kt.distanceRGBA_vert,
    fragmentShader: Kt.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Lr([
      at.lights,
      at.fog,
      {
        color: { value: /* @__PURE__ */ new mt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: Kt.shadow_vert,
    fragmentShader: Kt.shadow_frag
  }
};
ms.physical = {
  uniforms: /* @__PURE__ */ Lr([
    ms.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new Yt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Yt() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new De(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Yt() },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new Yt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Yt() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new mt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new Yt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Yt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new Yt() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new De() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new Yt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new mt(0) },
      specularColor: { value: /* @__PURE__ */ new mt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new Yt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new Yt() },
      anisotropyVector: { value: /* @__PURE__ */ new De() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new Yt() }
    }
  ]),
  vertexShader: Kt.meshphysical_vert,
  fragmentShader: Kt.meshphysical_frag
};
const Yv = { r: 0, b: 0, g: 0 }, qu = /* @__PURE__ */ new _a(), E3 = /* @__PURE__ */ new Ht();
function T3(s, e, t, n, r, o, c) {
  const f = new mt(0);
  let p = o === !0 ? 0 : 1, h, g, _ = null, x = 0, M = null;
  function T(b, E) {
    let L = !1, C = E.isScene === !0 ? E.background : null;
    C && C.isTexture && (C = (E.backgroundBlurriness > 0 ? t : e).get(C)), C === null ? R(f, p) : C && C.isColor && (R(C, 1), L = !0);
    const U = s.xr.getEnvironmentBlendMode();
    U === "additive" ? n.buffers.color.setClear(0, 0, 0, 1, c) : U === "alpha-blend" && n.buffers.color.setClear(0, 0, 0, 0, c), (s.autoClear || L) && s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil), C && (C.isCubeTexture || C.mapping === gd) ? (g === void 0 && (g = new Ti(
      new vc(1, 1, 1),
      new gs({
        name: "BackgroundCubeMaterial",
        uniforms: pd(ms.backgroundCube.uniforms),
        vertexShader: ms.backgroundCube.vertexShader,
        fragmentShader: ms.backgroundCube.fragmentShader,
        side: Dr,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), g.geometry.deleteAttribute("normal"), g.geometry.deleteAttribute("uv"), g.onBeforeRender = function(Y, B, H) {
      this.matrixWorld.copyPosition(H.matrixWorld);
    }, Object.defineProperty(g.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), r.update(g)), qu.copy(E.backgroundRotation), qu.x *= -1, qu.y *= -1, qu.z *= -1, C.isCubeTexture && C.isRenderTargetTexture === !1 && (qu.y *= -1, qu.z *= -1), g.material.uniforms.envMap.value = C, g.material.uniforms.flipEnvMap.value = C.isCubeTexture && C.isRenderTargetTexture === !1 ? -1 : 1, g.material.uniforms.backgroundBlurriness.value = E.backgroundBlurriness, g.material.uniforms.backgroundIntensity.value = E.backgroundIntensity, g.material.uniforms.backgroundRotation.value.setFromMatrix4(E3.makeRotationFromEuler(qu)), g.material.toneMapped = Ln.getTransfer(C.colorSpace) !== Vn, (_ !== C || x !== C.version || M !== s.toneMapping) && (g.material.needsUpdate = !0, _ = C, x = C.version, M = s.toneMapping), g.layers.enableAll(), b.unshift(g, g.geometry, g.material, 0, 0, null)) : C && C.isTexture && (h === void 0 && (h = new Ti(
      new xd(2, 2),
      new gs({
        name: "BackgroundMaterial",
        uniforms: pd(ms.background.uniforms),
        vertexShader: ms.background.vertexShader,
        fragmentShader: ms.background.fragmentShader,
        side: Oo,
        depthTest: !1,
        depthWrite: !1,
        fog: !1
      })
    ), h.geometry.deleteAttribute("normal"), Object.defineProperty(h.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), r.update(h)), h.material.uniforms.t2D.value = C, h.material.uniforms.backgroundIntensity.value = E.backgroundIntensity, h.material.toneMapped = Ln.getTransfer(C.colorSpace) !== Vn, C.matrixAutoUpdate === !0 && C.updateMatrix(), h.material.uniforms.uvTransform.value.copy(C.matrix), (_ !== C || x !== C.version || M !== s.toneMapping) && (h.material.needsUpdate = !0, _ = C, x = C.version, M = s.toneMapping), h.layers.enableAll(), b.unshift(h, h.geometry, h.material, 0, 0, null));
  }
  function R(b, E) {
    b.getRGB(Yv, uA(s)), n.buffers.color.setClear(Yv.r, Yv.g, Yv.b, E, c);
  }
  return {
    getClearColor: function() {
      return f;
    },
    setClearColor: function(b, E = 1) {
      f.set(b), p = E, R(f, p);
    },
    getClearAlpha: function() {
      return p;
    },
    setClearAlpha: function(b) {
      p = b, R(f, p);
    },
    render: T
  };
}
function b3(s, e) {
  const t = s.getParameter(s.MAX_VERTEX_ATTRIBS), n = {}, r = x(null);
  let o = r, c = !1;
  function f(N, X, K, J, ae) {
    let _e = !1;
    const Me = _(J, K, X);
    o !== Me && (o = Me, h(o.object)), _e = M(N, J, K, ae), _e && T(N, J, K, ae), ae !== null && e.update(ae, s.ELEMENT_ARRAY_BUFFER), (_e || c) && (c = !1, U(N, X, K, J), ae !== null && s.bindBuffer(s.ELEMENT_ARRAY_BUFFER, e.get(ae).buffer));
  }
  function p() {
    return s.createVertexArray();
  }
  function h(N) {
    return s.bindVertexArray(N);
  }
  function g(N) {
    return s.deleteVertexArray(N);
  }
  function _(N, X, K) {
    const J = K.wireframe === !0;
    let ae = n[N.id];
    ae === void 0 && (ae = {}, n[N.id] = ae);
    let _e = ae[X.id];
    _e === void 0 && (_e = {}, ae[X.id] = _e);
    let Me = _e[J];
    return Me === void 0 && (Me = x(p()), _e[J] = Me), Me;
  }
  function x(N) {
    const X = [], K = [], J = [];
    for (let ae = 0; ae < t; ae++)
      X[ae] = 0, K[ae] = 0, J[ae] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: X,
      enabledAttributes: K,
      attributeDivisors: J,
      object: N,
      attributes: {},
      index: null
    };
  }
  function M(N, X, K, J) {
    const ae = o.attributes, _e = X.attributes;
    let Me = 0;
    const Fe = K.getAttributes();
    for (const Q in Fe)
      if (Fe[Q].location >= 0) {
        const ne = ae[Q];
        let be = _e[Q];
        if (be === void 0 && (Q === "instanceMatrix" && N.instanceMatrix && (be = N.instanceMatrix), Q === "instanceColor" && N.instanceColor && (be = N.instanceColor)), ne === void 0 || ne.attribute !== be || be && ne.data !== be.data)
          return !0;
        Me++;
      }
    return o.attributesNum !== Me || o.index !== J;
  }
  function T(N, X, K, J) {
    const ae = {}, _e = X.attributes;
    let Me = 0;
    const Fe = K.getAttributes();
    for (const Q in Fe)
      if (Fe[Q].location >= 0) {
        let ne = _e[Q];
        ne === void 0 && (Q === "instanceMatrix" && N.instanceMatrix && (ne = N.instanceMatrix), Q === "instanceColor" && N.instanceColor && (ne = N.instanceColor));
        const be = {};
        be.attribute = ne, ne && ne.data && (be.data = ne.data), ae[Q] = be, Me++;
      }
    o.attributes = ae, o.attributesNum = Me, o.index = J;
  }
  function R() {
    const N = o.newAttributes;
    for (let X = 0, K = N.length; X < K; X++)
      N[X] = 0;
  }
  function b(N) {
    E(N, 0);
  }
  function E(N, X) {
    const K = o.newAttributes, J = o.enabledAttributes, ae = o.attributeDivisors;
    K[N] = 1, J[N] === 0 && (s.enableVertexAttribArray(N), J[N] = 1), ae[N] !== X && (s.vertexAttribDivisor(N, X), ae[N] = X);
  }
  function L() {
    const N = o.newAttributes, X = o.enabledAttributes;
    for (let K = 0, J = X.length; K < J; K++)
      X[K] !== N[K] && (s.disableVertexAttribArray(K), X[K] = 0);
  }
  function C(N, X, K, J, ae, _e, Me) {
    Me === !0 ? s.vertexAttribIPointer(N, X, K, ae, _e) : s.vertexAttribPointer(N, X, K, J, ae, _e);
  }
  function U(N, X, K, J) {
    R();
    const ae = J.attributes, _e = K.getAttributes(), Me = X.defaultAttributeValues;
    for (const Fe in _e) {
      const Q = _e[Fe];
      if (Q.location >= 0) {
        let ue = ae[Fe];
        if (ue === void 0 && (Fe === "instanceMatrix" && N.instanceMatrix && (ue = N.instanceMatrix), Fe === "instanceColor" && N.instanceColor && (ue = N.instanceColor)), ue !== void 0) {
          const ne = ue.normalized, be = ue.itemSize, Oe = e.get(ue);
          if (Oe === void 0)
            continue;
          const ht = Oe.buffer, ve = Oe.type, Ue = Oe.bytesPerElement, Ye = ve === s.INT || ve === s.UNSIGNED_INT || ue.gpuType === gS;
          if (ue.isInterleavedBufferAttribute) {
            const Ge = ue.data, gt = Ge.stride, Pt = ue.offset;
            if (Ge.isInstancedInterleavedBuffer) {
              for (let Dt = 0; Dt < Q.locationSize; Dt++)
                E(Q.location + Dt, Ge.meshPerAttribute);
              N.isInstancedMesh !== !0 && J._maxInstanceCount === void 0 && (J._maxInstanceCount = Ge.meshPerAttribute * Ge.count);
            } else
              for (let Dt = 0; Dt < Q.locationSize; Dt++)
                b(Q.location + Dt);
            s.bindBuffer(s.ARRAY_BUFFER, ht);
            for (let Dt = 0; Dt < Q.locationSize; Dt++)
              C(
                Q.location + Dt,
                be / Q.locationSize,
                ve,
                ne,
                gt * Ue,
                (Pt + be / Q.locationSize * Dt) * Ue,
                Ye
              );
          } else {
            if (ue.isInstancedBufferAttribute) {
              for (let Ge = 0; Ge < Q.locationSize; Ge++)
                E(Q.location + Ge, ue.meshPerAttribute);
              N.isInstancedMesh !== !0 && J._maxInstanceCount === void 0 && (J._maxInstanceCount = ue.meshPerAttribute * ue.count);
            } else
              for (let Ge = 0; Ge < Q.locationSize; Ge++)
                b(Q.location + Ge);
            s.bindBuffer(s.ARRAY_BUFFER, ht);
            for (let Ge = 0; Ge < Q.locationSize; Ge++)
              C(
                Q.location + Ge,
                be / Q.locationSize,
                ve,
                ne,
                be * Ue,
                be / Q.locationSize * Ge * Ue,
                Ye
              );
          }
        } else if (Me !== void 0) {
          const ne = Me[Fe];
          if (ne !== void 0)
            switch (ne.length) {
              case 2:
                s.vertexAttrib2fv(Q.location, ne);
                break;
              case 3:
                s.vertexAttrib3fv(Q.location, ne);
                break;
              case 4:
                s.vertexAttrib4fv(Q.location, ne);
                break;
              default:
                s.vertexAttrib1fv(Q.location, ne);
            }
        }
      }
    }
    L();
  }
  function Y() {
    k();
    for (const N in n) {
      const X = n[N];
      for (const K in X) {
        const J = X[K];
        for (const ae in J)
          g(J[ae].object), delete J[ae];
        delete X[K];
      }
      delete n[N];
    }
  }
  function B(N) {
    if (n[N.id] === void 0)
      return;
    const X = n[N.id];
    for (const K in X) {
      const J = X[K];
      for (const ae in J)
        g(J[ae].object), delete J[ae];
      delete X[K];
    }
    delete n[N.id];
  }
  function H(N) {
    for (const X in n) {
      const K = n[X];
      if (K[N.id] === void 0)
        continue;
      const J = K[N.id];
      for (const ae in J)
        g(J[ae].object), delete J[ae];
      delete K[N.id];
    }
  }
  function k() {
    F(), c = !0, o !== r && (o = r, h(o.object));
  }
  function F() {
    r.geometry = null, r.program = null, r.wireframe = !1;
  }
  return {
    setup: f,
    reset: k,
    resetDefaultState: F,
    dispose: Y,
    releaseStatesOfGeometry: B,
    releaseStatesOfProgram: H,
    initAttributes: R,
    enableAttribute: b,
    disableUnusedAttributes: L
  };
}
function w3(s, e, t) {
  let n;
  function r(p) {
    n = p;
  }
  function o(p, h) {
    s.drawArrays(n, p, h), t.update(h, n, 1);
  }
  function c(p, h, g) {
    g !== 0 && (s.drawArraysInstanced(n, p, h, g), t.update(h, n, g));
  }
  function f(p, h, g) {
    if (g === 0)
      return;
    const _ = e.get("WEBGL_multi_draw");
    if (_ === null)
      for (let x = 0; x < g; x++)
        this.render(p[x], h[x]);
    else {
      _.multiDrawArraysWEBGL(n, p, 0, h, 0, g);
      let x = 0;
      for (let M = 0; M < g; M++)
        x += h[M];
      t.update(x, n, 1);
    }
  }
  this.setMode = r, this.render = o, this.renderInstances = c, this.renderMultiDraw = f;
}
function A3(s, e, t) {
  let n;
  function r() {
    if (n !== void 0)
      return n;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const C = e.get("EXT_texture_filter_anisotropic");
      n = s.getParameter(C.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      n = 0;
    return n;
  }
  function o(C) {
    if (C === "highp") {
      if (s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.HIGH_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.HIGH_FLOAT).precision > 0)
        return "highp";
      C = "mediump";
    }
    return C === "mediump" && s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.MEDIUM_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let c = t.precision !== void 0 ? t.precision : "highp";
  const f = o(c);
  f !== c && (console.warn("THREE.WebGLRenderer:", c, "not supported, using", f, "instead."), c = f);
  const p = t.logarithmicDepthBuffer === !0, h = s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS), g = s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS), _ = s.getParameter(s.MAX_TEXTURE_SIZE), x = s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE), M = s.getParameter(s.MAX_VERTEX_ATTRIBS), T = s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS), R = s.getParameter(s.MAX_VARYING_VECTORS), b = s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS), E = g > 0, L = s.getParameter(s.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: r,
    getMaxPrecision: o,
    precision: c,
    logarithmicDepthBuffer: p,
    maxTextures: h,
    maxVertexTextures: g,
    maxTextureSize: _,
    maxCubemapSize: x,
    maxAttributes: M,
    maxVertexUniforms: T,
    maxVaryings: R,
    maxFragmentUniforms: b,
    vertexTextures: E,
    maxSamples: L
  };
}
function R3(s) {
  const e = this;
  let t = null, n = 0, r = !1, o = !1;
  const c = new Gl(), f = new Yt(), p = { value: null, needsUpdate: !1 };
  this.uniform = p, this.numPlanes = 0, this.numIntersection = 0, this.init = function(_, x) {
    const M = _.length !== 0 || x || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    n !== 0 || r;
    return r = x, n = _.length, M;
  }, this.beginShadows = function() {
    o = !0, g(null);
  }, this.endShadows = function() {
    o = !1;
  }, this.setGlobalState = function(_, x) {
    t = g(_, x, 0);
  }, this.setState = function(_, x, M) {
    const T = _.clippingPlanes, R = _.clipIntersection, b = _.clipShadows, E = s.get(_);
    if (!r || T === null || T.length === 0 || o && !b)
      o ? g(null) : h();
    else {
      const L = o ? 0 : n, C = L * 4;
      let U = E.clippingState || null;
      p.value = U, U = g(T, x, C, M);
      for (let Y = 0; Y !== C; ++Y)
        U[Y] = t[Y];
      E.clippingState = U, this.numIntersection = R ? this.numPlanes : 0, this.numPlanes += L;
    }
  };
  function h() {
    p.value !== t && (p.value = t, p.needsUpdate = n > 0), e.numPlanes = n, e.numIntersection = 0;
  }
  function g(_, x, M, T) {
    const R = _ !== null ? _.length : 0;
    let b = null;
    if (R !== 0) {
      if (b = p.value, T !== !0 || b === null) {
        const E = M + R * 4, L = x.matrixWorldInverse;
        f.getNormalMatrix(L), (b === null || b.length < E) && (b = new Float32Array(E));
        for (let C = 0, U = M; C !== R; ++C, U += 4)
          c.copy(_[C]).applyMatrix4(L, f), c.normal.toArray(b, U), b[U + 3] = c.constant;
      }
      p.value = b, p.needsUpdate = !0;
    }
    return e.numPlanes = R, e.numIntersection = 0, b;
  }
}
function C3(s) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(c, f) {
    return f === fp ? c.mapping = Fo : f === dp && (c.mapping = ql), c;
  }
  function n(c) {
    if (c && c.isTexture) {
      const f = c.mapping;
      if (f === fp || f === dp)
        if (e.has(c)) {
          const p = e.get(c).texture;
          return t(p, c.mapping);
        } else {
          const p = c.image;
          if (p && p.height > 0) {
            const h = new dA(p.height);
            return h.fromEquirectangularTexture(s, c), e.set(c, h), c.addEventListener("dispose", r), t(h.texture, c.mapping);
          } else
            return null;
        }
    }
    return c;
  }
  function r(c) {
    const f = c.target;
    f.removeEventListener("dispose", r);
    const p = e.get(f);
    p !== void 0 && (e.delete(f), p.dispose());
  }
  function o() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: o
  };
}
class zp extends Ip {
  constructor(e = -1, t = 1, n = 1, r = -1, o = 0.1, c = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = t, this.top = n, this.bottom = r, this.near = o, this.far = c, this.updateProjectionMatrix();
  }
  copy(e, t) {
    return super.copy(e, t), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  setViewOffset(e, t, n, r, o, c) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = t, this.view.offsetX = n, this.view.offsetY = r, this.view.width = o, this.view.height = c, this.updateProjectionMatrix();
  }
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), t = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2;
    let o = n - e, c = n + e, f = r + t, p = r - t;
    if (this.view !== null && this.view.enabled) {
      const h = (this.right - this.left) / this.view.fullWidth / this.zoom, g = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      o += h * this.view.offsetX, c = o + h * this.view.width, f -= g * this.view.offsetY, p = f - g * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(o, c, f, p, this.near, this.far, this.coordinateSystem), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.zoom = this.zoom, t.object.left = this.left, t.object.right = this.right, t.object.top = this.top, t.object.bottom = this.bottom, t.object.near = this.near, t.object.far = this.far, this.view !== null && (t.object.view = Object.assign({}, this.view)), t;
  }
}
const sd = 4, vT = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], ic = 20, k_ = /* @__PURE__ */ new zp(), gT = /* @__PURE__ */ new mt();
let G_ = null, W_ = 0, X_ = 0, q_ = !1;
const tc = (1 + Math.sqrt(5)) / 2, Yf = 1 / tc, yT = [
  /* @__PURE__ */ new q(1, 1, 1),
  /* @__PURE__ */ new q(-1, 1, 1),
  /* @__PURE__ */ new q(1, 1, -1),
  /* @__PURE__ */ new q(-1, 1, -1),
  /* @__PURE__ */ new q(0, tc, Yf),
  /* @__PURE__ */ new q(0, tc, -Yf),
  /* @__PURE__ */ new q(Yf, 0, tc),
  /* @__PURE__ */ new q(-Yf, 0, tc),
  /* @__PURE__ */ new q(tc, Yf, 0),
  /* @__PURE__ */ new q(-tc, Yf, 0)
];
class eS {
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(e, t = 0, n = 0.1, r = 100) {
    G_ = this._renderer.getRenderTarget(), W_ = this._renderer.getActiveCubeFace(), X_ = this._renderer.getActiveMipmapLevel(), q_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(256);
    const o = this._allocateTargets();
    return o.depthBuffer = !0, this._sceneToCubeUV(e, n, r, o), t > 0 && this._blur(o, 0, 0, t), this._applyPMREM(o), this._cleanup(o), o;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported equirectangular image size is 64 x 32.
   */
  fromEquirectangular(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported cube size is 16 x 16.
   */
  fromCubemap(e, t = null) {
    return this._fromTexture(e, t);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = ST(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = xT(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(G_, W_, X_), this._renderer.xr.enabled = q_, e.scissorTest = !1, jv(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, t) {
    e.mapping === Fo || e.mapping === ql ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), G_ = this._renderer.getRenderTarget(), W_ = this._renderer.getActiveCubeFace(), X_ = this._renderer.getActiveMipmapLevel(), q_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const n = t || this._allocateTargets();
    return this._textureToCubeUV(e, n), this._applyPMREM(n), this._cleanup(n), n;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), t = 4 * this._cubeSize, n = {
      magFilter: Ei,
      minFilter: Ei,
      generateMipmaps: !1,
      type: mp,
      format: Qr,
      colorSpace: Bo,
      depthBuffer: !1
    }, r = _T(e, t, n);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== t) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = _T(e, t, n);
      const { _lodMax: o } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = L3(o)), this._blurMaterial = P3(o, e, t);
    }
    return r;
  }
  _compileMaterial(e) {
    const t = new Ti(this._lodPlanes[0], e);
    this._renderer.compile(t, k_);
  }
  _sceneToCubeUV(e, t, n, r) {
    const f = new Vi(90, 1, t, n), p = [1, -1, 1, 1, 1, 1], h = [1, 1, 1, -1, -1, -1], g = this._renderer, _ = g.autoClear, x = g.toneMapping;
    g.getClearColor(gT), g.toneMapping = Xs, g.autoClear = !1;
    const M = new Zl({
      name: "PMREM.Background",
      side: Dr,
      depthWrite: !1,
      depthTest: !1
    }), T = new Ti(new vc(), M);
    let R = !1;
    const b = e.background;
    b ? b.isColor && (M.color.copy(b), e.background = null, R = !0) : (M.color.copy(gT), R = !0);
    for (let E = 0; E < 6; E++) {
      const L = E % 3;
      L === 0 ? (f.up.set(0, p[E], 0), f.lookAt(h[E], 0, 0)) : L === 1 ? (f.up.set(0, 0, p[E]), f.lookAt(0, h[E], 0)) : (f.up.set(0, p[E], 0), f.lookAt(0, 0, h[E]));
      const C = this._cubeSize;
      jv(r, L * C, E > 2 ? C : 0, C, C), g.setRenderTarget(r), R && g.render(T, f), g.render(e, f);
    }
    T.geometry.dispose(), T.material.dispose(), g.toneMapping = x, g.autoClear = _, e.background = b;
  }
  _textureToCubeUV(e, t) {
    const n = this._renderer, r = e.mapping === Fo || e.mapping === ql;
    r ? (this._cubemapMaterial === null && (this._cubemapMaterial = ST()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = xT());
    const o = r ? this._cubemapMaterial : this._equirectMaterial, c = new Ti(this._lodPlanes[0], o), f = o.uniforms;
    f.envMap.value = e;
    const p = this._cubeSize;
    jv(t, 0, 0, 3 * p, 2 * p), n.setRenderTarget(t), n.render(c, k_);
  }
  _applyPMREM(e) {
    const t = this._renderer, n = t.autoClear;
    t.autoClear = !1;
    for (let r = 1; r < this._lodPlanes.length; r++) {
      const o = Math.sqrt(this._sigmas[r] * this._sigmas[r] - this._sigmas[r - 1] * this._sigmas[r - 1]), c = yT[(r - 1) % yT.length];
      this._blur(e, r - 1, r, o, c);
    }
    t.autoClear = n;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(e, t, n, r, o) {
    const c = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      c,
      t,
      n,
      r,
      "latitudinal",
      o
    ), this._halfBlur(
      c,
      e,
      n,
      n,
      r,
      "longitudinal",
      o
    );
  }
  _halfBlur(e, t, n, r, o, c, f) {
    const p = this._renderer, h = this._blurMaterial;
    c !== "latitudinal" && c !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const g = 3, _ = new Ti(this._lodPlanes[r], h), x = h.uniforms, M = this._sizeLods[n] - 1, T = isFinite(o) ? Math.PI / (2 * M) : 2 * Math.PI / (2 * ic - 1), R = o / T, b = isFinite(o) ? 1 + Math.floor(g * R) : ic;
    b > ic && console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${b} samples when the maximum is set to ${ic}`);
    const E = [];
    let L = 0;
    for (let H = 0; H < ic; ++H) {
      const k = H / R, F = Math.exp(-k * k / 2);
      E.push(F), H === 0 ? L += F : H < b && (L += 2 * F);
    }
    for (let H = 0; H < E.length; H++)
      E[H] = E[H] / L;
    x.envMap.value = e.texture, x.samples.value = b, x.weights.value = E, x.latitudinal.value = c === "latitudinal", f && (x.poleAxis.value = f);
    const { _lodMax: C } = this;
    x.dTheta.value = T, x.mipInt.value = C - n;
    const U = this._sizeLods[r], Y = 3 * U * (r > C - sd ? r - C + sd : 0), B = 4 * (this._cubeSize - U);
    jv(t, Y, B, 3 * U, 2 * U), p.setRenderTarget(t), p.render(_, k_);
  }
}
function L3(s) {
  const e = [], t = [], n = [];
  let r = s;
  const o = s - sd + 1 + vT.length;
  for (let c = 0; c < o; c++) {
    const f = Math.pow(2, r);
    t.push(f);
    let p = 1 / f;
    c > s - sd ? p = vT[c - s + sd - 1] : c === 0 && (p = 0), n.push(p);
    const h = 1 / (f - 2), g = -h, _ = 1 + h, x = [g, g, _, g, _, _, g, g, _, _, g, _], M = 6, T = 6, R = 3, b = 2, E = 1, L = new Float32Array(R * T * M), C = new Float32Array(b * T * M), U = new Float32Array(E * T * M);
    for (let B = 0; B < M; B++) {
      const H = B % 3 * 2 / 3 - 1, k = B > 2 ? 0 : -1, F = [
        H,
        k,
        0,
        H + 2 / 3,
        k,
        0,
        H + 2 / 3,
        k + 1,
        0,
        H,
        k,
        0,
        H + 2 / 3,
        k + 1,
        0,
        H,
        k + 1,
        0
      ];
      L.set(F, R * T * B), C.set(x, b * T * B);
      const N = [B, B, B, B, B, B];
      U.set(N, E * T * B);
    }
    const Y = new $t();
    Y.setAttribute("position", new Dn(L, R)), Y.setAttribute("uv", new Dn(C, b)), Y.setAttribute("faceIndex", new Dn(U, E)), e.push(Y), r > sd && r--;
  }
  return { lodPlanes: e, sizeLods: t, sigmas: n };
}
function _T(s, e, t) {
  const n = new vs(s, e, t);
  return n.texture.mapping = gd, n.texture.name = "PMREM.cubeUv", n.scissorTest = !0, n;
}
function jv(s, e, t, n, r) {
  s.viewport.set(e, t, n, r), s.scissor.set(e, t, n, r);
}
function P3(s, e, t) {
  const n = new Float32Array(ic), r = new q(0, 1, 0);
  return new gs({
    name: "SphericalGaussianBlur",
    defines: {
      n: ic,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / t,
      CUBEUV_MAX_MIP: `${s}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: n },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: r }
    },
    vertexShader: PS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: Io,
    depthTest: !1,
    depthWrite: !1
  });
}
function xT() {
  return new gs({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: PS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: Io,
    depthTest: !1,
    depthWrite: !1
  });
}
function ST() {
  return new gs({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: PS(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: Io,
    depthTest: !1,
    depthWrite: !1
  });
}
function PS() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function D3(s) {
  let e = /* @__PURE__ */ new WeakMap(), t = null;
  function n(f) {
    if (f && f.isTexture) {
      const p = f.mapping, h = p === fp || p === dp, g = p === Fo || p === ql;
      if (h || g) {
        let _ = e.get(f);
        const x = _ !== void 0 ? _.texture.pmremVersion : 0;
        if (f.isRenderTargetTexture && f.pmremVersion !== x)
          return t === null && (t = new eS(s)), _ = h ? t.fromEquirectangular(f, _) : t.fromCubemap(f, _), _.texture.pmremVersion = f.pmremVersion, e.set(f, _), _.texture;
        if (_ !== void 0)
          return _.texture;
        {
          const M = f.image;
          return h && M && M.height > 0 || g && M && r(M) ? (t === null && (t = new eS(s)), _ = h ? t.fromEquirectangular(f) : t.fromCubemap(f), _.texture.pmremVersion = f.pmremVersion, e.set(f, _), f.addEventListener("dispose", o), _.texture) : null;
        }
      }
    }
    return f;
  }
  function r(f) {
    let p = 0;
    const h = 6;
    for (let g = 0; g < h; g++)
      f[g] !== void 0 && p++;
    return p === h;
  }
  function o(f) {
    const p = f.target;
    p.removeEventListener("dispose", o);
    const h = e.get(p);
    h !== void 0 && (e.delete(p), h.dispose());
  }
  function c() {
    e = /* @__PURE__ */ new WeakMap(), t !== null && (t.dispose(), t = null);
  }
  return {
    get: n,
    dispose: c
  };
}
function N3(s) {
  const e = {};
  function t(n) {
    if (e[n] !== void 0)
      return e[n];
    let r;
    switch (n) {
      case "WEBGL_depth_texture":
        r = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        r = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        r = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        r = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        r = s.getExtension(n);
    }
    return e[n] = r, r;
  }
  return {
    has: function(n) {
      return t(n) !== null;
    },
    init: function() {
      t("EXT_color_buffer_float"), t("WEBGL_clip_cull_distance"), t("OES_texture_float_linear"), t("EXT_color_buffer_half_float"), t("WEBGL_multisampled_render_to_texture"), t("WEBGL_render_shared_exponent");
    },
    get: function(n) {
      const r = t(n);
      return r === null && console.warn("THREE.WebGLRenderer: " + n + " extension not supported."), r;
    }
  };
}
function U3(s, e, t, n) {
  const r = {}, o = /* @__PURE__ */ new WeakMap();
  function c(_) {
    const x = _.target;
    x.index !== null && e.remove(x.index);
    for (const T in x.attributes)
      e.remove(x.attributes[T]);
    for (const T in x.morphAttributes) {
      const R = x.morphAttributes[T];
      for (let b = 0, E = R.length; b < E; b++)
        e.remove(R[b]);
    }
    x.removeEventListener("dispose", c), delete r[x.id];
    const M = o.get(x);
    M && (e.remove(M), o.delete(x)), n.releaseStatesOfGeometry(x), x.isInstancedBufferGeometry === !0 && delete x._maxInstanceCount, t.memory.geometries--;
  }
  function f(_, x) {
    return r[x.id] === !0 || (x.addEventListener("dispose", c), r[x.id] = !0, t.memory.geometries++), x;
  }
  function p(_) {
    const x = _.attributes;
    for (const T in x)
      e.update(x[T], s.ARRAY_BUFFER);
    const M = _.morphAttributes;
    for (const T in M) {
      const R = M[T];
      for (let b = 0, E = R.length; b < E; b++)
        e.update(R[b], s.ARRAY_BUFFER);
    }
  }
  function h(_) {
    const x = [], M = _.index, T = _.attributes.position;
    let R = 0;
    if (M !== null) {
      const L = M.array;
      R = M.version;
      for (let C = 0, U = L.length; C < U; C += 3) {
        const Y = L[C + 0], B = L[C + 1], H = L[C + 2];
        x.push(Y, B, B, H, H, Y);
      }
    } else if (T !== void 0) {
      const L = T.array;
      R = T.version;
      for (let C = 0, U = L.length / 3 - 1; C < U; C += 3) {
        const Y = C + 0, B = C + 1, H = C + 2;
        x.push(Y, B, B, H, H, Y);
      }
    } else
      return;
    const b = new (iA(x) ? LS : CS)(x, 1);
    b.version = R;
    const E = o.get(_);
    E && e.remove(E), o.set(_, b);
  }
  function g(_) {
    const x = o.get(_);
    if (x) {
      const M = _.index;
      M !== null && x.version < M.version && h(_);
    } else
      h(_);
    return o.get(_);
  }
  return {
    get: f,
    update: p,
    getWireframeAttribute: g
  };
}
function I3(s, e, t) {
  let n;
  function r(_) {
    n = _;
  }
  let o, c;
  function f(_) {
    o = _.type, c = _.bytesPerElement;
  }
  function p(_, x) {
    s.drawElements(n, x, o, _ * c), t.update(x, n, 1);
  }
  function h(_, x, M) {
    M !== 0 && (s.drawElementsInstanced(n, x, o, _ * c, M), t.update(x, n, M));
  }
  function g(_, x, M) {
    if (M === 0)
      return;
    const T = e.get("WEBGL_multi_draw");
    if (T === null)
      for (let R = 0; R < M; R++)
        this.render(_[R] / c, x[R]);
    else {
      T.multiDrawElementsWEBGL(n, x, 0, o, _, 0, M);
      let R = 0;
      for (let b = 0; b < M; b++)
        R += x[b];
      t.update(R, n, 1);
    }
  }
  this.setMode = r, this.setIndex = f, this.render = p, this.renderInstances = h, this.renderMultiDraw = g;
}
function O3(s) {
  const e = {
    geometries: 0,
    textures: 0
  }, t = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function n(o, c, f) {
    switch (t.calls++, c) {
      case s.TRIANGLES:
        t.triangles += f * (o / 3);
        break;
      case s.LINES:
        t.lines += f * (o / 2);
        break;
      case s.LINE_STRIP:
        t.lines += f * (o - 1);
        break;
      case s.LINE_LOOP:
        t.lines += f * o;
        break;
      case s.POINTS:
        t.points += f * o;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", c);
        break;
    }
  }
  function r() {
    t.calls = 0, t.triangles = 0, t.points = 0, t.lines = 0;
  }
  return {
    memory: e,
    render: t,
    programs: null,
    autoReset: !0,
    reset: r,
    update: n
  };
}
function F3(s, e, t) {
  const n = /* @__PURE__ */ new WeakMap(), r = new Pn();
  function o(c, f, p) {
    const h = c.morphTargetInfluences, g = f.morphAttributes.position || f.morphAttributes.normal || f.morphAttributes.color, _ = g !== void 0 ? g.length : 0;
    let x = n.get(f);
    if (x === void 0 || x.count !== _) {
      let F = function() {
        H.dispose(), n.delete(f), f.removeEventListener("dispose", F);
      };
      x !== void 0 && x.texture.dispose();
      const M = f.morphAttributes.position !== void 0, T = f.morphAttributes.normal !== void 0, R = f.morphAttributes.color !== void 0, b = f.morphAttributes.position || [], E = f.morphAttributes.normal || [], L = f.morphAttributes.color || [];
      let C = 0;
      M === !0 && (C = 1), T === !0 && (C = 2), R === !0 && (C = 3);
      let U = f.attributes.position.count * C, Y = 1;
      U > e.maxTextureSize && (Y = Math.ceil(U / e.maxTextureSize), U = e.maxTextureSize);
      const B = new Float32Array(U * Y * 4 * _), H = new Vg(B, U, Y, _);
      H.type = ja, H.needsUpdate = !0;
      const k = C * 4;
      for (let N = 0; N < _; N++) {
        const X = b[N], K = E[N], J = L[N], ae = U * Y * 4 * N;
        for (let _e = 0; _e < X.count; _e++) {
          const Me = _e * k;
          M === !0 && (r.fromBufferAttribute(X, _e), B[ae + Me + 0] = r.x, B[ae + Me + 1] = r.y, B[ae + Me + 2] = r.z, B[ae + Me + 3] = 0), T === !0 && (r.fromBufferAttribute(K, _e), B[ae + Me + 4] = r.x, B[ae + Me + 5] = r.y, B[ae + Me + 6] = r.z, B[ae + Me + 7] = 0), R === !0 && (r.fromBufferAttribute(J, _e), B[ae + Me + 8] = r.x, B[ae + Me + 9] = r.y, B[ae + Me + 10] = r.z, B[ae + Me + 11] = J.itemSize === 4 ? r.w : 1);
        }
      }
      x = {
        count: _,
        texture: H,
        size: new De(U, Y)
      }, n.set(f, x), f.addEventListener("dispose", F);
    }
    if (c.isInstancedMesh === !0 && c.morphTexture !== null)
      p.getUniforms().setValue(s, "morphTexture", c.morphTexture, t);
    else {
      let M = 0;
      for (let R = 0; R < h.length; R++)
        M += h[R];
      const T = f.morphTargetsRelative ? 1 : 1 - M;
      p.getUniforms().setValue(s, "morphTargetBaseInfluence", T), p.getUniforms().setValue(s, "morphTargetInfluences", h);
    }
    p.getUniforms().setValue(s, "morphTargetsTexture", x.texture, t), p.getUniforms().setValue(s, "morphTargetsTextureSize", x.size);
  }
  return {
    update: o
  };
}
function z3(s, e, t, n) {
  let r = /* @__PURE__ */ new WeakMap();
  function o(p) {
    const h = n.render.frame, g = p.geometry, _ = e.get(p, g);
    if (r.get(_) !== h && (e.update(_), r.set(_, h)), p.isInstancedMesh && (p.hasEventListener("dispose", f) === !1 && p.addEventListener("dispose", f), r.get(p) !== h && (t.update(p.instanceMatrix, s.ARRAY_BUFFER), p.instanceColor !== null && t.update(p.instanceColor, s.ARRAY_BUFFER), r.set(p, h))), p.isSkinnedMesh) {
      const x = p.skeleton;
      r.get(x) !== h && (x.update(), r.set(x, h));
    }
    return _;
  }
  function c() {
    r = /* @__PURE__ */ new WeakMap();
  }
  function f(p) {
    const h = p.target;
    h.removeEventListener("dispose", f), t.remove(h.instanceMatrix), h.instanceColor !== null && t.remove(h.instanceColor);
  }
  return {
    update: o,
    dispose: c
  };
}
class DS extends ai {
  constructor(e, t, n, r, o, c, f, p, h, g) {
    if (g = g !== void 0 ? g : uc, g !== uc && g !== dd)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    n === void 0 && g === uc && (n = hc), n === void 0 && g === dd && (n = yd), super(null, r, o, c, f, p, g, n, h), this.isDepthTexture = !0, this.image = { width: e, height: t }, this.magFilter = f !== void 0 ? f : ki, this.minFilter = p !== void 0 ? p : ki, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.compareFunction !== null && (t.compareFunction = this.compareFunction), t;
  }
}
const pA = /* @__PURE__ */ new ai(), mA = /* @__PURE__ */ new DS(1, 1);
mA.compareFunction = wS;
const vA = /* @__PURE__ */ new Vg(), gA = /* @__PURE__ */ new RS(), yA = /* @__PURE__ */ new Op(), MT = [], ET = [], TT = new Float32Array(16), bT = new Float32Array(9), wT = new Float32Array(4);
function Sd(s, e, t) {
  const n = s[0];
  if (n <= 0 || n > 0)
    return s;
  const r = e * t;
  let o = MT[r];
  if (o === void 0 && (o = new Float32Array(r), MT[r] = o), e !== 0) {
    n.toArray(o, 0);
    for (let c = 1, f = 0; c !== e; ++c)
      f += t, s[c].toArray(o, f);
  }
  return o;
}
function Ui(s, e) {
  if (s.length !== e.length)
    return !1;
  for (let t = 0, n = s.length; t < n; t++)
    if (s[t] !== e[t])
      return !1;
  return !0;
}
function Ii(s, e) {
  for (let t = 0, n = e.length; t < n; t++)
    s[t] = e[t];
}
function kg(s, e) {
  let t = ET[e];
  t === void 0 && (t = new Int32Array(e), ET[e] = t);
  for (let n = 0; n !== e; ++n)
    t[n] = s.allocateTextureUnit();
  return t;
}
function B3(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1f(this.addr, e), t[0] = e);
}
function H3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2f(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ui(t, e))
      return;
    s.uniform2fv(this.addr, e), Ii(t, e);
  }
}
function V3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3f(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else if (e.r !== void 0)
    (t[0] !== e.r || t[1] !== e.g || t[2] !== e.b) && (s.uniform3f(this.addr, e.r, e.g, e.b), t[0] = e.r, t[1] = e.g, t[2] = e.b);
  else {
    if (Ui(t, e))
      return;
    s.uniform3fv(this.addr, e), Ii(t, e);
  }
}
function k3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4f(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ui(t, e))
      return;
    s.uniform4fv(this.addr, e), Ii(t, e);
  }
}
function G3(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ui(t, e))
      return;
    s.uniformMatrix2fv(this.addr, !1, e), Ii(t, e);
  } else {
    if (Ui(t, n))
      return;
    wT.set(n), s.uniformMatrix2fv(this.addr, !1, wT), Ii(t, n);
  }
}
function W3(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ui(t, e))
      return;
    s.uniformMatrix3fv(this.addr, !1, e), Ii(t, e);
  } else {
    if (Ui(t, n))
      return;
    bT.set(n), s.uniformMatrix3fv(this.addr, !1, bT), Ii(t, n);
  }
}
function X3(s, e) {
  const t = this.cache, n = e.elements;
  if (n === void 0) {
    if (Ui(t, e))
      return;
    s.uniformMatrix4fv(this.addr, !1, e), Ii(t, e);
  } else {
    if (Ui(t, n))
      return;
    TT.set(n), s.uniformMatrix4fv(this.addr, !1, TT), Ii(t, n);
  }
}
function q3(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1i(this.addr, e), t[0] = e);
}
function Y3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2i(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ui(t, e))
      return;
    s.uniform2iv(this.addr, e), Ii(t, e);
  }
}
function j3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3i(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Ui(t, e))
      return;
    s.uniform3iv(this.addr, e), Ii(t, e);
  }
}
function Z3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4i(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ui(t, e))
      return;
    s.uniform4iv(this.addr, e), Ii(t, e);
  }
}
function J3(s, e) {
  const t = this.cache;
  t[0] !== e && (s.uniform1ui(this.addr, e), t[0] = e);
}
function Q3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y) && (s.uniform2ui(this.addr, e.x, e.y), t[0] = e.x, t[1] = e.y);
  else {
    if (Ui(t, e))
      return;
    s.uniform2uiv(this.addr, e), Ii(t, e);
  }
}
function K3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z) && (s.uniform3ui(this.addr, e.x, e.y, e.z), t[0] = e.x, t[1] = e.y, t[2] = e.z);
  else {
    if (Ui(t, e))
      return;
    s.uniform3uiv(this.addr, e), Ii(t, e);
  }
}
function $3(s, e) {
  const t = this.cache;
  if (e.x !== void 0)
    (t[0] !== e.x || t[1] !== e.y || t[2] !== e.z || t[3] !== e.w) && (s.uniform4ui(this.addr, e.x, e.y, e.z, e.w), t[0] = e.x, t[1] = e.y, t[2] = e.z, t[3] = e.w);
  else {
    if (Ui(t, e))
      return;
    s.uniform4uiv(this.addr, e), Ii(t, e);
  }
}
function eI(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r);
  const o = this.type === s.SAMPLER_2D_SHADOW ? mA : pA;
  t.setTexture2D(e || o, r);
}
function tI(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTexture3D(e || gA, r);
}
function nI(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTextureCube(e || yA, r);
}
function iI(s, e, t) {
  const n = this.cache, r = t.allocateTextureUnit();
  n[0] !== r && (s.uniform1i(this.addr, r), n[0] = r), t.setTexture2DArray(e || vA, r);
}
function rI(s) {
  switch (s) {
    case 5126:
      return B3;
    case 35664:
      return H3;
    case 35665:
      return V3;
    case 35666:
      return k3;
    case 35674:
      return G3;
    case 35675:
      return W3;
    case 35676:
      return X3;
    case 5124:
    case 35670:
      return q3;
    case 35667:
    case 35671:
      return Y3;
    case 35668:
    case 35672:
      return j3;
    case 35669:
    case 35673:
      return Z3;
    case 5125:
      return J3;
    case 36294:
      return Q3;
    case 36295:
      return K3;
    case 36296:
      return $3;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return eI;
    case 35679:
    case 36299:
    case 36307:
      return tI;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return nI;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return iI;
  }
}
function aI(s, e) {
  s.uniform1fv(this.addr, e);
}
function sI(s, e) {
  const t = Sd(e, this.size, 2);
  s.uniform2fv(this.addr, t);
}
function oI(s, e) {
  const t = Sd(e, this.size, 3);
  s.uniform3fv(this.addr, t);
}
function lI(s, e) {
  const t = Sd(e, this.size, 4);
  s.uniform4fv(this.addr, t);
}
function uI(s, e) {
  const t = Sd(e, this.size, 4);
  s.uniformMatrix2fv(this.addr, !1, t);
}
function cI(s, e) {
  const t = Sd(e, this.size, 9);
  s.uniformMatrix3fv(this.addr, !1, t);
}
function fI(s, e) {
  const t = Sd(e, this.size, 16);
  s.uniformMatrix4fv(this.addr, !1, t);
}
function dI(s, e) {
  s.uniform1iv(this.addr, e);
}
function hI(s, e) {
  s.uniform2iv(this.addr, e);
}
function pI(s, e) {
  s.uniform3iv(this.addr, e);
}
function mI(s, e) {
  s.uniform4iv(this.addr, e);
}
function vI(s, e) {
  s.uniform1uiv(this.addr, e);
}
function gI(s, e) {
  s.uniform2uiv(this.addr, e);
}
function yI(s, e) {
  s.uniform3uiv(this.addr, e);
}
function _I(s, e) {
  s.uniform4uiv(this.addr, e);
}
function xI(s, e, t) {
  const n = this.cache, r = e.length, o = kg(t, r);
  Ui(n, o) || (s.uniform1iv(this.addr, o), Ii(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture2D(e[c] || pA, o[c]);
}
function SI(s, e, t) {
  const n = this.cache, r = e.length, o = kg(t, r);
  Ui(n, o) || (s.uniform1iv(this.addr, o), Ii(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture3D(e[c] || gA, o[c]);
}
function MI(s, e, t) {
  const n = this.cache, r = e.length, o = kg(t, r);
  Ui(n, o) || (s.uniform1iv(this.addr, o), Ii(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTextureCube(e[c] || yA, o[c]);
}
function EI(s, e, t) {
  const n = this.cache, r = e.length, o = kg(t, r);
  Ui(n, o) || (s.uniform1iv(this.addr, o), Ii(n, o));
  for (let c = 0; c !== r; ++c)
    t.setTexture2DArray(e[c] || vA, o[c]);
}
function TI(s) {
  switch (s) {
    case 5126:
      return aI;
    case 35664:
      return sI;
    case 35665:
      return oI;
    case 35666:
      return lI;
    case 35674:
      return uI;
    case 35675:
      return cI;
    case 35676:
      return fI;
    case 5124:
    case 35670:
      return dI;
    case 35667:
    case 35671:
      return hI;
    case 35668:
    case 35672:
      return pI;
    case 35669:
    case 35673:
      return mI;
    case 5125:
      return vI;
    case 36294:
      return gI;
    case 36295:
      return yI;
    case 36296:
      return _I;
    case 35678:
    case 36198:
    case 36298:
    case 36306:
    case 35682:
      return xI;
    case 35679:
    case 36299:
    case 36307:
      return SI;
    case 35680:
    case 36300:
    case 36308:
    case 36293:
      return MI;
    case 36289:
    case 36303:
    case 36311:
    case 36292:
      return EI;
  }
}
class bI {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.setValue = rI(t.type);
  }
}
class wI {
  constructor(e, t, n) {
    this.id = e, this.addr = n, this.cache = [], this.type = t.type, this.size = t.size, this.setValue = TI(t.type);
  }
}
class AI {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, t, n) {
    const r = this.seq;
    for (let o = 0, c = r.length; o !== c; ++o) {
      const f = r[o];
      f.setValue(e, t[f.id], n);
    }
  }
}
const Y_ = /(\w+)(\])?(\[|\.)?/g;
function AT(s, e) {
  s.seq.push(e), s.map[e.id] = e;
}
function RI(s, e, t) {
  const n = s.name, r = n.length;
  for (Y_.lastIndex = 0; ; ) {
    const o = Y_.exec(n), c = Y_.lastIndex;
    let f = o[1];
    const p = o[2] === "]", h = o[3];
    if (p && (f = f | 0), h === void 0 || h === "[" && c + 2 === r) {
      AT(t, h === void 0 ? new bI(f, s, e) : new wI(f, s, e));
      break;
    } else {
      let _ = t.map[f];
      _ === void 0 && (_ = new AI(f), AT(t, _)), t = _;
    }
  }
}
class Ag {
  constructor(e, t) {
    this.seq = [], this.map = {};
    const n = e.getProgramParameter(t, e.ACTIVE_UNIFORMS);
    for (let r = 0; r < n; ++r) {
      const o = e.getActiveUniform(t, r), c = e.getUniformLocation(t, o.name);
      RI(o, c, this);
    }
  }
  setValue(e, t, n, r) {
    const o = this.map[t];
    o !== void 0 && o.setValue(e, n, r);
  }
  setOptional(e, t, n) {
    const r = t[n];
    r !== void 0 && this.setValue(e, n, r);
  }
  static upload(e, t, n, r) {
    for (let o = 0, c = t.length; o !== c; ++o) {
      const f = t[o], p = n[f.id];
      p.needsUpdate !== !1 && f.setValue(e, p.value, r);
    }
  }
  static seqWithValue(e, t) {
    const n = [];
    for (let r = 0, o = e.length; r !== o; ++r) {
      const c = e[r];
      c.id in t && n.push(c);
    }
    return n;
  }
}
function RT(s, e, t) {
  const n = s.createShader(e);
  return s.shaderSource(n, t), s.compileShader(n), n;
}
const CI = 37297;
let LI = 0;
function PI(s, e) {
  const t = s.split(`
`), n = [], r = Math.max(e - 6, 0), o = Math.min(e + 6, t.length);
  for (let c = r; c < o; c++) {
    const f = c + 1;
    n.push(`${f === e ? ">" : " "} ${f}: ${t[c]}`);
  }
  return n.join(`
`);
}
function DI(s) {
  const e = Ln.getPrimaries(Ln.workingColorSpace), t = Ln.getPrimaries(s);
  let n;
  switch (e === t ? n = "" : e === Sp && t === xp ? n = "LinearDisplayP3ToLinearSRGB" : e === xp && t === Sp && (n = "LinearSRGBToLinearDisplayP3"), s) {
    case Bo:
    case Up:
      return [n, "LinearTransferOETF"];
    case qa:
    case Hg:
      return [n, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space:", s), [n, "LinearTransferOETF"];
  }
}
function CT(s, e, t) {
  const n = s.getShaderParameter(e, s.COMPILE_STATUS), r = s.getShaderInfoLog(e).trim();
  if (n && r === "")
    return "";
  const o = /ERROR: 0:(\d+)/.exec(r);
  if (o) {
    const c = parseInt(o[1]);
    return t.toUpperCase() + `

` + r + `

` + PI(s.getShaderSource(e), c);
  } else
    return r;
}
function NI(s, e) {
  const t = DI(e);
  return `vec4 ${s}( vec4 value ) { return ${t[0]}( ${t[1]}( value ) ); }`;
}
function UI(s, e) {
  let t;
  switch (e) {
    case Rw:
      t = "Linear";
      break;
    case Cw:
      t = "Reinhard";
      break;
    case Lw:
      t = "OptimizedCineon";
      break;
    case pS:
      t = "ACESFilmic";
      break;
    case Dw:
      t = "AgX";
      break;
    case Nw:
      t = "Neutral";
      break;
    case Pw:
      t = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), t = "Linear";
  }
  return "vec3 " + s + "( vec3 color ) { return " + t + "ToneMapping( color ); }";
}
function II(s) {
  return [
    s.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    s.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(rp).join(`
`);
}
function OI(s) {
  const e = [];
  for (const t in s) {
    const n = s[t];
    n !== !1 && e.push("#define " + t + " " + n);
  }
  return e.join(`
`);
}
function FI(s, e) {
  const t = {}, n = s.getProgramParameter(e, s.ACTIVE_ATTRIBUTES);
  for (let r = 0; r < n; r++) {
    const o = s.getActiveAttrib(e, r), c = o.name;
    let f = 1;
    o.type === s.FLOAT_MAT2 && (f = 2), o.type === s.FLOAT_MAT3 && (f = 3), o.type === s.FLOAT_MAT4 && (f = 4), t[c] = {
      type: o.type,
      location: s.getAttribLocation(e, c),
      locationSize: f
    };
  }
  return t;
}
function rp(s) {
  return s !== "";
}
function LT(s, e) {
  const t = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return s.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, t).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function PT(s, e) {
  return s.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const zI = /^[ \t]*#include +<([\w\d./]+)>/gm;
function tS(s) {
  return s.replace(zI, HI);
}
const BI = /* @__PURE__ */ new Map([
  ["encodings_fragment", "colorspace_fragment"],
  // @deprecated, r154
  ["encodings_pars_fragment", "colorspace_pars_fragment"],
  // @deprecated, r154
  ["output_fragment", "opaque_fragment"]
  // @deprecated, r154
]);
function HI(s, e) {
  let t = Kt[e];
  if (t === void 0) {
    const n = BI.get(e);
    if (n !== void 0)
      t = Kt[n], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, n);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return tS(t);
}
const VI = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function DT(s) {
  return s.replace(VI, kI);
}
function kI(s, e, t, n) {
  let r = "";
  for (let o = parseInt(e); o < parseInt(t); o++)
    r += n.replace(/\[\s*i\s*\]/g, "[ " + o + " ]").replace(/UNROLLED_LOOP_INDEX/g, o);
  return r;
}
function NT(s) {
  let e = `precision ${s.precision} float;
	precision ${s.precision} int;
	precision ${s.precision} sampler2D;
	precision ${s.precision} samplerCube;
	precision ${s.precision} sampler3D;
	precision ${s.precision} sampler2DArray;
	precision ${s.precision} sampler2DShadow;
	precision ${s.precision} samplerCubeShadow;
	precision ${s.precision} sampler2DArrayShadow;
	precision ${s.precision} isampler2D;
	precision ${s.precision} isampler3D;
	precision ${s.precision} isamplerCube;
	precision ${s.precision} isampler2DArray;
	precision ${s.precision} usampler2D;
	precision ${s.precision} usampler3D;
	precision ${s.precision} usamplerCube;
	precision ${s.precision} usampler2DArray;
	`;
  return s.precision === "highp" ? e += `
#define HIGH_PRECISION` : s.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function GI(s) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return s.shadowMapType === Fg ? e = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === ap ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === ps && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function WI(s) {
  let e = "ENVMAP_TYPE_CUBE";
  if (s.envMap)
    switch (s.envMapMode) {
      case Fo:
      case ql:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case gd:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function XI(s) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (s.envMap)
    switch (s.envMapMode) {
      case ql:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function qI(s) {
  let e = "ENVMAP_BLENDING_NONE";
  if (s.envMap)
    switch (s.combine) {
      case Np:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case ww:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case Aw:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function YI(s) {
  const e = s.envMapCubeUVHeight;
  if (e === null)
    return null;
  const t = Math.log2(e) - 2, n = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, t), 7 * 16)), texelHeight: n, maxMip: t };
}
function jI(s, e, t, n) {
  const r = s.getContext(), o = t.defines;
  let c = t.vertexShader, f = t.fragmentShader;
  const p = GI(t), h = WI(t), g = XI(t), _ = qI(t), x = YI(t), M = II(t), T = OI(o), R = r.createProgram();
  let b, E, L = t.glslVersion ? "#version " + t.glslVersion + `
` : "";
  t.isRawShaderMaterial ? (b = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T
  ].filter(rp).join(`
`), b.length > 0 && (b += `
`), E = [
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T
  ].filter(rp).join(`
`), E.length > 0 && (E += `
`)) : (b = [
    NT(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T,
    t.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    t.batching ? "#define USE_BATCHING" : "",
    t.instancing ? "#define USE_INSTANCING" : "",
    t.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    t.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.map ? "#define USE_MAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + g : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    t.mapUv ? "#define MAP_UV " + t.mapUv : "",
    t.alphaMapUv ? "#define ALPHAMAP_UV " + t.alphaMapUv : "",
    t.lightMapUv ? "#define LIGHTMAP_UV " + t.lightMapUv : "",
    t.aoMapUv ? "#define AOMAP_UV " + t.aoMapUv : "",
    t.emissiveMapUv ? "#define EMISSIVEMAP_UV " + t.emissiveMapUv : "",
    t.bumpMapUv ? "#define BUMPMAP_UV " + t.bumpMapUv : "",
    t.normalMapUv ? "#define NORMALMAP_UV " + t.normalMapUv : "",
    t.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + t.displacementMapUv : "",
    t.metalnessMapUv ? "#define METALNESSMAP_UV " + t.metalnessMapUv : "",
    t.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + t.roughnessMapUv : "",
    t.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + t.anisotropyMapUv : "",
    t.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + t.clearcoatMapUv : "",
    t.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + t.clearcoatNormalMapUv : "",
    t.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + t.clearcoatRoughnessMapUv : "",
    t.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + t.iridescenceMapUv : "",
    t.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + t.iridescenceThicknessMapUv : "",
    t.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + t.sheenColorMapUv : "",
    t.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + t.sheenRoughnessMapUv : "",
    t.specularMapUv ? "#define SPECULARMAP_UV " + t.specularMapUv : "",
    t.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + t.specularColorMapUv : "",
    t.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + t.specularIntensityMapUv : "",
    t.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + t.transmissionMapUv : "",
    t.thicknessMapUv ? "#define THICKNESSMAP_UV " + t.thicknessMapUv : "",
    //
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.skinning ? "#define USE_SKINNING" : "",
    t.morphTargets ? "#define USE_MORPHTARGETS" : "",
    t.morphNormals && t.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    t.morphColors ? "#define USE_MORPHCOLORS" : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE" : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + t.morphTextureStride : "",
    t.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + t.morphTargetsCount : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )",
    "	attribute vec3 morphTarget0;",
    "	attribute vec3 morphTarget1;",
    "	attribute vec3 morphTarget2;",
    "	attribute vec3 morphTarget3;",
    "	#ifdef USE_MORPHNORMALS",
    "		attribute vec3 morphNormal0;",
    "		attribute vec3 morphNormal1;",
    "		attribute vec3 morphNormal2;",
    "		attribute vec3 morphNormal3;",
    "	#else",
    "		attribute vec3 morphTarget4;",
    "		attribute vec3 morphTarget5;",
    "		attribute vec3 morphTarget6;",
    "		attribute vec3 morphTarget7;",
    "	#endif",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(rp).join(`
`), E = [
    NT(t),
    "#define SHADER_TYPE " + t.shaderType,
    "#define SHADER_NAME " + t.shaderName,
    T,
    t.useFog && t.fog ? "#define USE_FOG" : "",
    t.useFog && t.fogExp2 ? "#define FOG_EXP2" : "",
    t.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    t.map ? "#define USE_MAP" : "",
    t.matcap ? "#define USE_MATCAP" : "",
    t.envMap ? "#define USE_ENVMAP" : "",
    t.envMap ? "#define " + h : "",
    t.envMap ? "#define " + g : "",
    t.envMap ? "#define " + _ : "",
    x ? "#define CUBEUV_TEXEL_WIDTH " + x.texelWidth : "",
    x ? "#define CUBEUV_TEXEL_HEIGHT " + x.texelHeight : "",
    x ? "#define CUBEUV_MAX_MIP " + x.maxMip + ".0" : "",
    t.lightMap ? "#define USE_LIGHTMAP" : "",
    t.aoMap ? "#define USE_AOMAP" : "",
    t.bumpMap ? "#define USE_BUMPMAP" : "",
    t.normalMap ? "#define USE_NORMALMAP" : "",
    t.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    t.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    t.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    t.anisotropy ? "#define USE_ANISOTROPY" : "",
    t.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    t.clearcoat ? "#define USE_CLEARCOAT" : "",
    t.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    t.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    t.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    t.iridescence ? "#define USE_IRIDESCENCE" : "",
    t.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    t.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    t.specularMap ? "#define USE_SPECULARMAP" : "",
    t.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    t.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    t.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    t.metalnessMap ? "#define USE_METALNESSMAP" : "",
    t.alphaMap ? "#define USE_ALPHAMAP" : "",
    t.alphaTest ? "#define USE_ALPHATEST" : "",
    t.alphaHash ? "#define USE_ALPHAHASH" : "",
    t.sheen ? "#define USE_SHEEN" : "",
    t.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    t.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    t.transmission ? "#define USE_TRANSMISSION" : "",
    t.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    t.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    t.vertexTangents && t.flatShading === !1 ? "#define USE_TANGENT" : "",
    t.vertexColors || t.instancingColor ? "#define USE_COLOR" : "",
    t.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    t.vertexUv1s ? "#define USE_UV1" : "",
    t.vertexUv2s ? "#define USE_UV2" : "",
    t.vertexUv3s ? "#define USE_UV3" : "",
    t.pointsUvs ? "#define USE_POINTS_UV" : "",
    t.gradientMap ? "#define USE_GRADIENTMAP" : "",
    t.flatShading ? "#define FLAT_SHADED" : "",
    t.doubleSided ? "#define DOUBLE_SIDED" : "",
    t.flipSided ? "#define FLIP_SIDED" : "",
    t.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    t.shadowMapEnabled ? "#define " + p : "",
    t.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    t.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    t.useLegacyLights ? "#define LEGACY_LIGHTS" : "",
    t.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    t.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    t.toneMapping !== Xs ? "#define TONE_MAPPING" : "",
    t.toneMapping !== Xs ? Kt.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    t.toneMapping !== Xs ? UI("toneMapping", t.toneMapping) : "",
    t.dithering ? "#define DITHERING" : "",
    t.opaque ? "#define OPAQUE" : "",
    Kt.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    NI("linearToOutputTexel", t.outputColorSpace),
    t.useDepthPacking ? "#define DEPTH_PACKING " + t.depthPacking : "",
    `
`
  ].filter(rp).join(`
`)), c = tS(c), c = LT(c, t), c = PT(c, t), f = tS(f), f = LT(f, t), f = PT(f, t), c = DT(c), f = DT(f), t.isRawShaderMaterial !== !0 && (L = `#version 300 es
`, b = [
    M,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + b, E = [
    "#define varying in",
    t.glslVersion === $x ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    t.glslVersion === $x ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + E);
  const C = L + b + c, U = L + E + f, Y = RT(r, r.VERTEX_SHADER, C), B = RT(r, r.FRAGMENT_SHADER, U);
  r.attachShader(R, Y), r.attachShader(R, B), t.index0AttributeName !== void 0 ? r.bindAttribLocation(R, 0, t.index0AttributeName) : t.morphTargets === !0 && r.bindAttribLocation(R, 0, "position"), r.linkProgram(R);
  function H(X) {
    if (s.debug.checkShaderErrors) {
      const K = r.getProgramInfoLog(R).trim(), J = r.getShaderInfoLog(Y).trim(), ae = r.getShaderInfoLog(B).trim();
      let _e = !0, Me = !0;
      if (r.getProgramParameter(R, r.LINK_STATUS) === !1)
        if (_e = !1, typeof s.debug.onShaderError == "function")
          s.debug.onShaderError(r, R, Y, B);
        else {
          const Fe = CT(r, Y, "vertex"), Q = CT(r, B, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(R, r.VALIDATE_STATUS) + `

Material Name: ` + X.name + `
Material Type: ` + X.type + `

Program Info Log: ` + K + `
` + Fe + `
` + Q
          );
        }
      else
        K !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", K) : (J === "" || ae === "") && (Me = !1);
      Me && (X.diagnostics = {
        runnable: _e,
        programLog: K,
        vertexShader: {
          log: J,
          prefix: b
        },
        fragmentShader: {
          log: ae,
          prefix: E
        }
      });
    }
    r.deleteShader(Y), r.deleteShader(B), k = new Ag(r, R), F = FI(r, R);
  }
  let k;
  this.getUniforms = function() {
    return k === void 0 && H(this), k;
  };
  let F;
  this.getAttributes = function() {
    return F === void 0 && H(this), F;
  };
  let N = t.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return N === !1 && (N = r.getProgramParameter(R, CI)), N;
  }, this.destroy = function() {
    n.releaseStatesOfProgram(this), r.deleteProgram(R), this.program = void 0;
  }, this.type = t.shaderType, this.name = t.shaderName, this.id = LI++, this.cacheKey = e, this.usedTimes = 1, this.program = R, this.vertexShader = Y, this.fragmentShader = B, this;
}
let ZI = 0;
class JI {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const t = e.vertexShader, n = e.fragmentShader, r = this._getShaderStage(t), o = this._getShaderStage(n), c = this._getShaderCacheForMaterial(e);
    return c.has(r) === !1 && (c.add(r), r.usedTimes++), c.has(o) === !1 && (c.add(o), o.usedTimes++), this;
  }
  remove(e) {
    const t = this.materialCache.get(e);
    for (const n of t)
      n.usedTimes--, n.usedTimes === 0 && this.shaderCache.delete(n.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const t = this.materialCache;
    let n = t.get(e);
    return n === void 0 && (n = /* @__PURE__ */ new Set(), t.set(e, n)), n;
  }
  _getShaderStage(e) {
    const t = this.shaderCache;
    let n = t.get(e);
    return n === void 0 && (n = new QI(e), t.set(e, n)), n;
  }
}
class QI {
  constructor(e) {
    this.id = ZI++, this.code = e, this.usedTimes = 0;
  }
}
function KI(s, e, t, n, r, o, c) {
  const f = new fc(), p = new JI(), h = /* @__PURE__ */ new Set(), g = [], _ = r.logarithmicDepthBuffer, x = r.vertexTextures;
  let M = r.precision;
  const T = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function R(F) {
    return h.add(F), F === 0 ? "uv" : `uv${F}`;
  }
  function b(F, N, X, K, J) {
    const ae = K.fog, _e = J.geometry, Me = F.isMeshStandardMaterial ? K.environment : null, Fe = (F.isMeshStandardMaterial ? t : e).get(F.envMap || Me), Q = Fe && Fe.mapping === gd ? Fe.image.height : null, ue = T[F.type];
    F.precision !== null && (M = r.getMaxPrecision(F.precision), M !== F.precision && console.warn("THREE.WebGLProgram.getParameters:", F.precision, "not supported, using", M, "instead."));
    const ne = _e.morphAttributes.position || _e.morphAttributes.normal || _e.morphAttributes.color, be = ne !== void 0 ? ne.length : 0;
    let Oe = 0;
    _e.morphAttributes.position !== void 0 && (Oe = 1), _e.morphAttributes.normal !== void 0 && (Oe = 2), _e.morphAttributes.color !== void 0 && (Oe = 3);
    let ht, ve, Ue, Ye;
    if (ue) {
      const si = ms[ue];
      ht = si.vertexShader, ve = si.fragmentShader;
    } else
      ht = F.vertexShader, ve = F.fragmentShader, p.update(F), Ue = p.getVertexShaderID(F), Ye = p.getFragmentShaderID(F);
    const Ge = s.getRenderTarget(), gt = J.isInstancedMesh === !0, Pt = J.isBatchedMesh === !0, Dt = !!F.map, ie = !!F.matcap, Re = !!Fe, Se = !!F.aoMap, He = !!F.lightMap, Be = !!F.bumpMap, Ve = !!F.normalMap, W = !!F.displacementMap, O = !!F.emissiveMap, se = !!F.metalnessMap, xe = !!F.roughnessMap, Ae = F.anisotropy > 0, Pe = F.clearcoat > 0, st = F.iridescence > 0, Ne = F.sheen > 0, St = F.transmission > 0, bt = Ae && !!F.anisotropyMap, Je = Pe && !!F.clearcoatMap, ft = Pe && !!F.clearcoatNormalMap, Ft = Pe && !!F.clearcoatRoughnessMap, vt = st && !!F.iridescenceMap, Te = st && !!F.iridescenceThicknessMap, Xe = Ne && !!F.sheenColorMap, ut = Ne && !!F.sheenRoughnessMap, wt = !!F.specularMap, et = !!F.specularColorMap, en = !!F.specularIntensityMap, ot = St && !!F.transmissionMap, G = St && !!F.thicknessMap, de = !!F.gradientMap, qe = !!F.alphaMap, Ke = F.alphaTest > 0, Ze = !!F.alphaHash, bn = !!F.extensions;
    let an = Xs;
    F.toneMapped && (Ge === null || Ge.isXRRenderTarget === !0) && (an = s.toneMapping);
    const gn = {
      shaderID: ue,
      shaderType: F.type,
      shaderName: F.name,
      vertexShader: ht,
      fragmentShader: ve,
      defines: F.defines,
      customVertexShaderID: Ue,
      customFragmentShaderID: Ye,
      isRawShaderMaterial: F.isRawShaderMaterial === !0,
      glslVersion: F.glslVersion,
      precision: M,
      batching: Pt,
      instancing: gt,
      instancingColor: gt && J.instanceColor !== null,
      instancingMorph: gt && J.morphTexture !== null,
      supportsVertexTextures: x,
      outputColorSpace: Ge === null ? s.outputColorSpace : Ge.isXRRenderTarget === !0 ? Ge.texture.colorSpace : Bo,
      alphaToCoverage: !!F.alphaToCoverage,
      map: Dt,
      matcap: ie,
      envMap: Re,
      envMapMode: Re && Fe.mapping,
      envMapCubeUVHeight: Q,
      aoMap: Se,
      lightMap: He,
      bumpMap: Be,
      normalMap: Ve,
      displacementMap: x && W,
      emissiveMap: O,
      normalMapObjectSpace: Ve && F.normalMapType === Zw,
      normalMapTangentSpace: Ve && F.normalMapType === jl,
      metalnessMap: se,
      roughnessMap: xe,
      anisotropy: Ae,
      anisotropyMap: bt,
      clearcoat: Pe,
      clearcoatMap: Je,
      clearcoatNormalMap: ft,
      clearcoatRoughnessMap: Ft,
      iridescence: st,
      iridescenceMap: vt,
      iridescenceThicknessMap: Te,
      sheen: Ne,
      sheenColorMap: Xe,
      sheenRoughnessMap: ut,
      specularMap: wt,
      specularColorMap: et,
      specularIntensityMap: en,
      transmission: St,
      transmissionMap: ot,
      thicknessMap: G,
      gradientMap: de,
      opaque: F.transparent === !1 && F.blending === lc && F.alphaToCoverage === !1,
      alphaMap: qe,
      alphaTest: Ke,
      alphaHash: Ze,
      combine: F.combine,
      //
      mapUv: Dt && R(F.map.channel),
      aoMapUv: Se && R(F.aoMap.channel),
      lightMapUv: He && R(F.lightMap.channel),
      bumpMapUv: Be && R(F.bumpMap.channel),
      normalMapUv: Ve && R(F.normalMap.channel),
      displacementMapUv: W && R(F.displacementMap.channel),
      emissiveMapUv: O && R(F.emissiveMap.channel),
      metalnessMapUv: se && R(F.metalnessMap.channel),
      roughnessMapUv: xe && R(F.roughnessMap.channel),
      anisotropyMapUv: bt && R(F.anisotropyMap.channel),
      clearcoatMapUv: Je && R(F.clearcoatMap.channel),
      clearcoatNormalMapUv: ft && R(F.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: Ft && R(F.clearcoatRoughnessMap.channel),
      iridescenceMapUv: vt && R(F.iridescenceMap.channel),
      iridescenceThicknessMapUv: Te && R(F.iridescenceThicknessMap.channel),
      sheenColorMapUv: Xe && R(F.sheenColorMap.channel),
      sheenRoughnessMapUv: ut && R(F.sheenRoughnessMap.channel),
      specularMapUv: wt && R(F.specularMap.channel),
      specularColorMapUv: et && R(F.specularColorMap.channel),
      specularIntensityMapUv: en && R(F.specularIntensityMap.channel),
      transmissionMapUv: ot && R(F.transmissionMap.channel),
      thicknessMapUv: G && R(F.thicknessMap.channel),
      alphaMapUv: qe && R(F.alphaMap.channel),
      //
      vertexTangents: !!_e.attributes.tangent && (Ve || Ae),
      vertexColors: F.vertexColors,
      vertexAlphas: F.vertexColors === !0 && !!_e.attributes.color && _e.attributes.color.itemSize === 4,
      pointsUvs: J.isPoints === !0 && !!_e.attributes.uv && (Dt || qe),
      fog: !!ae,
      useFog: F.fog === !0,
      fogExp2: !!ae && ae.isFogExp2,
      flatShading: F.flatShading === !0,
      sizeAttenuation: F.sizeAttenuation === !0,
      logarithmicDepthBuffer: _,
      skinning: J.isSkinnedMesh === !0,
      morphTargets: _e.morphAttributes.position !== void 0,
      morphNormals: _e.morphAttributes.normal !== void 0,
      morphColors: _e.morphAttributes.color !== void 0,
      morphTargetsCount: be,
      morphTextureStride: Oe,
      numDirLights: N.directional.length,
      numPointLights: N.point.length,
      numSpotLights: N.spot.length,
      numSpotLightMaps: N.spotLightMap.length,
      numRectAreaLights: N.rectArea.length,
      numHemiLights: N.hemi.length,
      numDirLightShadows: N.directionalShadowMap.length,
      numPointLightShadows: N.pointShadowMap.length,
      numSpotLightShadows: N.spotShadowMap.length,
      numSpotLightShadowsWithMaps: N.numSpotLightShadowsWithMaps,
      numLightProbes: N.numLightProbes,
      numClippingPlanes: c.numPlanes,
      numClipIntersection: c.numIntersection,
      dithering: F.dithering,
      shadowMapEnabled: s.shadowMap.enabled && X.length > 0,
      shadowMapType: s.shadowMap.type,
      toneMapping: an,
      useLegacyLights: s._useLegacyLights,
      decodeVideoTexture: Dt && F.map.isVideoTexture === !0 && Ln.getTransfer(F.map.colorSpace) === Vn,
      premultipliedAlpha: F.premultipliedAlpha,
      doubleSided: F.side === ks,
      flipSided: F.side === Dr,
      useDepthPacking: F.depthPacking >= 0,
      depthPacking: F.depthPacking || 0,
      index0AttributeName: F.index0AttributeName,
      extensionClipCullDistance: bn && F.extensions.clipCullDistance === !0 && n.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: bn && F.extensions.multiDraw === !0 && n.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: n.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: F.customProgramCacheKey()
    };
    return gn.vertexUv1s = h.has(1), gn.vertexUv2s = h.has(2), gn.vertexUv3s = h.has(3), h.clear(), gn;
  }
  function E(F) {
    const N = [];
    if (F.shaderID ? N.push(F.shaderID) : (N.push(F.customVertexShaderID), N.push(F.customFragmentShaderID)), F.defines !== void 0)
      for (const X in F.defines)
        N.push(X), N.push(F.defines[X]);
    return F.isRawShaderMaterial === !1 && (L(N, F), C(N, F), N.push(s.outputColorSpace)), N.push(F.customProgramCacheKey), N.join();
  }
  function L(F, N) {
    F.push(N.precision), F.push(N.outputColorSpace), F.push(N.envMapMode), F.push(N.envMapCubeUVHeight), F.push(N.mapUv), F.push(N.alphaMapUv), F.push(N.lightMapUv), F.push(N.aoMapUv), F.push(N.bumpMapUv), F.push(N.normalMapUv), F.push(N.displacementMapUv), F.push(N.emissiveMapUv), F.push(N.metalnessMapUv), F.push(N.roughnessMapUv), F.push(N.anisotropyMapUv), F.push(N.clearcoatMapUv), F.push(N.clearcoatNormalMapUv), F.push(N.clearcoatRoughnessMapUv), F.push(N.iridescenceMapUv), F.push(N.iridescenceThicknessMapUv), F.push(N.sheenColorMapUv), F.push(N.sheenRoughnessMapUv), F.push(N.specularMapUv), F.push(N.specularColorMapUv), F.push(N.specularIntensityMapUv), F.push(N.transmissionMapUv), F.push(N.thicknessMapUv), F.push(N.combine), F.push(N.fogExp2), F.push(N.sizeAttenuation), F.push(N.morphTargetsCount), F.push(N.morphAttributeCount), F.push(N.numDirLights), F.push(N.numPointLights), F.push(N.numSpotLights), F.push(N.numSpotLightMaps), F.push(N.numHemiLights), F.push(N.numRectAreaLights), F.push(N.numDirLightShadows), F.push(N.numPointLightShadows), F.push(N.numSpotLightShadows), F.push(N.numSpotLightShadowsWithMaps), F.push(N.numLightProbes), F.push(N.shadowMapType), F.push(N.toneMapping), F.push(N.numClippingPlanes), F.push(N.numClipIntersection), F.push(N.depthPacking);
  }
  function C(F, N) {
    f.disableAll(), N.supportsVertexTextures && f.enable(0), N.instancing && f.enable(1), N.instancingColor && f.enable(2), N.instancingMorph && f.enable(3), N.matcap && f.enable(4), N.envMap && f.enable(5), N.normalMapObjectSpace && f.enable(6), N.normalMapTangentSpace && f.enable(7), N.clearcoat && f.enable(8), N.iridescence && f.enable(9), N.alphaTest && f.enable(10), N.vertexColors && f.enable(11), N.vertexAlphas && f.enable(12), N.vertexUv1s && f.enable(13), N.vertexUv2s && f.enable(14), N.vertexUv3s && f.enable(15), N.vertexTangents && f.enable(16), N.anisotropy && f.enable(17), N.alphaHash && f.enable(18), N.batching && f.enable(19), F.push(f.mask), f.disableAll(), N.fog && f.enable(0), N.useFog && f.enable(1), N.flatShading && f.enable(2), N.logarithmicDepthBuffer && f.enable(3), N.skinning && f.enable(4), N.morphTargets && f.enable(5), N.morphNormals && f.enable(6), N.morphColors && f.enable(7), N.premultipliedAlpha && f.enable(8), N.shadowMapEnabled && f.enable(9), N.useLegacyLights && f.enable(10), N.doubleSided && f.enable(11), N.flipSided && f.enable(12), N.useDepthPacking && f.enable(13), N.dithering && f.enable(14), N.transmission && f.enable(15), N.sheen && f.enable(16), N.opaque && f.enable(17), N.pointsUvs && f.enable(18), N.decodeVideoTexture && f.enable(19), N.alphaToCoverage && f.enable(20), F.push(f.mask);
  }
  function U(F) {
    const N = T[F.type];
    let X;
    if (N) {
      const K = ms[N];
      X = cA.clone(K.uniforms);
    } else
      X = F.uniforms;
    return X;
  }
  function Y(F, N) {
    let X;
    for (let K = 0, J = g.length; K < J; K++) {
      const ae = g[K];
      if (ae.cacheKey === N) {
        X = ae, ++X.usedTimes;
        break;
      }
    }
    return X === void 0 && (X = new jI(s, N, F, o), g.push(X)), X;
  }
  function B(F) {
    if (--F.usedTimes === 0) {
      const N = g.indexOf(F);
      g[N] = g[g.length - 1], g.pop(), F.destroy();
    }
  }
  function H(F) {
    p.remove(F);
  }
  function k() {
    p.dispose();
  }
  return {
    getParameters: b,
    getProgramCacheKey: E,
    getUniforms: U,
    acquireProgram: Y,
    releaseProgram: B,
    releaseShaderCache: H,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: g,
    dispose: k
  };
}
function $I() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(o) {
    let c = s.get(o);
    return c === void 0 && (c = {}, s.set(o, c)), c;
  }
  function t(o) {
    s.delete(o);
  }
  function n(o, c, f) {
    s.get(o)[c] = f;
  }
  function r() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    remove: t,
    update: n,
    dispose: r
  };
}
function eO(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.material.id !== e.material.id ? s.material.id - e.material.id : s.z !== e.z ? s.z - e.z : s.id - e.id;
}
function UT(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.z !== e.z ? e.z - s.z : s.id - e.id;
}
function IT() {
  const s = [];
  let e = 0;
  const t = [], n = [], r = [];
  function o() {
    e = 0, t.length = 0, n.length = 0, r.length = 0;
  }
  function c(_, x, M, T, R, b) {
    let E = s[e];
    return E === void 0 ? (E = {
      id: _.id,
      object: _,
      geometry: x,
      material: M,
      groupOrder: T,
      renderOrder: _.renderOrder,
      z: R,
      group: b
    }, s[e] = E) : (E.id = _.id, E.object = _, E.geometry = x, E.material = M, E.groupOrder = T, E.renderOrder = _.renderOrder, E.z = R, E.group = b), e++, E;
  }
  function f(_, x, M, T, R, b) {
    const E = c(_, x, M, T, R, b);
    M.transmission > 0 ? n.push(E) : M.transparent === !0 ? r.push(E) : t.push(E);
  }
  function p(_, x, M, T, R, b) {
    const E = c(_, x, M, T, R, b);
    M.transmission > 0 ? n.unshift(E) : M.transparent === !0 ? r.unshift(E) : t.unshift(E);
  }
  function h(_, x) {
    t.length > 1 && t.sort(_ || eO), n.length > 1 && n.sort(x || UT), r.length > 1 && r.sort(x || UT);
  }
  function g() {
    for (let _ = e, x = s.length; _ < x; _++) {
      const M = s[_];
      if (M.id === null)
        break;
      M.id = null, M.object = null, M.geometry = null, M.material = null, M.group = null;
    }
  }
  return {
    opaque: t,
    transmissive: n,
    transparent: r,
    init: o,
    push: f,
    unshift: p,
    finish: g,
    sort: h
  };
}
function tO() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(n, r) {
    const o = s.get(n);
    let c;
    return o === void 0 ? (c = new IT(), s.set(n, [c])) : r >= o.length ? (c = new IT(), o.push(c)) : c = o[r], c;
  }
  function t() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: t
  };
}
function nO() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            direction: new q(),
            color: new mt()
          };
          break;
        case "SpotLight":
          t = {
            position: new q(),
            direction: new q(),
            color: new mt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          t = {
            position: new q(),
            color: new mt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          t = {
            direction: new q(),
            skyColor: new mt(),
            groundColor: new mt()
          };
          break;
        case "RectAreaLight":
          t = {
            color: new mt(),
            position: new q(),
            halfWidth: new q(),
            halfHeight: new q()
          };
          break;
      }
      return s[e.id] = t, t;
    }
  };
}
function iO() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let t;
      switch (e.type) {
        case "DirectionalLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De()
          };
          break;
        case "SpotLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De()
          };
          break;
        case "PointLight":
          t = {
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return s[e.id] = t, t;
    }
  };
}
let rO = 0;
function aO(s, e) {
  return (e.castShadow ? 2 : 0) - (s.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (s.map ? 1 : 0);
}
function sO(s) {
  const e = new nO(), t = iO(), n = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let h = 0; h < 9; h++)
    n.probe.push(new q());
  const r = new q(), o = new Ht(), c = new Ht();
  function f(h, g) {
    let _ = 0, x = 0, M = 0;
    for (let X = 0; X < 9; X++)
      n.probe[X].set(0, 0, 0);
    let T = 0, R = 0, b = 0, E = 0, L = 0, C = 0, U = 0, Y = 0, B = 0, H = 0, k = 0;
    h.sort(aO);
    const F = g === !0 ? Math.PI : 1;
    for (let X = 0, K = h.length; X < K; X++) {
      const J = h[X], ae = J.color, _e = J.intensity, Me = J.distance, Fe = J.shadow && J.shadow.map ? J.shadow.map.texture : null;
      if (J.isAmbientLight)
        _ += ae.r * _e * F, x += ae.g * _e * F, M += ae.b * _e * F;
      else if (J.isLightProbe) {
        for (let Q = 0; Q < 9; Q++)
          n.probe[Q].addScaledVector(J.sh.coefficients[Q], _e);
        k++;
      } else if (J.isDirectionalLight) {
        const Q = e.get(J);
        if (Q.color.copy(J.color).multiplyScalar(J.intensity * F), J.castShadow) {
          const ue = J.shadow, ne = t.get(J);
          ne.shadowBias = ue.bias, ne.shadowNormalBias = ue.normalBias, ne.shadowRadius = ue.radius, ne.shadowMapSize = ue.mapSize, n.directionalShadow[T] = ne, n.directionalShadowMap[T] = Fe, n.directionalShadowMatrix[T] = J.shadow.matrix, C++;
        }
        n.directional[T] = Q, T++;
      } else if (J.isSpotLight) {
        const Q = e.get(J);
        Q.position.setFromMatrixPosition(J.matrixWorld), Q.color.copy(ae).multiplyScalar(_e * F), Q.distance = Me, Q.coneCos = Math.cos(J.angle), Q.penumbraCos = Math.cos(J.angle * (1 - J.penumbra)), Q.decay = J.decay, n.spot[b] = Q;
        const ue = J.shadow;
        if (J.map && (n.spotLightMap[B] = J.map, B++, ue.updateMatrices(J), J.castShadow && H++), n.spotLightMatrix[b] = ue.matrix, J.castShadow) {
          const ne = t.get(J);
          ne.shadowBias = ue.bias, ne.shadowNormalBias = ue.normalBias, ne.shadowRadius = ue.radius, ne.shadowMapSize = ue.mapSize, n.spotShadow[b] = ne, n.spotShadowMap[b] = Fe, Y++;
        }
        b++;
      } else if (J.isRectAreaLight) {
        const Q = e.get(J);
        Q.color.copy(ae).multiplyScalar(_e), Q.halfWidth.set(J.width * 0.5, 0, 0), Q.halfHeight.set(0, J.height * 0.5, 0), n.rectArea[E] = Q, E++;
      } else if (J.isPointLight) {
        const Q = e.get(J);
        if (Q.color.copy(J.color).multiplyScalar(J.intensity * F), Q.distance = J.distance, Q.decay = J.decay, J.castShadow) {
          const ue = J.shadow, ne = t.get(J);
          ne.shadowBias = ue.bias, ne.shadowNormalBias = ue.normalBias, ne.shadowRadius = ue.radius, ne.shadowMapSize = ue.mapSize, ne.shadowCameraNear = ue.camera.near, ne.shadowCameraFar = ue.camera.far, n.pointShadow[R] = ne, n.pointShadowMap[R] = Fe, n.pointShadowMatrix[R] = J.shadow.matrix, U++;
        }
        n.point[R] = Q, R++;
      } else if (J.isHemisphereLight) {
        const Q = e.get(J);
        Q.skyColor.copy(J.color).multiplyScalar(_e * F), Q.groundColor.copy(J.groundColor).multiplyScalar(_e * F), n.hemi[L] = Q, L++;
      }
    }
    E > 0 && (s.has("OES_texture_float_linear") === !0 ? (n.rectAreaLTC1 = at.LTC_FLOAT_1, n.rectAreaLTC2 = at.LTC_FLOAT_2) : (n.rectAreaLTC1 = at.LTC_HALF_1, n.rectAreaLTC2 = at.LTC_HALF_2)), n.ambient[0] = _, n.ambient[1] = x, n.ambient[2] = M;
    const N = n.hash;
    (N.directionalLength !== T || N.pointLength !== R || N.spotLength !== b || N.rectAreaLength !== E || N.hemiLength !== L || N.numDirectionalShadows !== C || N.numPointShadows !== U || N.numSpotShadows !== Y || N.numSpotMaps !== B || N.numLightProbes !== k) && (n.directional.length = T, n.spot.length = b, n.rectArea.length = E, n.point.length = R, n.hemi.length = L, n.directionalShadow.length = C, n.directionalShadowMap.length = C, n.pointShadow.length = U, n.pointShadowMap.length = U, n.spotShadow.length = Y, n.spotShadowMap.length = Y, n.directionalShadowMatrix.length = C, n.pointShadowMatrix.length = U, n.spotLightMatrix.length = Y + B - H, n.spotLightMap.length = B, n.numSpotLightShadowsWithMaps = H, n.numLightProbes = k, N.directionalLength = T, N.pointLength = R, N.spotLength = b, N.rectAreaLength = E, N.hemiLength = L, N.numDirectionalShadows = C, N.numPointShadows = U, N.numSpotShadows = Y, N.numSpotMaps = B, N.numLightProbes = k, n.version = rO++);
  }
  function p(h, g) {
    let _ = 0, x = 0, M = 0, T = 0, R = 0;
    const b = g.matrixWorldInverse;
    for (let E = 0, L = h.length; E < L; E++) {
      const C = h[E];
      if (C.isDirectionalLight) {
        const U = n.directional[_];
        U.direction.setFromMatrixPosition(C.matrixWorld), r.setFromMatrixPosition(C.target.matrixWorld), U.direction.sub(r), U.direction.transformDirection(b), _++;
      } else if (C.isSpotLight) {
        const U = n.spot[M];
        U.position.setFromMatrixPosition(C.matrixWorld), U.position.applyMatrix4(b), U.direction.setFromMatrixPosition(C.matrixWorld), r.setFromMatrixPosition(C.target.matrixWorld), U.direction.sub(r), U.direction.transformDirection(b), M++;
      } else if (C.isRectAreaLight) {
        const U = n.rectArea[T];
        U.position.setFromMatrixPosition(C.matrixWorld), U.position.applyMatrix4(b), c.identity(), o.copy(C.matrixWorld), o.premultiply(b), c.extractRotation(o), U.halfWidth.set(C.width * 0.5, 0, 0), U.halfHeight.set(0, C.height * 0.5, 0), U.halfWidth.applyMatrix4(c), U.halfHeight.applyMatrix4(c), T++;
      } else if (C.isPointLight) {
        const U = n.point[x];
        U.position.setFromMatrixPosition(C.matrixWorld), U.position.applyMatrix4(b), x++;
      } else if (C.isHemisphereLight) {
        const U = n.hemi[R];
        U.direction.setFromMatrixPosition(C.matrixWorld), U.direction.transformDirection(b), R++;
      }
    }
  }
  return {
    setup: f,
    setupView: p,
    state: n
  };
}
function OT(s) {
  const e = new sO(s), t = [], n = [];
  function r() {
    t.length = 0, n.length = 0;
  }
  function o(g) {
    t.push(g);
  }
  function c(g) {
    n.push(g);
  }
  function f(g) {
    e.setup(t, g);
  }
  function p(g) {
    e.setupView(t, g);
  }
  return {
    init: r,
    state: {
      lightsArray: t,
      shadowsArray: n,
      lights: e,
      transmissionRenderTarget: null
    },
    setupLights: f,
    setupLightsView: p,
    pushLight: o,
    pushShadow: c
  };
}
function oO(s) {
  let e = /* @__PURE__ */ new WeakMap();
  function t(r, o = 0) {
    const c = e.get(r);
    let f;
    return c === void 0 ? (f = new OT(s), e.set(r, [f])) : o >= c.length ? (f = new OT(s), c.push(f)) : f = c[o], f;
  }
  function n() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: t,
    dispose: n
  };
}
class NS extends ir {
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = Yw, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class US extends ir {
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
const lO = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, uO = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function cO(s, e, t) {
  let n = new Fp();
  const r = new De(), o = new De(), c = new Pn(), f = new NS({ depthPacking: jw }), p = new US(), h = {}, g = t.maxTextureSize, _ = { [Oo]: Dr, [Dr]: Oo, [ks]: ks }, x = new gs({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new De() },
      radius: { value: 4 }
    },
    vertexShader: lO,
    fragmentShader: uO
  }), M = x.clone();
  M.defines.HORIZONTAL_PASS = 1;
  const T = new $t();
  T.setAttribute(
    "position",
    new Dn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const R = new Ti(T, x), b = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = Fg;
  let E = this.type;
  this.render = function(B, H, k) {
    if (b.enabled === !1 || b.autoUpdate === !1 && b.needsUpdate === !1 || B.length === 0)
      return;
    const F = s.getRenderTarget(), N = s.getActiveCubeFace(), X = s.getActiveMipmapLevel(), K = s.state;
    K.setBlending(Io), K.buffers.color.setClear(1, 1, 1, 1), K.buffers.depth.setTest(!0), K.setScissorTest(!1);
    const J = E !== ps && this.type === ps, ae = E === ps && this.type !== ps;
    for (let _e = 0, Me = B.length; _e < Me; _e++) {
      const Fe = B[_e], Q = Fe.shadow;
      if (Q === void 0) {
        console.warn("THREE.WebGLShadowMap:", Fe, "has no shadow.");
        continue;
      }
      if (Q.autoUpdate === !1 && Q.needsUpdate === !1)
        continue;
      r.copy(Q.mapSize);
      const ue = Q.getFrameExtents();
      if (r.multiply(ue), o.copy(Q.mapSize), (r.x > g || r.y > g) && (r.x > g && (o.x = Math.floor(g / ue.x), r.x = o.x * ue.x, Q.mapSize.x = o.x), r.y > g && (o.y = Math.floor(g / ue.y), r.y = o.y * ue.y, Q.mapSize.y = o.y)), Q.map === null || J === !0 || ae === !0) {
        const be = this.type !== ps ? { minFilter: ki, magFilter: ki } : {};
        Q.map !== null && Q.map.dispose(), Q.map = new vs(r.x, r.y, be), Q.map.texture.name = Fe.name + ".shadowMap", Q.camera.updateProjectionMatrix();
      }
      s.setRenderTarget(Q.map), s.clear();
      const ne = Q.getViewportCount();
      for (let be = 0; be < ne; be++) {
        const Oe = Q.getViewport(be);
        c.set(
          o.x * Oe.x,
          o.y * Oe.y,
          o.x * Oe.z,
          o.y * Oe.w
        ), K.viewport(c), Q.updateMatrices(Fe, be), n = Q.getFrustum(), U(H, k, Q.camera, Fe, this.type);
      }
      Q.isPointLightShadow !== !0 && this.type === ps && L(Q, k), Q.needsUpdate = !1;
    }
    E = this.type, b.needsUpdate = !1, s.setRenderTarget(F, N, X);
  };
  function L(B, H) {
    const k = e.update(R);
    x.defines.VSM_SAMPLES !== B.blurSamples && (x.defines.VSM_SAMPLES = B.blurSamples, M.defines.VSM_SAMPLES = B.blurSamples, x.needsUpdate = !0, M.needsUpdate = !0), B.mapPass === null && (B.mapPass = new vs(r.x, r.y)), x.uniforms.shadow_pass.value = B.map.texture, x.uniforms.resolution.value = B.mapSize, x.uniforms.radius.value = B.radius, s.setRenderTarget(B.mapPass), s.clear(), s.renderBufferDirect(H, null, k, x, R, null), M.uniforms.shadow_pass.value = B.mapPass.texture, M.uniforms.resolution.value = B.mapSize, M.uniforms.radius.value = B.radius, s.setRenderTarget(B.map), s.clear(), s.renderBufferDirect(H, null, k, M, R, null);
  }
  function C(B, H, k, F) {
    let N = null;
    const X = k.isPointLight === !0 ? B.customDistanceMaterial : B.customDepthMaterial;
    if (X !== void 0)
      N = X;
    else if (N = k.isPointLight === !0 ? p : f, s.localClippingEnabled && H.clipShadows === !0 && Array.isArray(H.clippingPlanes) && H.clippingPlanes.length !== 0 || H.displacementMap && H.displacementScale !== 0 || H.alphaMap && H.alphaTest > 0 || H.map && H.alphaTest > 0) {
      const K = N.uuid, J = H.uuid;
      let ae = h[K];
      ae === void 0 && (ae = {}, h[K] = ae);
      let _e = ae[J];
      _e === void 0 && (_e = N.clone(), ae[J] = _e, H.addEventListener("dispose", Y)), N = _e;
    }
    if (N.visible = H.visible, N.wireframe = H.wireframe, F === ps ? N.side = H.shadowSide !== null ? H.shadowSide : H.side : N.side = H.shadowSide !== null ? H.shadowSide : _[H.side], N.alphaMap = H.alphaMap, N.alphaTest = H.alphaTest, N.map = H.map, N.clipShadows = H.clipShadows, N.clippingPlanes = H.clippingPlanes, N.clipIntersection = H.clipIntersection, N.displacementMap = H.displacementMap, N.displacementScale = H.displacementScale, N.displacementBias = H.displacementBias, N.wireframeLinewidth = H.wireframeLinewidth, N.linewidth = H.linewidth, k.isPointLight === !0 && N.isMeshDistanceMaterial === !0) {
      const K = s.properties.get(N);
      K.light = k;
    }
    return N;
  }
  function U(B, H, k, F, N) {
    if (B.visible === !1)
      return;
    if (B.layers.test(H.layers) && (B.isMesh || B.isLine || B.isPoints) && (B.castShadow || B.receiveShadow && N === ps) && (!B.frustumCulled || n.intersectsObject(B))) {
      B.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse, B.matrixWorld);
      const J = e.update(B), ae = B.material;
      if (Array.isArray(ae)) {
        const _e = J.groups;
        for (let Me = 0, Fe = _e.length; Me < Fe; Me++) {
          const Q = _e[Me], ue = ae[Q.materialIndex];
          if (ue && ue.visible) {
            const ne = C(B, ue, F, N);
            B.onBeforeShadow(s, B, H, k, J, ne, Q), s.renderBufferDirect(k, null, J, ne, B, Q), B.onAfterShadow(s, B, H, k, J, ne, Q);
          }
        }
      } else if (ae.visible) {
        const _e = C(B, ae, F, N);
        B.onBeforeShadow(s, B, H, k, J, _e, null), s.renderBufferDirect(k, null, J, _e, B, null), B.onAfterShadow(s, B, H, k, J, _e, null);
      }
    }
    const K = B.children;
    for (let J = 0, ae = K.length; J < ae; J++)
      U(K[J], H, k, F, N);
  }
  function Y(B) {
    B.target.removeEventListener("dispose", Y);
    for (const k in h) {
      const F = h[k], N = B.target.uuid;
      N in F && (F[N].dispose(), delete F[N]);
    }
  }
}
function fO(s) {
  function e() {
    let G = !1;
    const de = new Pn();
    let qe = null;
    const Ke = new Pn(0, 0, 0, 0);
    return {
      setMask: function(Ze) {
        qe !== Ze && !G && (s.colorMask(Ze, Ze, Ze, Ze), qe = Ze);
      },
      setLocked: function(Ze) {
        G = Ze;
      },
      setClear: function(Ze, bn, an, gn, si) {
        si === !0 && (Ze *= gn, bn *= gn, an *= gn), de.set(Ze, bn, an, gn), Ke.equals(de) === !1 && (s.clearColor(Ze, bn, an, gn), Ke.copy(de));
      },
      reset: function() {
        G = !1, qe = null, Ke.set(-1, 0, 0, 0);
      }
    };
  }
  function t() {
    let G = !1, de = null, qe = null, Ke = null;
    return {
      setTest: function(Ze) {
        Ze ? Ye(s.DEPTH_TEST) : Ge(s.DEPTH_TEST);
      },
      setMask: function(Ze) {
        de !== Ze && !G && (s.depthMask(Ze), de = Ze);
      },
      setFunc: function(Ze) {
        if (qe !== Ze) {
          switch (Ze) {
            case _w:
              s.depthFunc(s.NEVER);
              break;
            case xw:
              s.depthFunc(s.ALWAYS);
              break;
            case Sw:
              s.depthFunc(s.LESS);
              break;
            case cp:
              s.depthFunc(s.LEQUAL);
              break;
            case Mw:
              s.depthFunc(s.EQUAL);
              break;
            case Ew:
              s.depthFunc(s.GEQUAL);
              break;
            case Tw:
              s.depthFunc(s.GREATER);
              break;
            case bw:
              s.depthFunc(s.NOTEQUAL);
              break;
            default:
              s.depthFunc(s.LEQUAL);
          }
          qe = Ze;
        }
      },
      setLocked: function(Ze) {
        G = Ze;
      },
      setClear: function(Ze) {
        Ke !== Ze && (s.clearDepth(Ze), Ke = Ze);
      },
      reset: function() {
        G = !1, de = null, qe = null, Ke = null;
      }
    };
  }
  function n() {
    let G = !1, de = null, qe = null, Ke = null, Ze = null, bn = null, an = null, gn = null, si = null;
    return {
      setTest: function(_t) {
        G || (_t ? Ye(s.STENCIL_TEST) : Ge(s.STENCIL_TEST));
      },
      setMask: function(_t) {
        de !== _t && !G && (s.stencilMask(_t), de = _t);
      },
      setFunc: function(_t, Yn, fi) {
        (qe !== _t || Ke !== Yn || Ze !== fi) && (s.stencilFunc(_t, Yn, fi), qe = _t, Ke = Yn, Ze = fi);
      },
      setOp: function(_t, Yn, fi) {
        (bn !== _t || an !== Yn || gn !== fi) && (s.stencilOp(_t, Yn, fi), bn = _t, an = Yn, gn = fi);
      },
      setLocked: function(_t) {
        G = _t;
      },
      setClear: function(_t) {
        si !== _t && (s.clearStencil(_t), si = _t);
      },
      reset: function() {
        G = !1, de = null, qe = null, Ke = null, Ze = null, bn = null, an = null, gn = null, si = null;
      }
    };
  }
  const r = new e(), o = new t(), c = new n(), f = /* @__PURE__ */ new WeakMap(), p = /* @__PURE__ */ new WeakMap();
  let h = {}, g = {}, _ = /* @__PURE__ */ new WeakMap(), x = [], M = null, T = !1, R = null, b = null, E = null, L = null, C = null, U = null, Y = null, B = new mt(0, 0, 0), H = 0, k = !1, F = null, N = null, X = null, K = null, J = null;
  const ae = s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let _e = !1, Me = 0;
  const Fe = s.getParameter(s.VERSION);
  Fe.indexOf("WebGL") !== -1 ? (Me = parseFloat(/^WebGL (\d)/.exec(Fe)[1]), _e = Me >= 1) : Fe.indexOf("OpenGL ES") !== -1 && (Me = parseFloat(/^OpenGL ES (\d)/.exec(Fe)[1]), _e = Me >= 2);
  let Q = null, ue = {};
  const ne = s.getParameter(s.SCISSOR_BOX), be = s.getParameter(s.VIEWPORT), Oe = new Pn().fromArray(ne), ht = new Pn().fromArray(be);
  function ve(G, de, qe, Ke) {
    const Ze = new Uint8Array(4), bn = s.createTexture();
    s.bindTexture(G, bn), s.texParameteri(G, s.TEXTURE_MIN_FILTER, s.NEAREST), s.texParameteri(G, s.TEXTURE_MAG_FILTER, s.NEAREST);
    for (let an = 0; an < qe; an++)
      G === s.TEXTURE_3D || G === s.TEXTURE_2D_ARRAY ? s.texImage3D(de, 0, s.RGBA, 1, 1, Ke, 0, s.RGBA, s.UNSIGNED_BYTE, Ze) : s.texImage2D(de + an, 0, s.RGBA, 1, 1, 0, s.RGBA, s.UNSIGNED_BYTE, Ze);
    return bn;
  }
  const Ue = {};
  Ue[s.TEXTURE_2D] = ve(s.TEXTURE_2D, s.TEXTURE_2D, 1), Ue[s.TEXTURE_CUBE_MAP] = ve(s.TEXTURE_CUBE_MAP, s.TEXTURE_CUBE_MAP_POSITIVE_X, 6), Ue[s.TEXTURE_2D_ARRAY] = ve(s.TEXTURE_2D_ARRAY, s.TEXTURE_2D_ARRAY, 1, 1), Ue[s.TEXTURE_3D] = ve(s.TEXTURE_3D, s.TEXTURE_3D, 1, 1), r.setClear(0, 0, 0, 1), o.setClear(1), c.setClear(0), Ye(s.DEPTH_TEST), o.setFunc(cp), Be(!1), Ve(Mx), Ye(s.CULL_FACE), Se(Io);
  function Ye(G) {
    h[G] !== !0 && (s.enable(G), h[G] = !0);
  }
  function Ge(G) {
    h[G] !== !1 && (s.disable(G), h[G] = !1);
  }
  function gt(G, de) {
    return g[G] !== de ? (s.bindFramebuffer(G, de), g[G] = de, G === s.DRAW_FRAMEBUFFER && (g[s.FRAMEBUFFER] = de), G === s.FRAMEBUFFER && (g[s.DRAW_FRAMEBUFFER] = de), !0) : !1;
  }
  function Pt(G, de) {
    let qe = x, Ke = !1;
    if (G) {
      qe = _.get(de), qe === void 0 && (qe = [], _.set(de, qe));
      const Ze = G.textures;
      if (qe.length !== Ze.length || qe[0] !== s.COLOR_ATTACHMENT0) {
        for (let bn = 0, an = Ze.length; bn < an; bn++)
          qe[bn] = s.COLOR_ATTACHMENT0 + bn;
        qe.length = Ze.length, Ke = !0;
      }
    } else
      qe[0] !== s.BACK && (qe[0] = s.BACK, Ke = !0);
    Ke && s.drawBuffers(qe);
  }
  function Dt(G) {
    return M !== G ? (s.useProgram(G), M = G, !0) : !1;
  }
  const ie = {
    [Wl]: s.FUNC_ADD,
    [nw]: s.FUNC_SUBTRACT,
    [iw]: s.FUNC_REVERSE_SUBTRACT
  };
  ie[rw] = s.MIN, ie[aw] = s.MAX;
  const Re = {
    [sw]: s.ZERO,
    [ow]: s.ONE,
    [lw]: s.SRC_COLOR,
    [Cg]: s.SRC_ALPHA,
    [pw]: s.SRC_ALPHA_SATURATE,
    [dw]: s.DST_COLOR,
    [cw]: s.DST_ALPHA,
    [uw]: s.ONE_MINUS_SRC_COLOR,
    [Lg]: s.ONE_MINUS_SRC_ALPHA,
    [hw]: s.ONE_MINUS_DST_COLOR,
    [fw]: s.ONE_MINUS_DST_ALPHA,
    [mw]: s.CONSTANT_COLOR,
    [vw]: s.ONE_MINUS_CONSTANT_COLOR,
    [gw]: s.CONSTANT_ALPHA,
    [yw]: s.ONE_MINUS_CONSTANT_ALPHA
  };
  function Se(G, de, qe, Ke, Ze, bn, an, gn, si, _t) {
    if (G === Io) {
      T === !0 && (Ge(s.BLEND), T = !1);
      return;
    }
    if (T === !1 && (Ye(s.BLEND), T = !0), G !== tw) {
      if (G !== R || _t !== k) {
        if ((b !== Wl || C !== Wl) && (s.blendEquation(s.FUNC_ADD), b = Wl, C = Wl), _t)
          switch (G) {
            case lc:
              s.blendFuncSeparate(s.ONE, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case Ex:
              s.blendFunc(s.ONE, s.ONE);
              break;
            case Tx:
              s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
              break;
            case bx:
              s.blendFuncSeparate(s.ZERO, s.SRC_COLOR, s.ZERO, s.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", G);
              break;
          }
        else
          switch (G) {
            case lc:
              s.blendFuncSeparate(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case Ex:
              s.blendFunc(s.SRC_ALPHA, s.ONE);
              break;
            case Tx:
              s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
              break;
            case bx:
              s.blendFunc(s.ZERO, s.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", G);
              break;
          }
        E = null, L = null, U = null, Y = null, B.set(0, 0, 0), H = 0, R = G, k = _t;
      }
      return;
    }
    Ze = Ze || de, bn = bn || qe, an = an || Ke, (de !== b || Ze !== C) && (s.blendEquationSeparate(ie[de], ie[Ze]), b = de, C = Ze), (qe !== E || Ke !== L || bn !== U || an !== Y) && (s.blendFuncSeparate(Re[qe], Re[Ke], Re[bn], Re[an]), E = qe, L = Ke, U = bn, Y = an), (gn.equals(B) === !1 || si !== H) && (s.blendColor(gn.r, gn.g, gn.b, si), B.copy(gn), H = si), R = G, k = !1;
  }
  function He(G, de) {
    G.side === ks ? Ge(s.CULL_FACE) : Ye(s.CULL_FACE);
    let qe = G.side === Dr;
    de && (qe = !qe), Be(qe), G.blending === lc && G.transparent === !1 ? Se(Io) : Se(G.blending, G.blendEquation, G.blendSrc, G.blendDst, G.blendEquationAlpha, G.blendSrcAlpha, G.blendDstAlpha, G.blendColor, G.blendAlpha, G.premultipliedAlpha), o.setFunc(G.depthFunc), o.setTest(G.depthTest), o.setMask(G.depthWrite), r.setMask(G.colorWrite);
    const Ke = G.stencilWrite;
    c.setTest(Ke), Ke && (c.setMask(G.stencilWriteMask), c.setFunc(G.stencilFunc, G.stencilRef, G.stencilFuncMask), c.setOp(G.stencilFail, G.stencilZFail, G.stencilZPass)), O(G.polygonOffset, G.polygonOffsetFactor, G.polygonOffsetUnits), G.alphaToCoverage === !0 ? Ye(s.SAMPLE_ALPHA_TO_COVERAGE) : Ge(s.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Be(G) {
    F !== G && (G ? s.frontFace(s.CW) : s.frontFace(s.CCW), F = G);
  }
  function Ve(G) {
    G !== Kb ? (Ye(s.CULL_FACE), G !== N && (G === Mx ? s.cullFace(s.BACK) : G === $b ? s.cullFace(s.FRONT) : s.cullFace(s.FRONT_AND_BACK))) : Ge(s.CULL_FACE), N = G;
  }
  function W(G) {
    G !== X && (_e && s.lineWidth(G), X = G);
  }
  function O(G, de, qe) {
    G ? (Ye(s.POLYGON_OFFSET_FILL), (K !== de || J !== qe) && (s.polygonOffset(de, qe), K = de, J = qe)) : Ge(s.POLYGON_OFFSET_FILL);
  }
  function se(G) {
    G ? Ye(s.SCISSOR_TEST) : Ge(s.SCISSOR_TEST);
  }
  function xe(G) {
    G === void 0 && (G = s.TEXTURE0 + ae - 1), Q !== G && (s.activeTexture(G), Q = G);
  }
  function Ae(G, de, qe) {
    qe === void 0 && (Q === null ? qe = s.TEXTURE0 + ae - 1 : qe = Q);
    let Ke = ue[qe];
    Ke === void 0 && (Ke = { type: void 0, texture: void 0 }, ue[qe] = Ke), (Ke.type !== G || Ke.texture !== de) && (Q !== qe && (s.activeTexture(qe), Q = qe), s.bindTexture(G, de || Ue[G]), Ke.type = G, Ke.texture = de);
  }
  function Pe() {
    const G = ue[Q];
    G !== void 0 && G.type !== void 0 && (s.bindTexture(G.type, null), G.type = void 0, G.texture = void 0);
  }
  function st() {
    try {
      s.compressedTexImage2D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Ne() {
    try {
      s.compressedTexImage3D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function St() {
    try {
      s.texSubImage2D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function bt() {
    try {
      s.texSubImage3D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Je() {
    try {
      s.compressedTexSubImage2D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ft() {
    try {
      s.compressedTexSubImage3D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Ft() {
    try {
      s.texStorage2D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function vt() {
    try {
      s.texStorage3D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Te() {
    try {
      s.texImage2D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function Xe() {
    try {
      s.texImage3D.apply(s, arguments);
    } catch (G) {
      console.error("THREE.WebGLState:", G);
    }
  }
  function ut(G) {
    Oe.equals(G) === !1 && (s.scissor(G.x, G.y, G.z, G.w), Oe.copy(G));
  }
  function wt(G) {
    ht.equals(G) === !1 && (s.viewport(G.x, G.y, G.z, G.w), ht.copy(G));
  }
  function et(G, de) {
    let qe = p.get(de);
    qe === void 0 && (qe = /* @__PURE__ */ new WeakMap(), p.set(de, qe));
    let Ke = qe.get(G);
    Ke === void 0 && (Ke = s.getUniformBlockIndex(de, G.name), qe.set(G, Ke));
  }
  function en(G, de) {
    const Ke = p.get(de).get(G);
    f.get(de) !== Ke && (s.uniformBlockBinding(de, Ke, G.__bindingPointIndex), f.set(de, Ke));
  }
  function ot() {
    s.disable(s.BLEND), s.disable(s.CULL_FACE), s.disable(s.DEPTH_TEST), s.disable(s.POLYGON_OFFSET_FILL), s.disable(s.SCISSOR_TEST), s.disable(s.STENCIL_TEST), s.disable(s.SAMPLE_ALPHA_TO_COVERAGE), s.blendEquation(s.FUNC_ADD), s.blendFunc(s.ONE, s.ZERO), s.blendFuncSeparate(s.ONE, s.ZERO, s.ONE, s.ZERO), s.blendColor(0, 0, 0, 0), s.colorMask(!0, !0, !0, !0), s.clearColor(0, 0, 0, 0), s.depthMask(!0), s.depthFunc(s.LESS), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(s.ALWAYS, 0, 4294967295), s.stencilOp(s.KEEP, s.KEEP, s.KEEP), s.clearStencil(0), s.cullFace(s.BACK), s.frontFace(s.CCW), s.polygonOffset(0, 0), s.activeTexture(s.TEXTURE0), s.bindFramebuffer(s.FRAMEBUFFER, null), s.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), s.bindFramebuffer(s.READ_FRAMEBUFFER, null), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), h = {}, Q = null, ue = {}, g = {}, _ = /* @__PURE__ */ new WeakMap(), x = [], M = null, T = !1, R = null, b = null, E = null, L = null, C = null, U = null, Y = null, B = new mt(0, 0, 0), H = 0, k = !1, F = null, N = null, X = null, K = null, J = null, Oe.set(0, 0, s.canvas.width, s.canvas.height), ht.set(0, 0, s.canvas.width, s.canvas.height), r.reset(), o.reset(), c.reset();
  }
  return {
    buffers: {
      color: r,
      depth: o,
      stencil: c
    },
    enable: Ye,
    disable: Ge,
    bindFramebuffer: gt,
    drawBuffers: Pt,
    useProgram: Dt,
    setBlending: Se,
    setMaterial: He,
    setFlipSided: Be,
    setCullFace: Ve,
    setLineWidth: W,
    setPolygonOffset: O,
    setScissorTest: se,
    activeTexture: xe,
    bindTexture: Ae,
    unbindTexture: Pe,
    compressedTexImage2D: st,
    compressedTexImage3D: Ne,
    texImage2D: Te,
    texImage3D: Xe,
    updateUBOMapping: et,
    uniformBlockBinding: en,
    texStorage2D: Ft,
    texStorage3D: vt,
    texSubImage2D: St,
    texSubImage3D: bt,
    compressedTexSubImage2D: Je,
    compressedTexSubImage3D: ft,
    scissor: ut,
    viewport: wt,
    reset: ot
  };
}
function dO(s, e, t, n, r, o, c) {
  const f = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, p = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), h = new De(), g = /* @__PURE__ */ new WeakMap();
  let _;
  const x = /* @__PURE__ */ new WeakMap();
  let M = !1;
  try {
    M = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function T(W, O) {
    return M ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(W, O)
    ) : Tp("canvas");
  }
  function R(W, O, se) {
    let xe = 1;
    const Ae = Ve(W);
    if ((Ae.width > se || Ae.height > se) && (xe = se / Math.max(Ae.width, Ae.height)), xe < 1)
      if (typeof HTMLImageElement < "u" && W instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && W instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && W instanceof ImageBitmap || typeof VideoFrame < "u" && W instanceof VideoFrame) {
        const Pe = Math.floor(xe * Ae.width), st = Math.floor(xe * Ae.height);
        _ === void 0 && (_ = T(Pe, st));
        const Ne = O ? T(Pe, st) : _;
        return Ne.width = Pe, Ne.height = st, Ne.getContext("2d").drawImage(W, 0, 0, Pe, st), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + Ae.width + "x" + Ae.height + ") to (" + Pe + "x" + st + ")."), Ne;
      } else
        return "data" in W && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + Ae.width + "x" + Ae.height + ")."), W;
    return W;
  }
  function b(W) {
    return W.generateMipmaps && W.minFilter !== ki && W.minFilter !== Ei;
  }
  function E(W) {
    s.generateMipmap(W);
  }
  function L(W, O, se, xe, Ae = !1) {
    if (W !== null) {
      if (s[W] !== void 0)
        return s[W];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + W + "'");
    }
    let Pe = O;
    if (O === s.RED && (se === s.FLOAT && (Pe = s.R32F), se === s.HALF_FLOAT && (Pe = s.R16F), se === s.UNSIGNED_BYTE && (Pe = s.R8)), O === s.RED_INTEGER && (se === s.UNSIGNED_BYTE && (Pe = s.R8UI), se === s.UNSIGNED_SHORT && (Pe = s.R16UI), se === s.UNSIGNED_INT && (Pe = s.R32UI), se === s.BYTE && (Pe = s.R8I), se === s.SHORT && (Pe = s.R16I), se === s.INT && (Pe = s.R32I)), O === s.RG && (se === s.FLOAT && (Pe = s.RG32F), se === s.HALF_FLOAT && (Pe = s.RG16F), se === s.UNSIGNED_BYTE && (Pe = s.RG8)), O === s.RG_INTEGER && (se === s.UNSIGNED_BYTE && (Pe = s.RG8UI), se === s.UNSIGNED_SHORT && (Pe = s.RG16UI), se === s.UNSIGNED_INT && (Pe = s.RG32UI), se === s.BYTE && (Pe = s.RG8I), se === s.SHORT && (Pe = s.RG16I), se === s.INT && (Pe = s.RG32I)), O === s.RGB && se === s.UNSIGNED_INT_5_9_9_9_REV && (Pe = s.RGB9_E5), O === s.RGBA) {
      const st = Ae ? _p : Ln.getTransfer(xe);
      se === s.FLOAT && (Pe = s.RGBA32F), se === s.HALF_FLOAT && (Pe = s.RGBA16F), se === s.UNSIGNED_BYTE && (Pe = st === Vn ? s.SRGB8_ALPHA8 : s.RGBA8), se === s.UNSIGNED_SHORT_4_4_4_4 && (Pe = s.RGBA4), se === s.UNSIGNED_SHORT_5_5_5_1 && (Pe = s.RGB5_A1);
    }
    return (Pe === s.R16F || Pe === s.R32F || Pe === s.RG16F || Pe === s.RG32F || Pe === s.RGBA16F || Pe === s.RGBA32F) && e.get("EXT_color_buffer_float"), Pe;
  }
  function C(W, O) {
    return b(W) === !0 || W.isFramebufferTexture && W.minFilter !== ki && W.minFilter !== Ei ? Math.log2(Math.max(O.width, O.height)) + 1 : W.mipmaps !== void 0 && W.mipmaps.length > 0 ? W.mipmaps.length : W.isCompressedTexture && Array.isArray(W.image) ? O.mipmaps.length : 1;
  }
  function U(W) {
    const O = W.target;
    O.removeEventListener("dispose", U), B(O), O.isVideoTexture && g.delete(O);
  }
  function Y(W) {
    const O = W.target;
    O.removeEventListener("dispose", Y), k(O);
  }
  function B(W) {
    const O = n.get(W);
    if (O.__webglInit === void 0)
      return;
    const se = W.source, xe = x.get(se);
    if (xe) {
      const Ae = xe[O.__cacheKey];
      Ae.usedTimes--, Ae.usedTimes === 0 && H(W), Object.keys(xe).length === 0 && x.delete(se);
    }
    n.remove(W);
  }
  function H(W) {
    const O = n.get(W);
    s.deleteTexture(O.__webglTexture);
    const se = W.source, xe = x.get(se);
    delete xe[O.__cacheKey], c.memory.textures--;
  }
  function k(W) {
    const O = n.get(W);
    if (W.depthTexture && W.depthTexture.dispose(), W.isWebGLCubeRenderTarget)
      for (let xe = 0; xe < 6; xe++) {
        if (Array.isArray(O.__webglFramebuffer[xe]))
          for (let Ae = 0; Ae < O.__webglFramebuffer[xe].length; Ae++)
            s.deleteFramebuffer(O.__webglFramebuffer[xe][Ae]);
        else
          s.deleteFramebuffer(O.__webglFramebuffer[xe]);
        O.__webglDepthbuffer && s.deleteRenderbuffer(O.__webglDepthbuffer[xe]);
      }
    else {
      if (Array.isArray(O.__webglFramebuffer))
        for (let xe = 0; xe < O.__webglFramebuffer.length; xe++)
          s.deleteFramebuffer(O.__webglFramebuffer[xe]);
      else
        s.deleteFramebuffer(O.__webglFramebuffer);
      if (O.__webglDepthbuffer && s.deleteRenderbuffer(O.__webglDepthbuffer), O.__webglMultisampledFramebuffer && s.deleteFramebuffer(O.__webglMultisampledFramebuffer), O.__webglColorRenderbuffer)
        for (let xe = 0; xe < O.__webglColorRenderbuffer.length; xe++)
          O.__webglColorRenderbuffer[xe] && s.deleteRenderbuffer(O.__webglColorRenderbuffer[xe]);
      O.__webglDepthRenderbuffer && s.deleteRenderbuffer(O.__webglDepthRenderbuffer);
    }
    const se = W.textures;
    for (let xe = 0, Ae = se.length; xe < Ae; xe++) {
      const Pe = n.get(se[xe]);
      Pe.__webglTexture && (s.deleteTexture(Pe.__webglTexture), c.memory.textures--), n.remove(se[xe]);
    }
    n.remove(W);
  }
  let F = 0;
  function N() {
    F = 0;
  }
  function X() {
    const W = F;
    return W >= r.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + W + " texture units while this GPU supports only " + r.maxTextures), F += 1, W;
  }
  function K(W) {
    const O = [];
    return O.push(W.wrapS), O.push(W.wrapT), O.push(W.wrapR || 0), O.push(W.magFilter), O.push(W.minFilter), O.push(W.anisotropy), O.push(W.internalFormat), O.push(W.format), O.push(W.type), O.push(W.generateMipmaps), O.push(W.premultiplyAlpha), O.push(W.flipY), O.push(W.unpackAlignment), O.push(W.colorSpace), O.join();
  }
  function J(W, O) {
    const se = n.get(W);
    if (W.isVideoTexture && He(W), W.isRenderTargetTexture === !1 && W.version > 0 && se.__version !== W.version) {
      const xe = W.image;
      if (xe === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (xe.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        Oe(se, W, O);
        return;
      }
    }
    t.bindTexture(s.TEXTURE_2D, se.__webglTexture, s.TEXTURE0 + O);
  }
  function ae(W, O) {
    const se = n.get(W);
    if (W.version > 0 && se.__version !== W.version) {
      Oe(se, W, O);
      return;
    }
    t.bindTexture(s.TEXTURE_2D_ARRAY, se.__webglTexture, s.TEXTURE0 + O);
  }
  function _e(W, O) {
    const se = n.get(W);
    if (W.version > 0 && se.__version !== W.version) {
      Oe(se, W, O);
      return;
    }
    t.bindTexture(s.TEXTURE_3D, se.__webglTexture, s.TEXTURE0 + O);
  }
  function Me(W, O) {
    const se = n.get(W);
    if (W.version > 0 && se.__version !== W.version) {
      ht(se, W, O);
      return;
    }
    t.bindTexture(s.TEXTURE_CUBE_MAP, se.__webglTexture, s.TEXTURE0 + O);
  }
  const Fe = {
    [hp]: s.REPEAT,
    [Ya]: s.CLAMP_TO_EDGE,
    [pp]: s.MIRRORED_REPEAT
  }, Q = {
    [ki]: s.NEAREST,
    [mS]: s.NEAREST_MIPMAP_NEAREST,
    [rd]: s.NEAREST_MIPMAP_LINEAR,
    [Ei]: s.LINEAR,
    [sp]: s.LINEAR_MIPMAP_NEAREST,
    [Gs]: s.LINEAR_MIPMAP_LINEAR
  }, ue = {
    [Jw]: s.NEVER,
    [nA]: s.ALWAYS,
    [Qw]: s.LESS,
    [wS]: s.LEQUAL,
    [Kw]: s.EQUAL,
    [tA]: s.GEQUAL,
    [$w]: s.GREATER,
    [eA]: s.NOTEQUAL
  };
  function ne(W, O) {
    if (O.type === ja && e.has("OES_texture_float_linear") === !1 && (O.magFilter === Ei || O.magFilter === sp || O.magFilter === rd || O.magFilter === Gs || O.minFilter === Ei || O.minFilter === sp || O.minFilter === rd || O.minFilter === Gs) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), s.texParameteri(W, s.TEXTURE_WRAP_S, Fe[O.wrapS]), s.texParameteri(W, s.TEXTURE_WRAP_T, Fe[O.wrapT]), (W === s.TEXTURE_3D || W === s.TEXTURE_2D_ARRAY) && s.texParameteri(W, s.TEXTURE_WRAP_R, Fe[O.wrapR]), s.texParameteri(W, s.TEXTURE_MAG_FILTER, Q[O.magFilter]), s.texParameteri(W, s.TEXTURE_MIN_FILTER, Q[O.minFilter]), O.compareFunction && (s.texParameteri(W, s.TEXTURE_COMPARE_MODE, s.COMPARE_REF_TO_TEXTURE), s.texParameteri(W, s.TEXTURE_COMPARE_FUNC, ue[O.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      if (O.magFilter === ki || O.minFilter !== rd && O.minFilter !== Gs || O.type === ja && e.has("OES_texture_float_linear") === !1)
        return;
      if (O.anisotropy > 1 || n.get(O).__currentAnisotropy) {
        const se = e.get("EXT_texture_filter_anisotropic");
        s.texParameterf(W, se.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(O.anisotropy, r.getMaxAnisotropy())), n.get(O).__currentAnisotropy = O.anisotropy;
      }
    }
  }
  function be(W, O) {
    let se = !1;
    W.__webglInit === void 0 && (W.__webglInit = !0, O.addEventListener("dispose", U));
    const xe = O.source;
    let Ae = x.get(xe);
    Ae === void 0 && (Ae = {}, x.set(xe, Ae));
    const Pe = K(O);
    if (Pe !== W.__cacheKey) {
      Ae[Pe] === void 0 && (Ae[Pe] = {
        texture: s.createTexture(),
        usedTimes: 0
      }, c.memory.textures++, se = !0), Ae[Pe].usedTimes++;
      const st = Ae[W.__cacheKey];
      st !== void 0 && (Ae[W.__cacheKey].usedTimes--, st.usedTimes === 0 && H(O)), W.__cacheKey = Pe, W.__webglTexture = Ae[Pe].texture;
    }
    return se;
  }
  function Oe(W, O, se) {
    let xe = s.TEXTURE_2D;
    (O.isDataArrayTexture || O.isCompressedArrayTexture) && (xe = s.TEXTURE_2D_ARRAY), O.isData3DTexture && (xe = s.TEXTURE_3D);
    const Ae = be(W, O), Pe = O.source;
    t.bindTexture(xe, W.__webglTexture, s.TEXTURE0 + se);
    const st = n.get(Pe);
    if (Pe.version !== st.__version || Ae === !0) {
      t.activeTexture(s.TEXTURE0 + se);
      const Ne = Ln.getPrimaries(Ln.workingColorSpace), St = O.colorSpace === Do ? null : Ln.getPrimaries(O.colorSpace), bt = O.colorSpace === Do || Ne === St ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, O.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, O.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, bt);
      let Je = R(O.image, !1, r.maxTextureSize);
      Je = Be(O, Je);
      const ft = o.convert(O.format, O.colorSpace), Ft = o.convert(O.type);
      let vt = L(O.internalFormat, ft, Ft, O.colorSpace, O.isVideoTexture);
      ne(xe, O);
      let Te;
      const Xe = O.mipmaps, ut = O.isVideoTexture !== !0 && vt !== TS, wt = st.__version === void 0 || Ae === !0, et = Pe.dataReady, en = C(O, Je);
      if (O.isDepthTexture)
        vt = s.DEPTH_COMPONENT16, O.type === ja ? vt = s.DEPTH_COMPONENT32F : O.type === hc ? vt = s.DEPTH_COMPONENT24 : O.type === yd && (vt = s.DEPTH24_STENCIL8), wt && (ut ? t.texStorage2D(s.TEXTURE_2D, 1, vt, Je.width, Je.height) : t.texImage2D(s.TEXTURE_2D, 0, vt, Je.width, Je.height, 0, ft, Ft, null));
      else if (O.isDataTexture)
        if (Xe.length > 0) {
          ut && wt && t.texStorage2D(s.TEXTURE_2D, en, vt, Xe[0].width, Xe[0].height);
          for (let ot = 0, G = Xe.length; ot < G; ot++)
            Te = Xe[ot], ut ? et && t.texSubImage2D(s.TEXTURE_2D, ot, 0, 0, Te.width, Te.height, ft, Ft, Te.data) : t.texImage2D(s.TEXTURE_2D, ot, vt, Te.width, Te.height, 0, ft, Ft, Te.data);
          O.generateMipmaps = !1;
        } else
          ut ? (wt && t.texStorage2D(s.TEXTURE_2D, en, vt, Je.width, Je.height), et && t.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, Je.width, Je.height, ft, Ft, Je.data)) : t.texImage2D(s.TEXTURE_2D, 0, vt, Je.width, Je.height, 0, ft, Ft, Je.data);
      else if (O.isCompressedTexture)
        if (O.isCompressedArrayTexture) {
          ut && wt && t.texStorage3D(s.TEXTURE_2D_ARRAY, en, vt, Xe[0].width, Xe[0].height, Je.depth);
          for (let ot = 0, G = Xe.length; ot < G; ot++)
            Te = Xe[ot], O.format !== Qr ? ft !== null ? ut ? et && t.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY, ot, 0, 0, 0, Te.width, Te.height, Je.depth, ft, Te.data, 0, 0) : t.compressedTexImage3D(s.TEXTURE_2D_ARRAY, ot, vt, Te.width, Te.height, Je.depth, 0, Te.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ut ? et && t.texSubImage3D(s.TEXTURE_2D_ARRAY, ot, 0, 0, 0, Te.width, Te.height, Je.depth, ft, Ft, Te.data) : t.texImage3D(s.TEXTURE_2D_ARRAY, ot, vt, Te.width, Te.height, Je.depth, 0, ft, Ft, Te.data);
        } else {
          ut && wt && t.texStorage2D(s.TEXTURE_2D, en, vt, Xe[0].width, Xe[0].height);
          for (let ot = 0, G = Xe.length; ot < G; ot++)
            Te = Xe[ot], O.format !== Qr ? ft !== null ? ut ? et && t.compressedTexSubImage2D(s.TEXTURE_2D, ot, 0, 0, Te.width, Te.height, ft, Te.data) : t.compressedTexImage2D(s.TEXTURE_2D, ot, vt, Te.width, Te.height, 0, Te.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : ut ? et && t.texSubImage2D(s.TEXTURE_2D, ot, 0, 0, Te.width, Te.height, ft, Ft, Te.data) : t.texImage2D(s.TEXTURE_2D, ot, vt, Te.width, Te.height, 0, ft, Ft, Te.data);
        }
      else if (O.isDataArrayTexture)
        ut ? (wt && t.texStorage3D(s.TEXTURE_2D_ARRAY, en, vt, Je.width, Je.height, Je.depth), et && t.texSubImage3D(s.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Je.width, Je.height, Je.depth, ft, Ft, Je.data)) : t.texImage3D(s.TEXTURE_2D_ARRAY, 0, vt, Je.width, Je.height, Je.depth, 0, ft, Ft, Je.data);
      else if (O.isData3DTexture)
        ut ? (wt && t.texStorage3D(s.TEXTURE_3D, en, vt, Je.width, Je.height, Je.depth), et && t.texSubImage3D(s.TEXTURE_3D, 0, 0, 0, 0, Je.width, Je.height, Je.depth, ft, Ft, Je.data)) : t.texImage3D(s.TEXTURE_3D, 0, vt, Je.width, Je.height, Je.depth, 0, ft, Ft, Je.data);
      else if (O.isFramebufferTexture) {
        if (wt)
          if (ut)
            t.texStorage2D(s.TEXTURE_2D, en, vt, Je.width, Je.height);
          else {
            let ot = Je.width, G = Je.height;
            for (let de = 0; de < en; de++)
              t.texImage2D(s.TEXTURE_2D, de, vt, ot, G, 0, ft, Ft, null), ot >>= 1, G >>= 1;
          }
      } else if (Xe.length > 0) {
        if (ut && wt) {
          const ot = Ve(Xe[0]);
          t.texStorage2D(s.TEXTURE_2D, en, vt, ot.width, ot.height);
        }
        for (let ot = 0, G = Xe.length; ot < G; ot++)
          Te = Xe[ot], ut ? et && t.texSubImage2D(s.TEXTURE_2D, ot, 0, 0, ft, Ft, Te) : t.texImage2D(s.TEXTURE_2D, ot, vt, ft, Ft, Te);
        O.generateMipmaps = !1;
      } else if (ut) {
        if (wt) {
          const ot = Ve(Je);
          t.texStorage2D(s.TEXTURE_2D, en, vt, ot.width, ot.height);
        }
        et && t.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, ft, Ft, Je);
      } else
        t.texImage2D(s.TEXTURE_2D, 0, vt, ft, Ft, Je);
      b(O) && E(xe), st.__version = Pe.version, O.onUpdate && O.onUpdate(O);
    }
    W.__version = O.version;
  }
  function ht(W, O, se) {
    if (O.image.length !== 6)
      return;
    const xe = be(W, O), Ae = O.source;
    t.bindTexture(s.TEXTURE_CUBE_MAP, W.__webglTexture, s.TEXTURE0 + se);
    const Pe = n.get(Ae);
    if (Ae.version !== Pe.__version || xe === !0) {
      t.activeTexture(s.TEXTURE0 + se);
      const st = Ln.getPrimaries(Ln.workingColorSpace), Ne = O.colorSpace === Do ? null : Ln.getPrimaries(O.colorSpace), St = O.colorSpace === Do || st === Ne ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, O.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, O.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, O.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, St);
      const bt = O.isCompressedTexture || O.image[0].isCompressedTexture, Je = O.image[0] && O.image[0].isDataTexture, ft = [];
      for (let G = 0; G < 6; G++)
        !bt && !Je ? ft[G] = R(O.image[G], !0, r.maxCubemapSize) : ft[G] = Je ? O.image[G].image : O.image[G], ft[G] = Be(O, ft[G]);
      const Ft = ft[0], vt = o.convert(O.format, O.colorSpace), Te = o.convert(O.type), Xe = L(O.internalFormat, vt, Te, O.colorSpace), ut = O.isVideoTexture !== !0, wt = Pe.__version === void 0 || xe === !0, et = Ae.dataReady;
      let en = C(O, Ft);
      ne(s.TEXTURE_CUBE_MAP, O);
      let ot;
      if (bt) {
        ut && wt && t.texStorage2D(s.TEXTURE_CUBE_MAP, en, Xe, Ft.width, Ft.height);
        for (let G = 0; G < 6; G++) {
          ot = ft[G].mipmaps;
          for (let de = 0; de < ot.length; de++) {
            const qe = ot[de];
            O.format !== Qr ? vt !== null ? ut ? et && t.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de, 0, 0, qe.width, qe.height, vt, qe.data) : t.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de, Xe, qe.width, qe.height, 0, qe.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : ut ? et && t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de, 0, 0, qe.width, qe.height, vt, Te, qe.data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de, Xe, qe.width, qe.height, 0, vt, Te, qe.data);
          }
        }
      } else {
        if (ot = O.mipmaps, ut && wt) {
          ot.length > 0 && en++;
          const G = Ve(ft[0]);
          t.texStorage2D(s.TEXTURE_CUBE_MAP, en, Xe, G.width, G.height);
        }
        for (let G = 0; G < 6; G++)
          if (Je) {
            ut ? et && t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, 0, 0, 0, ft[G].width, ft[G].height, vt, Te, ft[G].data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, 0, Xe, ft[G].width, ft[G].height, 0, vt, Te, ft[G].data);
            for (let de = 0; de < ot.length; de++) {
              const Ke = ot[de].image[G].image;
              ut ? et && t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de + 1, 0, 0, Ke.width, Ke.height, vt, Te, Ke.data) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de + 1, Xe, Ke.width, Ke.height, 0, vt, Te, Ke.data);
            }
          } else {
            ut ? et && t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, 0, 0, 0, vt, Te, ft[G]) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, 0, Xe, vt, Te, ft[G]);
            for (let de = 0; de < ot.length; de++) {
              const qe = ot[de];
              ut ? et && t.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de + 1, 0, 0, vt, Te, qe.image[G]) : t.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + G, de + 1, Xe, vt, Te, qe.image[G]);
            }
          }
      }
      b(O) && E(s.TEXTURE_CUBE_MAP), Pe.__version = Ae.version, O.onUpdate && O.onUpdate(O);
    }
    W.__version = O.version;
  }
  function ve(W, O, se, xe, Ae, Pe) {
    const st = o.convert(se.format, se.colorSpace), Ne = o.convert(se.type), St = L(se.internalFormat, st, Ne, se.colorSpace);
    if (!n.get(O).__hasExternalTextures) {
      const Je = Math.max(1, O.width >> Pe), ft = Math.max(1, O.height >> Pe);
      Ae === s.TEXTURE_3D || Ae === s.TEXTURE_2D_ARRAY ? t.texImage3D(Ae, Pe, St, Je, ft, O.depth, 0, st, Ne, null) : t.texImage2D(Ae, Pe, St, Je, ft, 0, st, Ne, null);
    }
    t.bindFramebuffer(s.FRAMEBUFFER, W), Se(O) ? f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, xe, Ae, n.get(se).__webglTexture, 0, Re(O)) : (Ae === s.TEXTURE_2D || Ae >= s.TEXTURE_CUBE_MAP_POSITIVE_X && Ae <= s.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s.framebufferTexture2D(s.FRAMEBUFFER, xe, Ae, n.get(se).__webglTexture, Pe), t.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function Ue(W, O, se) {
    if (s.bindRenderbuffer(s.RENDERBUFFER, W), O.depthBuffer && !O.stencilBuffer) {
      let xe = s.DEPTH_COMPONENT24;
      if (se || Se(O)) {
        const Ae = O.depthTexture;
        Ae && Ae.isDepthTexture && (Ae.type === ja ? xe = s.DEPTH_COMPONENT32F : Ae.type === hc && (xe = s.DEPTH_COMPONENT24));
        const Pe = Re(O);
        Se(O) ? f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, Pe, xe, O.width, O.height) : s.renderbufferStorageMultisample(s.RENDERBUFFER, Pe, xe, O.width, O.height);
      } else
        s.renderbufferStorage(s.RENDERBUFFER, xe, O.width, O.height);
      s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.RENDERBUFFER, W);
    } else if (O.depthBuffer && O.stencilBuffer) {
      const xe = Re(O);
      se && Se(O) === !1 ? s.renderbufferStorageMultisample(s.RENDERBUFFER, xe, s.DEPTH24_STENCIL8, O.width, O.height) : Se(O) ? f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, xe, s.DEPTH24_STENCIL8, O.width, O.height) : s.renderbufferStorage(s.RENDERBUFFER, s.DEPTH_STENCIL, O.width, O.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.RENDERBUFFER, W);
    } else {
      const xe = O.textures;
      for (let Ae = 0; Ae < xe.length; Ae++) {
        const Pe = xe[Ae], st = o.convert(Pe.format, Pe.colorSpace), Ne = o.convert(Pe.type), St = L(Pe.internalFormat, st, Ne, Pe.colorSpace), bt = Re(O);
        se && Se(O) === !1 ? s.renderbufferStorageMultisample(s.RENDERBUFFER, bt, St, O.width, O.height) : Se(O) ? f.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, bt, St, O.width, O.height) : s.renderbufferStorage(s.RENDERBUFFER, St, O.width, O.height);
      }
    }
    s.bindRenderbuffer(s.RENDERBUFFER, null);
  }
  function Ye(W, O) {
    if (O && O.isWebGLCubeRenderTarget)
      throw new Error("Depth Texture with cube render targets is not supported");
    if (t.bindFramebuffer(s.FRAMEBUFFER, W), !(O.depthTexture && O.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    (!n.get(O.depthTexture).__webglTexture || O.depthTexture.image.width !== O.width || O.depthTexture.image.height !== O.height) && (O.depthTexture.image.width = O.width, O.depthTexture.image.height = O.height, O.depthTexture.needsUpdate = !0), J(O.depthTexture, 0);
    const xe = n.get(O.depthTexture).__webglTexture, Ae = Re(O);
    if (O.depthTexture.format === uc)
      Se(O) ? f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, xe, 0, Ae) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, xe, 0);
    else if (O.depthTexture.format === dd)
      Se(O) ? f.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, xe, 0, Ae) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, xe, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function Ge(W) {
    const O = n.get(W), se = W.isWebGLCubeRenderTarget === !0;
    if (W.depthTexture && !O.__autoAllocateDepthBuffer) {
      if (se)
        throw new Error("target.depthTexture not supported in Cube render targets");
      Ye(O.__webglFramebuffer, W);
    } else if (se) {
      O.__webglDepthbuffer = [];
      for (let xe = 0; xe < 6; xe++)
        t.bindFramebuffer(s.FRAMEBUFFER, O.__webglFramebuffer[xe]), O.__webglDepthbuffer[xe] = s.createRenderbuffer(), Ue(O.__webglDepthbuffer[xe], W, !1);
    } else
      t.bindFramebuffer(s.FRAMEBUFFER, O.__webglFramebuffer), O.__webglDepthbuffer = s.createRenderbuffer(), Ue(O.__webglDepthbuffer, W, !1);
    t.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function gt(W, O, se) {
    const xe = n.get(W);
    O !== void 0 && ve(xe.__webglFramebuffer, W, W.texture, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, 0), se !== void 0 && Ge(W);
  }
  function Pt(W) {
    const O = W.texture, se = n.get(W), xe = n.get(O);
    W.addEventListener("dispose", Y);
    const Ae = W.textures, Pe = W.isWebGLCubeRenderTarget === !0, st = Ae.length > 1;
    if (st || (xe.__webglTexture === void 0 && (xe.__webglTexture = s.createTexture()), xe.__version = O.version, c.memory.textures++), Pe) {
      se.__webglFramebuffer = [];
      for (let Ne = 0; Ne < 6; Ne++)
        if (O.mipmaps && O.mipmaps.length > 0) {
          se.__webglFramebuffer[Ne] = [];
          for (let St = 0; St < O.mipmaps.length; St++)
            se.__webglFramebuffer[Ne][St] = s.createFramebuffer();
        } else
          se.__webglFramebuffer[Ne] = s.createFramebuffer();
    } else {
      if (O.mipmaps && O.mipmaps.length > 0) {
        se.__webglFramebuffer = [];
        for (let Ne = 0; Ne < O.mipmaps.length; Ne++)
          se.__webglFramebuffer[Ne] = s.createFramebuffer();
      } else
        se.__webglFramebuffer = s.createFramebuffer();
      if (st)
        for (let Ne = 0, St = Ae.length; Ne < St; Ne++) {
          const bt = n.get(Ae[Ne]);
          bt.__webglTexture === void 0 && (bt.__webglTexture = s.createTexture(), c.memory.textures++);
        }
      if (W.samples > 0 && Se(W) === !1) {
        se.__webglMultisampledFramebuffer = s.createFramebuffer(), se.__webglColorRenderbuffer = [], t.bindFramebuffer(s.FRAMEBUFFER, se.__webglMultisampledFramebuffer);
        for (let Ne = 0; Ne < Ae.length; Ne++) {
          const St = Ae[Ne];
          se.__webglColorRenderbuffer[Ne] = s.createRenderbuffer(), s.bindRenderbuffer(s.RENDERBUFFER, se.__webglColorRenderbuffer[Ne]);
          const bt = o.convert(St.format, St.colorSpace), Je = o.convert(St.type), ft = L(St.internalFormat, bt, Je, St.colorSpace, W.isXRRenderTarget === !0), Ft = Re(W);
          s.renderbufferStorageMultisample(s.RENDERBUFFER, Ft, ft, W.width, W.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Ne, s.RENDERBUFFER, se.__webglColorRenderbuffer[Ne]);
        }
        s.bindRenderbuffer(s.RENDERBUFFER, null), W.depthBuffer && (se.__webglDepthRenderbuffer = s.createRenderbuffer(), Ue(se.__webglDepthRenderbuffer, W, !0)), t.bindFramebuffer(s.FRAMEBUFFER, null);
      }
    }
    if (Pe) {
      t.bindTexture(s.TEXTURE_CUBE_MAP, xe.__webglTexture), ne(s.TEXTURE_CUBE_MAP, O);
      for (let Ne = 0; Ne < 6; Ne++)
        if (O.mipmaps && O.mipmaps.length > 0)
          for (let St = 0; St < O.mipmaps.length; St++)
            ve(se.__webglFramebuffer[Ne][St], W, O, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Ne, St);
        else
          ve(se.__webglFramebuffer[Ne], W, O, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Ne, 0);
      b(O) && E(s.TEXTURE_CUBE_MAP), t.unbindTexture();
    } else if (st) {
      for (let Ne = 0, St = Ae.length; Ne < St; Ne++) {
        const bt = Ae[Ne], Je = n.get(bt);
        t.bindTexture(s.TEXTURE_2D, Je.__webglTexture), ne(s.TEXTURE_2D, bt), ve(se.__webglFramebuffer, W, bt, s.COLOR_ATTACHMENT0 + Ne, s.TEXTURE_2D, 0), b(bt) && E(s.TEXTURE_2D);
      }
      t.unbindTexture();
    } else {
      let Ne = s.TEXTURE_2D;
      if ((W.isWebGL3DRenderTarget || W.isWebGLArrayRenderTarget) && (Ne = W.isWebGL3DRenderTarget ? s.TEXTURE_3D : s.TEXTURE_2D_ARRAY), t.bindTexture(Ne, xe.__webglTexture), ne(Ne, O), O.mipmaps && O.mipmaps.length > 0)
        for (let St = 0; St < O.mipmaps.length; St++)
          ve(se.__webglFramebuffer[St], W, O, s.COLOR_ATTACHMENT0, Ne, St);
      else
        ve(se.__webglFramebuffer, W, O, s.COLOR_ATTACHMENT0, Ne, 0);
      b(O) && E(Ne), t.unbindTexture();
    }
    W.depthBuffer && Ge(W);
  }
  function Dt(W) {
    const O = W.textures;
    for (let se = 0, xe = O.length; se < xe; se++) {
      const Ae = O[se];
      if (b(Ae)) {
        const Pe = W.isWebGLCubeRenderTarget ? s.TEXTURE_CUBE_MAP : s.TEXTURE_2D, st = n.get(Ae).__webglTexture;
        t.bindTexture(Pe, st), E(Pe), t.unbindTexture();
      }
    }
  }
  function ie(W) {
    if (W.samples > 0 && Se(W) === !1) {
      const O = W.textures, se = W.width, xe = W.height;
      let Ae = s.COLOR_BUFFER_BIT;
      const Pe = [], st = W.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Ne = n.get(W), St = O.length > 1;
      if (St)
        for (let bt = 0; bt < O.length; bt++)
          t.bindFramebuffer(s.FRAMEBUFFER, Ne.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + bt, s.RENDERBUFFER, null), t.bindFramebuffer(s.FRAMEBUFFER, Ne.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + bt, s.TEXTURE_2D, null, 0);
      t.bindFramebuffer(s.READ_FRAMEBUFFER, Ne.__webglMultisampledFramebuffer), t.bindFramebuffer(s.DRAW_FRAMEBUFFER, Ne.__webglFramebuffer);
      for (let bt = 0; bt < O.length; bt++) {
        Pe.push(s.COLOR_ATTACHMENT0 + bt), W.depthBuffer && Pe.push(st);
        const Je = Ne.__ignoreDepthValues !== void 0 ? Ne.__ignoreDepthValues : !1;
        if (Je === !1 && (W.depthBuffer && (Ae |= s.DEPTH_BUFFER_BIT), W.stencilBuffer && Ne.__isTransmissionRenderTarget !== !0 && (Ae |= s.STENCIL_BUFFER_BIT)), St && s.framebufferRenderbuffer(s.READ_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.RENDERBUFFER, Ne.__webglColorRenderbuffer[bt]), Je === !0 && (s.invalidateFramebuffer(s.READ_FRAMEBUFFER, [st]), s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER, [st])), St) {
          const ft = n.get(O[bt]).__webglTexture;
          s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, ft, 0);
        }
        s.blitFramebuffer(0, 0, se, xe, 0, 0, se, xe, Ae, s.NEAREST), p && s.invalidateFramebuffer(s.READ_FRAMEBUFFER, Pe);
      }
      if (t.bindFramebuffer(s.READ_FRAMEBUFFER, null), t.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), St)
        for (let bt = 0; bt < O.length; bt++) {
          t.bindFramebuffer(s.FRAMEBUFFER, Ne.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + bt, s.RENDERBUFFER, Ne.__webglColorRenderbuffer[bt]);
          const Je = n.get(O[bt]).__webglTexture;
          t.bindFramebuffer(s.FRAMEBUFFER, Ne.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + bt, s.TEXTURE_2D, Je, 0);
        }
      t.bindFramebuffer(s.DRAW_FRAMEBUFFER, Ne.__webglMultisampledFramebuffer);
    }
  }
  function Re(W) {
    return Math.min(r.maxSamples, W.samples);
  }
  function Se(W) {
    const O = n.get(W);
    return W.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && O.__useRenderToTexture !== !1;
  }
  function He(W) {
    const O = c.render.frame;
    g.get(W) !== O && (g.set(W, O), W.update());
  }
  function Be(W, O) {
    const se = W.colorSpace, xe = W.format, Ae = W.type;
    return W.isCompressedTexture === !0 || W.isVideoTexture === !0 || se !== Bo && se !== Do && (Ln.getTransfer(se) === Vn ? (xe !== Qr || Ae !== qs) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", se)), O;
  }
  function Ve(W) {
    return typeof HTMLImageElement < "u" && W instanceof HTMLImageElement ? (h.width = W.naturalWidth || W.width, h.height = W.naturalHeight || W.height) : typeof VideoFrame < "u" && W instanceof VideoFrame ? (h.width = W.displayWidth, h.height = W.displayHeight) : (h.width = W.width, h.height = W.height), h;
  }
  this.allocateTextureUnit = X, this.resetTextureUnits = N, this.setTexture2D = J, this.setTexture2DArray = ae, this.setTexture3D = _e, this.setTextureCube = Me, this.rebindTextures = gt, this.setupRenderTarget = Pt, this.updateRenderTargetMipmap = Dt, this.updateMultisampleRenderTarget = ie, this.setupDepthRenderbuffer = Ge, this.setupFrameBufferTexture = ve, this.useMultisampledRTT = Se;
}
function _A(s, e) {
  function t(n, r = Do) {
    let o;
    const c = Ln.getTransfer(r);
    if (n === qs)
      return s.UNSIGNED_BYTE;
    if (n === yS)
      return s.UNSIGNED_SHORT_4_4_4_4;
    if (n === _S)
      return s.UNSIGNED_SHORT_5_5_5_1;
    if (n === Fw)
      return s.UNSIGNED_INT_5_9_9_9_REV;
    if (n === Iw)
      return s.BYTE;
    if (n === Ow)
      return s.SHORT;
    if (n === vS)
      return s.UNSIGNED_SHORT;
    if (n === gS)
      return s.INT;
    if (n === hc)
      return s.UNSIGNED_INT;
    if (n === ja)
      return s.FLOAT;
    if (n === mp)
      return s.HALF_FLOAT;
    if (n === zw)
      return s.ALPHA;
    if (n === Bw)
      return s.RGB;
    if (n === Qr)
      return s.RGBA;
    if (n === Hw)
      return s.LUMINANCE;
    if (n === Vw)
      return s.LUMINANCE_ALPHA;
    if (n === uc)
      return s.DEPTH_COMPONENT;
    if (n === dd)
      return s.DEPTH_STENCIL;
    if (n === xS)
      return s.RED;
    if (n === SS)
      return s.RED_INTEGER;
    if (n === kw)
      return s.RG;
    if (n === MS)
      return s.RG_INTEGER;
    if (n === ES)
      return s.RGBA_INTEGER;
    if (n === Sg || n === Mg || n === Eg || n === Tg)
      if (c === Vn)
        if (o = e.get("WEBGL_compressed_texture_s3tc_srgb"), o !== null) {
          if (n === Sg)
            return o.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (n === Mg)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (n === Eg)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (n === Tg)
            return o.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (o = e.get("WEBGL_compressed_texture_s3tc"), o !== null) {
        if (n === Sg)
          return o.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (n === Mg)
          return o.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (n === Eg)
          return o.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (n === Tg)
          return o.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (n === Ax || n === Rx || n === Cx || n === Lx)
      if (o = e.get("WEBGL_compressed_texture_pvrtc"), o !== null) {
        if (n === Ax)
          return o.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (n === Rx)
          return o.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (n === Cx)
          return o.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (n === Lx)
          return o.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (n === TS)
      return o = e.get("WEBGL_compressed_texture_etc1"), o !== null ? o.COMPRESSED_RGB_ETC1_WEBGL : null;
    if (n === Px || n === Dx)
      if (o = e.get("WEBGL_compressed_texture_etc"), o !== null) {
        if (n === Px)
          return c === Vn ? o.COMPRESSED_SRGB8_ETC2 : o.COMPRESSED_RGB8_ETC2;
        if (n === Dx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : o.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (n === Nx || n === Ux || n === Ix || n === Ox || n === Fx || n === zx || n === Bx || n === Hx || n === Vx || n === kx || n === Gx || n === Wx || n === Xx || n === qx)
      if (o = e.get("WEBGL_compressed_texture_astc"), o !== null) {
        if (n === Nx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : o.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (n === Ux)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : o.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (n === Ix)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : o.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (n === Ox)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : o.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (n === Fx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : o.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (n === zx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : o.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (n === Bx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : o.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (n === Hx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : o.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (n === Vx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : o.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (n === kx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : o.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (n === Gx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : o.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (n === Wx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : o.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (n === Xx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : o.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (n === qx)
          return c === Vn ? o.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : o.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (n === bg || n === Yx || n === jx)
      if (o = e.get("EXT_texture_compression_bptc"), o !== null) {
        if (n === bg)
          return c === Vn ? o.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : o.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (n === Yx)
          return o.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (n === jx)
          return o.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (n === Gw || n === Zx || n === Jx || n === Qx)
      if (o = e.get("EXT_texture_compression_rgtc"), o !== null) {
        if (n === bg)
          return o.COMPRESSED_RED_RGTC1_EXT;
        if (n === Zx)
          return o.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (n === Jx)
          return o.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (n === Qx)
          return o.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return n === yd ? s.UNSIGNED_INT_24_8 : s[n] !== void 0 ? s[n] : null;
  }
  return { convert: t };
}
class xA extends Vi {
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.cameras = e;
  }
}
class od extends xn {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const hO = { type: "move" };
class j_ {
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  getHandSpace() {
    return this._hand === null && (this._hand = new od(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new od(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new q(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new q()), this._targetRay;
  }
  getGripSpace() {
    return this._grip === null && (this._grip = new od(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new q(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new q()), this._grip;
  }
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  connect(e) {
    if (e && e.hand) {
      const t = this._hand;
      if (t)
        for (const n of e.hand.values())
          this._getHandJoint(t, n);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  update(e, t, n) {
    let r = null, o = null, c = null;
    const f = this._targetRay, p = this._grip, h = this._hand;
    if (e && t.session.visibilityState !== "visible-blurred") {
      if (h && e.hand) {
        c = !0;
        for (const R of e.hand.values()) {
          const b = t.getJointPose(R, n), E = this._getHandJoint(h, R);
          b !== null && (E.matrix.fromArray(b.transform.matrix), E.matrix.decompose(E.position, E.rotation, E.scale), E.matrixWorldNeedsUpdate = !0, E.jointRadius = b.radius), E.visible = b !== null;
        }
        const g = h.joints["index-finger-tip"], _ = h.joints["thumb-tip"], x = g.position.distanceTo(_.position), M = 0.02, T = 5e-3;
        h.inputState.pinching && x > M + T ? (h.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !h.inputState.pinching && x <= M - T && (h.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        p !== null && e.gripSpace && (o = t.getPose(e.gripSpace, n), o !== null && (p.matrix.fromArray(o.transform.matrix), p.matrix.decompose(p.position, p.rotation, p.scale), p.matrixWorldNeedsUpdate = !0, o.linearVelocity ? (p.hasLinearVelocity = !0, p.linearVelocity.copy(o.linearVelocity)) : p.hasLinearVelocity = !1, o.angularVelocity ? (p.hasAngularVelocity = !0, p.angularVelocity.copy(o.angularVelocity)) : p.hasAngularVelocity = !1));
      f !== null && (r = t.getPose(e.targetRaySpace, n), r === null && o !== null && (r = o), r !== null && (f.matrix.fromArray(r.transform.matrix), f.matrix.decompose(f.position, f.rotation, f.scale), f.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (f.hasLinearVelocity = !0, f.linearVelocity.copy(r.linearVelocity)) : f.hasLinearVelocity = !1, r.angularVelocity ? (f.hasAngularVelocity = !0, f.angularVelocity.copy(r.angularVelocity)) : f.hasAngularVelocity = !1, this.dispatchEvent(hO)));
    }
    return f !== null && (f.visible = r !== null), p !== null && (p.visible = o !== null), h !== null && (h.visible = c !== null), this;
  }
  // private method
  _getHandJoint(e, t) {
    if (e.joints[t.jointName] === void 0) {
      const n = new od();
      n.matrixAutoUpdate = !1, n.visible = !1, e.joints[t.jointName] = n, e.add(n);
    }
    return e.joints[t.jointName];
  }
}
const pO = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, mO = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class vO {
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  init(e, t, n) {
    if (this.texture === null) {
      const r = new ai(), o = e.properties.get(r);
      o.__webglTexture = t.texture, (t.depthNear != n.depthNear || t.depthFar != n.depthFar) && (this.depthNear = t.depthNear, this.depthFar = t.depthFar), this.texture = r;
    }
  }
  render(e, t) {
    if (this.texture !== null) {
      if (this.mesh === null) {
        const n = t.cameras[0].viewport, r = new gs({
          vertexShader: pO,
          fragmentShader: mO,
          uniforms: {
            depthColor: { value: this.texture },
            depthWidth: { value: n.z },
            depthHeight: { value: n.w }
          }
        });
        this.mesh = new Ti(new xd(20, 20), r);
      }
      e.render(this.mesh, t);
    }
  }
  reset() {
    this.texture = null, this.mesh = null;
  }
}
class gO extends Ho {
  constructor(e, t) {
    super();
    const n = this;
    let r = null, o = 1, c = null, f = "local-floor", p = 1, h = null, g = null, _ = null, x = null, M = null, T = null;
    const R = new vO(), b = t.getContextAttributes();
    let E = null, L = null;
    const C = [], U = [], Y = new De();
    let B = null;
    const H = new Vi();
    H.layers.enable(1), H.viewport = new Pn();
    const k = new Vi();
    k.layers.enable(2), k.viewport = new Pn();
    const F = [H, k], N = new xA();
    N.layers.enable(1), N.layers.enable(2);
    let X = null, K = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(ve) {
      let Ue = C[ve];
      return Ue === void 0 && (Ue = new j_(), C[ve] = Ue), Ue.getTargetRaySpace();
    }, this.getControllerGrip = function(ve) {
      let Ue = C[ve];
      return Ue === void 0 && (Ue = new j_(), C[ve] = Ue), Ue.getGripSpace();
    }, this.getHand = function(ve) {
      let Ue = C[ve];
      return Ue === void 0 && (Ue = new j_(), C[ve] = Ue), Ue.getHandSpace();
    };
    function J(ve) {
      const Ue = U.indexOf(ve.inputSource);
      if (Ue === -1)
        return;
      const Ye = C[Ue];
      Ye !== void 0 && (Ye.update(ve.inputSource, ve.frame, h || c), Ye.dispatchEvent({ type: ve.type, data: ve.inputSource }));
    }
    function ae() {
      r.removeEventListener("select", J), r.removeEventListener("selectstart", J), r.removeEventListener("selectend", J), r.removeEventListener("squeeze", J), r.removeEventListener("squeezestart", J), r.removeEventListener("squeezeend", J), r.removeEventListener("end", ae), r.removeEventListener("inputsourceschange", _e);
      for (let ve = 0; ve < C.length; ve++) {
        const Ue = U[ve];
        Ue !== null && (U[ve] = null, C[ve].disconnect(Ue));
      }
      X = null, K = null, R.reset(), e.setRenderTarget(E), M = null, x = null, _ = null, r = null, L = null, ht.stop(), n.isPresenting = !1, e.setPixelRatio(B), e.setSize(Y.width, Y.height, !1), n.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(ve) {
      o = ve, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(ve) {
      f = ve, n.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return h || c;
    }, this.setReferenceSpace = function(ve) {
      h = ve;
    }, this.getBaseLayer = function() {
      return x !== null ? x : M;
    }, this.getBinding = function() {
      return _;
    }, this.getFrame = function() {
      return T;
    }, this.getSession = function() {
      return r;
    }, this.setSession = async function(ve) {
      if (r = ve, r !== null) {
        if (E = e.getRenderTarget(), r.addEventListener("select", J), r.addEventListener("selectstart", J), r.addEventListener("selectend", J), r.addEventListener("squeeze", J), r.addEventListener("squeezestart", J), r.addEventListener("squeezeend", J), r.addEventListener("end", ae), r.addEventListener("inputsourceschange", _e), b.xrCompatible !== !0 && await t.makeXRCompatible(), B = e.getPixelRatio(), e.getSize(Y), r.renderState.layers === void 0) {
          const Ue = {
            antialias: b.antialias,
            alpha: !0,
            depth: b.depth,
            stencil: b.stencil,
            framebufferScaleFactor: o
          };
          M = new XRWebGLLayer(r, t, Ue), r.updateRenderState({ baseLayer: M }), e.setPixelRatio(1), e.setSize(M.framebufferWidth, M.framebufferHeight, !1), L = new vs(
            M.framebufferWidth,
            M.framebufferHeight,
            {
              format: Qr,
              type: qs,
              colorSpace: e.outputColorSpace,
              stencilBuffer: b.stencil
            }
          );
        } else {
          let Ue = null, Ye = null, Ge = null;
          b.depth && (Ge = b.stencil ? t.DEPTH24_STENCIL8 : t.DEPTH_COMPONENT24, Ue = b.stencil ? dd : uc, Ye = b.stencil ? yd : hc);
          const gt = {
            colorFormat: t.RGBA8,
            depthFormat: Ge,
            scaleFactor: o
          };
          _ = new XRWebGLBinding(r, t), x = _.createProjectionLayer(gt), r.updateRenderState({ layers: [x] }), e.setPixelRatio(1), e.setSize(x.textureWidth, x.textureHeight, !1), L = new vs(
            x.textureWidth,
            x.textureHeight,
            {
              format: Qr,
              type: qs,
              depthTexture: new DS(x.textureWidth, x.textureHeight, Ye, void 0, void 0, void 0, void 0, void 0, void 0, Ue),
              stencilBuffer: b.stencil,
              colorSpace: e.outputColorSpace,
              samples: b.antialias ? 4 : 0
            }
          );
          const Pt = e.properties.get(L);
          Pt.__ignoreDepthValues = x.ignoreDepthValues;
        }
        L.isXRRenderTarget = !0, this.setFoveation(p), h = null, c = await r.requestReferenceSpace(f), ht.setContext(r), ht.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (r !== null)
        return r.environmentBlendMode;
    };
    function _e(ve) {
      for (let Ue = 0; Ue < ve.removed.length; Ue++) {
        const Ye = ve.removed[Ue], Ge = U.indexOf(Ye);
        Ge >= 0 && (U[Ge] = null, C[Ge].disconnect(Ye));
      }
      for (let Ue = 0; Ue < ve.added.length; Ue++) {
        const Ye = ve.added[Ue];
        let Ge = U.indexOf(Ye);
        if (Ge === -1) {
          for (let Pt = 0; Pt < C.length; Pt++)
            if (Pt >= U.length) {
              U.push(Ye), Ge = Pt;
              break;
            } else if (U[Pt] === null) {
              U[Pt] = Ye, Ge = Pt;
              break;
            }
          if (Ge === -1)
            break;
        }
        const gt = C[Ge];
        gt && gt.connect(Ye);
      }
    }
    const Me = new q(), Fe = new q();
    function Q(ve, Ue, Ye) {
      Me.setFromMatrixPosition(Ue.matrixWorld), Fe.setFromMatrixPosition(Ye.matrixWorld);
      const Ge = Me.distanceTo(Fe), gt = Ue.projectionMatrix.elements, Pt = Ye.projectionMatrix.elements, Dt = gt[14] / (gt[10] - 1), ie = gt[14] / (gt[10] + 1), Re = (gt[9] + 1) / gt[5], Se = (gt[9] - 1) / gt[5], He = (gt[8] - 1) / gt[0], Be = (Pt[8] + 1) / Pt[0], Ve = Dt * He, W = Dt * Be, O = Ge / (-He + Be), se = O * -He;
      Ue.matrixWorld.decompose(ve.position, ve.quaternion, ve.scale), ve.translateX(se), ve.translateZ(O), ve.matrixWorld.compose(ve.position, ve.quaternion, ve.scale), ve.matrixWorldInverse.copy(ve.matrixWorld).invert();
      const xe = Dt + O, Ae = ie + O, Pe = Ve - se, st = W + (Ge - se), Ne = Re * ie / Ae * xe, St = Se * ie / Ae * xe;
      ve.projectionMatrix.makePerspective(Pe, st, Ne, St, xe, Ae), ve.projectionMatrixInverse.copy(ve.projectionMatrix).invert();
    }
    function ue(ve, Ue) {
      Ue === null ? ve.matrixWorld.copy(ve.matrix) : ve.matrixWorld.multiplyMatrices(Ue.matrixWorld, ve.matrix), ve.matrixWorldInverse.copy(ve.matrixWorld).invert();
    }
    this.updateCamera = function(ve) {
      if (r === null)
        return;
      R.texture !== null && (ve.near = R.depthNear, ve.far = R.depthFar), N.near = k.near = H.near = ve.near, N.far = k.far = H.far = ve.far, (X !== N.near || K !== N.far) && (r.updateRenderState({
        depthNear: N.near,
        depthFar: N.far
      }), X = N.near, K = N.far, H.near = X, H.far = K, k.near = X, k.far = K, H.updateProjectionMatrix(), k.updateProjectionMatrix(), ve.updateProjectionMatrix());
      const Ue = ve.parent, Ye = N.cameras;
      ue(N, Ue);
      for (let Ge = 0; Ge < Ye.length; Ge++)
        ue(Ye[Ge], Ue);
      Ye.length === 2 ? Q(N, H, k) : N.projectionMatrix.copy(H.projectionMatrix), ne(ve, N, Ue);
    };
    function ne(ve, Ue, Ye) {
      Ye === null ? ve.matrix.copy(Ue.matrixWorld) : (ve.matrix.copy(Ye.matrixWorld), ve.matrix.invert(), ve.matrix.multiply(Ue.matrixWorld)), ve.matrix.decompose(ve.position, ve.quaternion, ve.scale), ve.updateMatrixWorld(!0), ve.projectionMatrix.copy(Ue.projectionMatrix), ve.projectionMatrixInverse.copy(Ue.projectionMatrixInverse), ve.isPerspectiveCamera && (ve.fov = hd * 2 * Math.atan(1 / ve.projectionMatrix.elements[5]), ve.zoom = 1);
    }
    this.getCamera = function() {
      return N;
    }, this.getFoveation = function() {
      if (!(x === null && M === null))
        return p;
    }, this.setFoveation = function(ve) {
      p = ve, x !== null && (x.fixedFoveation = ve), M !== null && M.fixedFoveation !== void 0 && (M.fixedFoveation = ve);
    }, this.hasDepthSensing = function() {
      return R.texture !== null;
    };
    let be = null;
    function Oe(ve, Ue) {
      if (g = Ue.getViewerPose(h || c), T = Ue, g !== null) {
        const Ye = g.views;
        M !== null && (e.setRenderTargetFramebuffer(L, M.framebuffer), e.setRenderTarget(L));
        let Ge = !1;
        Ye.length !== N.cameras.length && (N.cameras.length = 0, Ge = !0);
        for (let Pt = 0; Pt < Ye.length; Pt++) {
          const Dt = Ye[Pt];
          let ie = null;
          if (M !== null)
            ie = M.getViewport(Dt);
          else {
            const Se = _.getViewSubImage(x, Dt);
            ie = Se.viewport, Pt === 0 && (e.setRenderTargetTextures(
              L,
              Se.colorTexture,
              x.ignoreDepthValues ? void 0 : Se.depthStencilTexture
            ), e.setRenderTarget(L));
          }
          let Re = F[Pt];
          Re === void 0 && (Re = new Vi(), Re.layers.enable(Pt), Re.viewport = new Pn(), F[Pt] = Re), Re.matrix.fromArray(Dt.transform.matrix), Re.matrix.decompose(Re.position, Re.quaternion, Re.scale), Re.projectionMatrix.fromArray(Dt.projectionMatrix), Re.projectionMatrixInverse.copy(Re.projectionMatrix).invert(), Re.viewport.set(ie.x, ie.y, ie.width, ie.height), Pt === 0 && (N.matrix.copy(Re.matrix), N.matrix.decompose(N.position, N.quaternion, N.scale)), Ge === !0 && N.cameras.push(Re);
        }
        const gt = r.enabledFeatures;
        if (gt && gt.includes("depth-sensing")) {
          const Pt = _.getDepthInformation(Ye[0]);
          Pt && Pt.isValid && Pt.texture && R.init(e, Pt, r.renderState);
        }
      }
      for (let Ye = 0; Ye < C.length; Ye++) {
        const Ge = U[Ye], gt = C[Ye];
        Ge !== null && gt !== void 0 && gt.update(Ge, Ue, h || c);
      }
      R.render(e, N), be && be(ve, Ue), Ue.detectedPlanes && n.dispatchEvent({ type: "planesdetected", data: Ue }), T = null;
    }
    const ht = new hA();
    ht.setAnimationLoop(Oe), this.setAnimationLoop = function(ve) {
      be = ve;
    }, this.dispose = function() {
    };
  }
}
const Yu = /* @__PURE__ */ new _a(), yO = /* @__PURE__ */ new Ht();
function _O(s, e) {
  function t(b, E) {
    b.matrixAutoUpdate === !0 && b.updateMatrix(), E.value.copy(b.matrix);
  }
  function n(b, E) {
    E.color.getRGB(b.fogColor.value, uA(s)), E.isFog ? (b.fogNear.value = E.near, b.fogFar.value = E.far) : E.isFogExp2 && (b.fogDensity.value = E.density);
  }
  function r(b, E, L, C, U) {
    E.isMeshBasicMaterial || E.isMeshLambertMaterial ? o(b, E) : E.isMeshToonMaterial ? (o(b, E), _(b, E)) : E.isMeshPhongMaterial ? (o(b, E), g(b, E)) : E.isMeshStandardMaterial ? (o(b, E), x(b, E), E.isMeshPhysicalMaterial && M(b, E, U)) : E.isMeshMatcapMaterial ? (o(b, E), T(b, E)) : E.isMeshDepthMaterial ? o(b, E) : E.isMeshDistanceMaterial ? (o(b, E), R(b, E)) : E.isMeshNormalMaterial ? o(b, E) : E.isLineBasicMaterial ? (c(b, E), E.isLineDashedMaterial && f(b, E)) : E.isPointsMaterial ? p(b, E, L, C) : E.isSpriteMaterial ? h(b, E) : E.isShadowMaterial ? (b.color.value.copy(E.color), b.opacity.value = E.opacity) : E.isShaderMaterial && (E.uniformsNeedUpdate = !1);
  }
  function o(b, E) {
    b.opacity.value = E.opacity, E.color && b.diffuse.value.copy(E.color), E.emissive && b.emissive.value.copy(E.emissive).multiplyScalar(E.emissiveIntensity), E.map && (b.map.value = E.map, t(E.map, b.mapTransform)), E.alphaMap && (b.alphaMap.value = E.alphaMap, t(E.alphaMap, b.alphaMapTransform)), E.bumpMap && (b.bumpMap.value = E.bumpMap, t(E.bumpMap, b.bumpMapTransform), b.bumpScale.value = E.bumpScale, E.side === Dr && (b.bumpScale.value *= -1)), E.normalMap && (b.normalMap.value = E.normalMap, t(E.normalMap, b.normalMapTransform), b.normalScale.value.copy(E.normalScale), E.side === Dr && b.normalScale.value.negate()), E.displacementMap && (b.displacementMap.value = E.displacementMap, t(E.displacementMap, b.displacementMapTransform), b.displacementScale.value = E.displacementScale, b.displacementBias.value = E.displacementBias), E.emissiveMap && (b.emissiveMap.value = E.emissiveMap, t(E.emissiveMap, b.emissiveMapTransform)), E.specularMap && (b.specularMap.value = E.specularMap, t(E.specularMap, b.specularMapTransform)), E.alphaTest > 0 && (b.alphaTest.value = E.alphaTest);
    const L = e.get(E), C = L.envMap, U = L.envMapRotation;
    if (C && (b.envMap.value = C, Yu.copy(U), Yu.x *= -1, Yu.y *= -1, Yu.z *= -1, C.isCubeTexture && C.isRenderTargetTexture === !1 && (Yu.y *= -1, Yu.z *= -1), b.envMapRotation.value.setFromMatrix4(yO.makeRotationFromEuler(Yu)), b.flipEnvMap.value = C.isCubeTexture && C.isRenderTargetTexture === !1 ? -1 : 1, b.reflectivity.value = E.reflectivity, b.ior.value = E.ior, b.refractionRatio.value = E.refractionRatio), E.lightMap) {
      b.lightMap.value = E.lightMap;
      const Y = s._useLegacyLights === !0 ? Math.PI : 1;
      b.lightMapIntensity.value = E.lightMapIntensity * Y, t(E.lightMap, b.lightMapTransform);
    }
    E.aoMap && (b.aoMap.value = E.aoMap, b.aoMapIntensity.value = E.aoMapIntensity, t(E.aoMap, b.aoMapTransform));
  }
  function c(b, E) {
    b.diffuse.value.copy(E.color), b.opacity.value = E.opacity, E.map && (b.map.value = E.map, t(E.map, b.mapTransform));
  }
  function f(b, E) {
    b.dashSize.value = E.dashSize, b.totalSize.value = E.dashSize + E.gapSize, b.scale.value = E.scale;
  }
  function p(b, E, L, C) {
    b.diffuse.value.copy(E.color), b.opacity.value = E.opacity, b.size.value = E.size * L, b.scale.value = C * 0.5, E.map && (b.map.value = E.map, t(E.map, b.uvTransform)), E.alphaMap && (b.alphaMap.value = E.alphaMap, t(E.alphaMap, b.alphaMapTransform)), E.alphaTest > 0 && (b.alphaTest.value = E.alphaTest);
  }
  function h(b, E) {
    b.diffuse.value.copy(E.color), b.opacity.value = E.opacity, b.rotation.value = E.rotation, E.map && (b.map.value = E.map, t(E.map, b.mapTransform)), E.alphaMap && (b.alphaMap.value = E.alphaMap, t(E.alphaMap, b.alphaMapTransform)), E.alphaTest > 0 && (b.alphaTest.value = E.alphaTest);
  }
  function g(b, E) {
    b.specular.value.copy(E.specular), b.shininess.value = Math.max(E.shininess, 1e-4);
  }
  function _(b, E) {
    E.gradientMap && (b.gradientMap.value = E.gradientMap);
  }
  function x(b, E) {
    b.metalness.value = E.metalness, E.metalnessMap && (b.metalnessMap.value = E.metalnessMap, t(E.metalnessMap, b.metalnessMapTransform)), b.roughness.value = E.roughness, E.roughnessMap && (b.roughnessMap.value = E.roughnessMap, t(E.roughnessMap, b.roughnessMapTransform)), E.envMap && (b.envMapIntensity.value = E.envMapIntensity);
  }
  function M(b, E, L) {
    b.ior.value = E.ior, E.sheen > 0 && (b.sheenColor.value.copy(E.sheenColor).multiplyScalar(E.sheen), b.sheenRoughness.value = E.sheenRoughness, E.sheenColorMap && (b.sheenColorMap.value = E.sheenColorMap, t(E.sheenColorMap, b.sheenColorMapTransform)), E.sheenRoughnessMap && (b.sheenRoughnessMap.value = E.sheenRoughnessMap, t(E.sheenRoughnessMap, b.sheenRoughnessMapTransform))), E.clearcoat > 0 && (b.clearcoat.value = E.clearcoat, b.clearcoatRoughness.value = E.clearcoatRoughness, E.clearcoatMap && (b.clearcoatMap.value = E.clearcoatMap, t(E.clearcoatMap, b.clearcoatMapTransform)), E.clearcoatRoughnessMap && (b.clearcoatRoughnessMap.value = E.clearcoatRoughnessMap, t(E.clearcoatRoughnessMap, b.clearcoatRoughnessMapTransform)), E.clearcoatNormalMap && (b.clearcoatNormalMap.value = E.clearcoatNormalMap, t(E.clearcoatNormalMap, b.clearcoatNormalMapTransform), b.clearcoatNormalScale.value.copy(E.clearcoatNormalScale), E.side === Dr && b.clearcoatNormalScale.value.negate())), E.iridescence > 0 && (b.iridescence.value = E.iridescence, b.iridescenceIOR.value = E.iridescenceIOR, b.iridescenceThicknessMinimum.value = E.iridescenceThicknessRange[0], b.iridescenceThicknessMaximum.value = E.iridescenceThicknessRange[1], E.iridescenceMap && (b.iridescenceMap.value = E.iridescenceMap, t(E.iridescenceMap, b.iridescenceMapTransform)), E.iridescenceThicknessMap && (b.iridescenceThicknessMap.value = E.iridescenceThicknessMap, t(E.iridescenceThicknessMap, b.iridescenceThicknessMapTransform))), E.transmission > 0 && (b.transmission.value = E.transmission, b.transmissionSamplerMap.value = L.texture, b.transmissionSamplerSize.value.set(L.width, L.height), E.transmissionMap && (b.transmissionMap.value = E.transmissionMap, t(E.transmissionMap, b.transmissionMapTransform)), b.thickness.value = E.thickness, E.thicknessMap && (b.thicknessMap.value = E.thicknessMap, t(E.thicknessMap, b.thicknessMapTransform)), b.attenuationDistance.value = E.attenuationDistance, b.attenuationColor.value.copy(E.attenuationColor)), E.anisotropy > 0 && (b.anisotropyVector.value.set(E.anisotropy * Math.cos(E.anisotropyRotation), E.anisotropy * Math.sin(E.anisotropyRotation)), E.anisotropyMap && (b.anisotropyMap.value = E.anisotropyMap, t(E.anisotropyMap, b.anisotropyMapTransform))), b.specularIntensity.value = E.specularIntensity, b.specularColor.value.copy(E.specularColor), E.specularColorMap && (b.specularColorMap.value = E.specularColorMap, t(E.specularColorMap, b.specularColorMapTransform)), E.specularIntensityMap && (b.specularIntensityMap.value = E.specularIntensityMap, t(E.specularIntensityMap, b.specularIntensityMapTransform));
  }
  function T(b, E) {
    E.matcap && (b.matcap.value = E.matcap);
  }
  function R(b, E) {
    const L = e.get(E).light;
    b.referencePosition.value.setFromMatrixPosition(L.matrixWorld), b.nearDistance.value = L.shadow.camera.near, b.farDistance.value = L.shadow.camera.far;
  }
  return {
    refreshFogUniforms: n,
    refreshMaterialUniforms: r
  };
}
function xO(s, e, t, n) {
  let r = {}, o = {}, c = [];
  const f = s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS);
  function p(L, C) {
    const U = C.program;
    n.uniformBlockBinding(L, U);
  }
  function h(L, C) {
    let U = r[L.id];
    U === void 0 && (T(L), U = g(L), r[L.id] = U, L.addEventListener("dispose", b));
    const Y = C.program;
    n.updateUBOMapping(L, Y);
    const B = e.render.frame;
    o[L.id] !== B && (x(L), o[L.id] = B);
  }
  function g(L) {
    const C = _();
    L.__bindingPointIndex = C;
    const U = s.createBuffer(), Y = L.__size, B = L.usage;
    return s.bindBuffer(s.UNIFORM_BUFFER, U), s.bufferData(s.UNIFORM_BUFFER, Y, B), s.bindBuffer(s.UNIFORM_BUFFER, null), s.bindBufferBase(s.UNIFORM_BUFFER, C, U), U;
  }
  function _() {
    for (let L = 0; L < f; L++)
      if (c.indexOf(L) === -1)
        return c.push(L), L;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function x(L) {
    const C = r[L.id], U = L.uniforms, Y = L.__cache;
    s.bindBuffer(s.UNIFORM_BUFFER, C);
    for (let B = 0, H = U.length; B < H; B++) {
      const k = Array.isArray(U[B]) ? U[B] : [U[B]];
      for (let F = 0, N = k.length; F < N; F++) {
        const X = k[F];
        if (M(X, B, F, Y) === !0) {
          const K = X.__offset, J = Array.isArray(X.value) ? X.value : [X.value];
          let ae = 0;
          for (let _e = 0; _e < J.length; _e++) {
            const Me = J[_e], Fe = R(Me);
            typeof Me == "number" || typeof Me == "boolean" ? (X.__data[0] = Me, s.bufferSubData(s.UNIFORM_BUFFER, K + ae, X.__data)) : Me.isMatrix3 ? (X.__data[0] = Me.elements[0], X.__data[1] = Me.elements[1], X.__data[2] = Me.elements[2], X.__data[3] = 0, X.__data[4] = Me.elements[3], X.__data[5] = Me.elements[4], X.__data[6] = Me.elements[5], X.__data[7] = 0, X.__data[8] = Me.elements[6], X.__data[9] = Me.elements[7], X.__data[10] = Me.elements[8], X.__data[11] = 0) : (Me.toArray(X.__data, ae), ae += Fe.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          s.bufferSubData(s.UNIFORM_BUFFER, K, X.__data);
        }
      }
    }
    s.bindBuffer(s.UNIFORM_BUFFER, null);
  }
  function M(L, C, U, Y) {
    const B = L.value, H = C + "_" + U;
    if (Y[H] === void 0)
      return typeof B == "number" || typeof B == "boolean" ? Y[H] = B : Y[H] = B.clone(), !0;
    {
      const k = Y[H];
      if (typeof B == "number" || typeof B == "boolean") {
        if (k !== B)
          return Y[H] = B, !0;
      } else if (k.equals(B) === !1)
        return k.copy(B), !0;
    }
    return !1;
  }
  function T(L) {
    const C = L.uniforms;
    let U = 0;
    const Y = 16;
    for (let H = 0, k = C.length; H < k; H++) {
      const F = Array.isArray(C[H]) ? C[H] : [C[H]];
      for (let N = 0, X = F.length; N < X; N++) {
        const K = F[N], J = Array.isArray(K.value) ? K.value : [K.value];
        for (let ae = 0, _e = J.length; ae < _e; ae++) {
          const Me = J[ae], Fe = R(Me), Q = U % Y;
          Q !== 0 && Y - Q < Fe.boundary && (U += Y - Q), K.__data = new Float32Array(Fe.storage / Float32Array.BYTES_PER_ELEMENT), K.__offset = U, U += Fe.storage;
        }
      }
    }
    const B = U % Y;
    return B > 0 && (U += Y - B), L.__size = U, L.__cache = {}, this;
  }
  function R(L) {
    const C = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof L == "number" || typeof L == "boolean" ? (C.boundary = 4, C.storage = 4) : L.isVector2 ? (C.boundary = 8, C.storage = 8) : L.isVector3 || L.isColor ? (C.boundary = 16, C.storage = 12) : L.isVector4 ? (C.boundary = 16, C.storage = 16) : L.isMatrix3 ? (C.boundary = 48, C.storage = 48) : L.isMatrix4 ? (C.boundary = 64, C.storage = 64) : L.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", L), C;
  }
  function b(L) {
    const C = L.target;
    C.removeEventListener("dispose", b);
    const U = c.indexOf(C.__bindingPointIndex);
    c.splice(U, 1), s.deleteBuffer(r[C.id]), delete r[C.id], delete o[C.id];
  }
  function E() {
    for (const L in r)
      s.deleteBuffer(r[L]);
    c = [], r = {}, o = {};
  }
  return {
    bind: p,
    update: h,
    dispose: E
  };
}
class SA {
  constructor(e = {}) {
    const {
      canvas: t = rA(),
      context: n = null,
      depth: r = !0,
      stencil: o = !1,
      alpha: c = !1,
      antialias: f = !1,
      premultipliedAlpha: p = !0,
      preserveDrawingBuffer: h = !1,
      powerPreference: g = "default",
      failIfMajorPerformanceCaveat: _ = !1
    } = e;
    this.isWebGLRenderer = !0;
    let x;
    if (n !== null) {
      if (typeof WebGLRenderingContext < "u" && n instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      x = n.getContextAttributes().alpha;
    } else
      x = c;
    const M = new Uint32Array(4), T = new Int32Array(4);
    let R = null, b = null;
    const E = [], L = [];
    this.domElement = t, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this._outputColorSpace = qa, this._useLegacyLights = !1, this.toneMapping = Xs, this.toneMappingExposure = 1;
    const C = this;
    let U = !1, Y = 0, B = 0, H = null, k = -1, F = null;
    const N = new Pn(), X = new Pn();
    let K = null;
    const J = new mt(0);
    let ae = 0, _e = t.width, Me = t.height, Fe = 1, Q = null, ue = null;
    const ne = new Pn(0, 0, _e, Me), be = new Pn(0, 0, _e, Me);
    let Oe = !1;
    const ht = new Fp();
    let ve = !1, Ue = !1;
    const Ye = new Ht(), Ge = new De(), gt = new q(), Pt = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    function Dt() {
      return H === null ? Fe : 1;
    }
    let ie = n;
    function Re(V, re) {
      const me = t.getContext(V, re);
      return me !== null ? me : null;
    }
    try {
      const V = {
        alpha: !0,
        depth: r,
        stencil: o,
        antialias: f,
        premultipliedAlpha: p,
        preserveDrawingBuffer: h,
        powerPreference: g,
        failIfMajorPerformanceCaveat: _
      };
      if ("setAttribute" in t && t.setAttribute("data-engine", `three.js r${Og}`), t.addEventListener("webglcontextlost", de, !1), t.addEventListener("webglcontextrestored", qe, !1), t.addEventListener("webglcontextcreationerror", Ke, !1), ie === null) {
        const re = "webgl2";
        if (ie = Re(re, V), ie === null)
          throw Re(re) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (V) {
      throw console.error("THREE.WebGLRenderer: " + V.message), V;
    }
    let Se, He, Be, Ve, W, O, se, xe, Ae, Pe, st, Ne, St, bt, Je, ft, Ft, vt, Te, Xe, ut, wt, et, en;
    function ot() {
      Se = new N3(ie), Se.init(), He = new A3(ie, Se, e), wt = new _A(ie, Se), Be = new fO(ie), Ve = new O3(ie), W = new $I(), O = new dO(ie, Se, Be, W, He, wt, Ve), se = new C3(C), xe = new D3(C), Ae = new kD(ie), et = new b3(ie, Ae), Pe = new U3(ie, Ae, Ve, et), st = new z3(ie, Pe, Ae, Ve), Te = new F3(ie, He, O), ft = new R3(W), Ne = new KI(C, se, xe, Se, He, et, ft), St = new _O(C, W), bt = new tO(), Je = new oO(Se), vt = new T3(C, se, xe, Be, st, x, p), Ft = new cO(C, st, He), en = new xO(ie, Ve, He, Be), Xe = new w3(ie, Se, Ve), ut = new I3(ie, Se, Ve), Ve.programs = Ne.programs, C.capabilities = He, C.extensions = Se, C.properties = W, C.renderLists = bt, C.shadowMap = Ft, C.state = Be, C.info = Ve;
    }
    ot();
    const G = new gO(C, ie);
    this.xr = G, this.getContext = function() {
      return ie;
    }, this.getContextAttributes = function() {
      return ie.getContextAttributes();
    }, this.forceContextLoss = function() {
      const V = Se.get("WEBGL_lose_context");
      V && V.loseContext();
    }, this.forceContextRestore = function() {
      const V = Se.get("WEBGL_lose_context");
      V && V.restoreContext();
    }, this.getPixelRatio = function() {
      return Fe;
    }, this.setPixelRatio = function(V) {
      V !== void 0 && (Fe = V, this.setSize(_e, Me, !1));
    }, this.getSize = function(V) {
      return V.set(_e, Me);
    }, this.setSize = function(V, re, me = !0) {
      if (G.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _e = V, Me = re, t.width = Math.floor(V * Fe), t.height = Math.floor(re * Fe), me === !0 && (t.style.width = V + "px", t.style.height = re + "px"), this.setViewport(0, 0, V, re);
    }, this.getDrawingBufferSize = function(V) {
      return V.set(_e * Fe, Me * Fe).floor();
    }, this.setDrawingBufferSize = function(V, re, me) {
      _e = V, Me = re, Fe = me, t.width = Math.floor(V * me), t.height = Math.floor(re * me), this.setViewport(0, 0, V, re);
    }, this.getCurrentViewport = function(V) {
      return V.copy(N);
    }, this.getViewport = function(V) {
      return V.copy(ne);
    }, this.setViewport = function(V, re, me, pe) {
      V.isVector4 ? ne.set(V.x, V.y, V.z, V.w) : ne.set(V, re, me, pe), Be.viewport(N.copy(ne).multiplyScalar(Fe).round());
    }, this.getScissor = function(V) {
      return V.copy(be);
    }, this.setScissor = function(V, re, me, pe) {
      V.isVector4 ? be.set(V.x, V.y, V.z, V.w) : be.set(V, re, me, pe), Be.scissor(X.copy(be).multiplyScalar(Fe).round());
    }, this.getScissorTest = function() {
      return Oe;
    }, this.setScissorTest = function(V) {
      Be.setScissorTest(Oe = V);
    }, this.setOpaqueSort = function(V) {
      Q = V;
    }, this.setTransparentSort = function(V) {
      ue = V;
    }, this.getClearColor = function(V) {
      return V.copy(vt.getClearColor());
    }, this.setClearColor = function() {
      vt.setClearColor.apply(vt, arguments);
    }, this.getClearAlpha = function() {
      return vt.getClearAlpha();
    }, this.setClearAlpha = function() {
      vt.setClearAlpha.apply(vt, arguments);
    }, this.clear = function(V = !0, re = !0, me = !0) {
      let pe = 0;
      if (V) {
        let he = !1;
        if (H !== null) {
          const tt = H.texture.format;
          he = tt === ES || tt === MS || tt === SS;
        }
        if (he) {
          const tt = H.texture.type, yt = tt === qs || tt === hc || tt === vS || tt === yd || tt === yS || tt === _S, At = vt.getClearColor(), Nt = vt.getClearAlpha(), Ct = At.r, zt = At.g, Bt = At.b;
          yt ? (M[0] = Ct, M[1] = zt, M[2] = Bt, M[3] = Nt, ie.clearBufferuiv(ie.COLOR, 0, M)) : (T[0] = Ct, T[1] = zt, T[2] = Bt, T[3] = Nt, ie.clearBufferiv(ie.COLOR, 0, T));
        } else
          pe |= ie.COLOR_BUFFER_BIT;
      }
      re && (pe |= ie.DEPTH_BUFFER_BIT), me && (pe |= ie.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), ie.clear(pe);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      t.removeEventListener("webglcontextlost", de, !1), t.removeEventListener("webglcontextrestored", qe, !1), t.removeEventListener("webglcontextcreationerror", Ke, !1), bt.dispose(), Je.dispose(), W.dispose(), se.dispose(), xe.dispose(), st.dispose(), et.dispose(), en.dispose(), Ne.dispose(), G.dispose(), G.removeEventListener("sessionstart", Yn), G.removeEventListener("sessionend", fi), Gi.stop();
    };
    function de(V) {
      V.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), U = !0;
    }
    function qe() {
      console.log("THREE.WebGLRenderer: Context Restored."), U = !1;
      const V = Ve.autoReset, re = Ft.enabled, me = Ft.autoUpdate, pe = Ft.needsUpdate, he = Ft.type;
      ot(), Ve.autoReset = V, Ft.enabled = re, Ft.autoUpdate = me, Ft.needsUpdate = pe, Ft.type = he;
    }
    function Ke(V) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", V.statusMessage);
    }
    function Ze(V) {
      const re = V.target;
      re.removeEventListener("dispose", Ze), bn(re);
    }
    function bn(V) {
      an(V), W.remove(V);
    }
    function an(V) {
      const re = W.get(V).programs;
      re !== void 0 && (re.forEach(function(me) {
        Ne.releaseProgram(me);
      }), V.isShaderMaterial && Ne.releaseShaderCache(V));
    }
    this.renderBufferDirect = function(V, re, me, pe, he, tt) {
      re === null && (re = Pt);
      const yt = he.isMesh && he.matrixWorld.determinant() < 0, At = Oi(V, re, me, pe, he);
      Be.setMaterial(pe, yt);
      let Nt = me.index, Ct = 1;
      if (pe.wireframe === !0) {
        if (Nt = Pe.getWireframeAttribute(me), Nt === void 0)
          return;
        Ct = 2;
      }
      const zt = me.drawRange, Bt = me.attributes.position;
      let In = zt.start * Ct, Xi = (zt.start + zt.count) * Ct;
      tt !== null && (In = Math.max(In, tt.start * Ct), Xi = Math.min(Xi, (tt.start + tt.count) * Ct)), Nt !== null ? (In = Math.max(In, 0), Xi = Math.min(Xi, Nt.count)) : Bt != null && (In = Math.max(In, 0), Xi = Math.min(Xi, Bt.count));
      const kn = Xi - In;
      if (kn < 0 || kn === 1 / 0)
        return;
      et.setup(he, pe, At, me, Nt);
      let bi, sn = Xe;
      if (Nt !== null && (bi = Ae.get(Nt), sn = ut, sn.setIndex(bi)), he.isMesh)
        pe.wireframe === !0 ? (Be.setLineWidth(pe.wireframeLinewidth * Dt()), sn.setMode(ie.LINES)) : sn.setMode(ie.TRIANGLES);
      else if (he.isLine) {
        let pt = pe.linewidth;
        pt === void 0 && (pt = 1), Be.setLineWidth(pt * Dt()), he.isLineSegments ? sn.setMode(ie.LINES) : he.isLineLoop ? sn.setMode(ie.LINE_LOOP) : sn.setMode(ie.LINE_STRIP);
      } else
        he.isPoints ? sn.setMode(ie.POINTS) : he.isSprite && sn.setMode(ie.TRIANGLES);
      if (he.isBatchedMesh)
        sn.renderMultiDraw(he._multiDrawStarts, he._multiDrawCounts, he._multiDrawCount);
      else if (he.isInstancedMesh)
        sn.renderInstances(In, kn, he.count);
      else if (me.isInstancedBufferGeometry) {
        const pt = me._maxInstanceCount !== void 0 ? me._maxInstanceCount : 1 / 0, yn = Math.min(me.instanceCount, pt);
        sn.renderInstances(In, kn, yn);
      } else
        sn.render(In, kn);
    };
    function gn(V, re, me) {
      V.transparent === !0 && V.side === ks && V.forceSinglePass === !1 ? (V.side = Dr, V.needsUpdate = !0, xa(V, re, me), V.side = Oo, V.needsUpdate = !0, xa(V, re, me), V.side = ks) : xa(V, re, me);
    }
    this.compile = function(V, re, me = null) {
      me === null && (me = V), b = Je.get(me), b.init(), L.push(b), me.traverseVisible(function(he) {
        he.isLight && he.layers.test(re.layers) && (b.pushLight(he), he.castShadow && b.pushShadow(he));
      }), V !== me && V.traverseVisible(function(he) {
        he.isLight && he.layers.test(re.layers) && (b.pushLight(he), he.castShadow && b.pushShadow(he));
      }), b.setupLights(C._useLegacyLights);
      const pe = /* @__PURE__ */ new Set();
      return V.traverse(function(he) {
        const tt = he.material;
        if (tt)
          if (Array.isArray(tt))
            for (let yt = 0; yt < tt.length; yt++) {
              const At = tt[yt];
              gn(At, me, he), pe.add(At);
            }
          else
            gn(tt, me, he), pe.add(tt);
      }), L.pop(), b = null, pe;
    }, this.compileAsync = function(V, re, me = null) {
      const pe = this.compile(V, re, me);
      return new Promise((he) => {
        function tt() {
          if (pe.forEach(function(yt) {
            W.get(yt).currentProgram.isReady() && pe.delete(yt);
          }), pe.size === 0) {
            he(V);
            return;
          }
          setTimeout(tt, 10);
        }
        Se.get("KHR_parallel_shader_compile") !== null ? tt() : setTimeout(tt, 10);
      });
    };
    let si = null;
    function _t(V) {
      si && si(V);
    }
    function Yn() {
      Gi.stop();
    }
    function fi() {
      Gi.start();
    }
    const Gi = new hA();
    Gi.setAnimationLoop(_t), typeof self < "u" && Gi.setContext(self), this.setAnimationLoop = function(V) {
      si = V, G.setAnimationLoop(V), V === null ? Gi.stop() : Gi.start();
    }, G.addEventListener("sessionstart", Yn), G.addEventListener("sessionend", fi), this.render = function(V, re) {
      if (re !== void 0 && re.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (U === !0)
        return;
      V.matrixWorldAutoUpdate === !0 && V.updateMatrixWorld(), re.parent === null && re.matrixWorldAutoUpdate === !0 && re.updateMatrixWorld(), G.enabled === !0 && G.isPresenting === !0 && (G.cameraAutoUpdate === !0 && G.updateCamera(re), re = G.getCamera()), V.isScene === !0 && V.onBeforeRender(C, V, re, H), b = Je.get(V, L.length), b.init(), L.push(b), Ye.multiplyMatrices(re.projectionMatrix, re.matrixWorldInverse), ht.setFromProjectionMatrix(Ye), Ue = this.localClippingEnabled, ve = ft.init(this.clippingPlanes, Ue), R = bt.get(V, E.length), R.init(), E.push(R), rr(V, re, 0, C.sortObjects), R.finish(), C.sortObjects === !0 && R.sort(Q, ue), this.info.render.frame++, ve === !0 && ft.beginShadows();
      const me = b.state.shadowsArray;
      if (Ft.render(me, V, re), ve === !0 && ft.endShadows(), this.info.autoReset === !0 && this.info.reset(), (G.enabled === !1 || G.isPresenting === !1 || G.hasDepthSensing() === !1) && vt.render(R, V), b.setupLights(C._useLegacyLights), re.isArrayCamera) {
        const pe = re.cameras;
        for (let he = 0, tt = pe.length; he < tt; he++) {
          const yt = pe[he];
          Wi(R, V, yt, yt.viewport);
        }
      } else
        Wi(R, V, re);
      H !== null && (O.updateMultisampleRenderTarget(H), O.updateRenderTargetMipmap(H)), V.isScene === !0 && V.onAfterRender(C, V, re), et.resetDefaultState(), k = -1, F = null, L.pop(), L.length > 0 ? b = L[L.length - 1] : b = null, E.pop(), E.length > 0 ? R = E[E.length - 1] : R = null;
    };
    function rr(V, re, me, pe) {
      if (V.visible === !1)
        return;
      if (V.layers.test(re.layers)) {
        if (V.isGroup)
          me = V.renderOrder;
        else if (V.isLOD)
          V.autoUpdate === !0 && V.update(re);
        else if (V.isLight)
          b.pushLight(V), V.castShadow && b.pushShadow(V);
        else if (V.isSprite) {
          if (!V.frustumCulled || ht.intersectsSprite(V)) {
            pe && gt.setFromMatrixPosition(V.matrixWorld).applyMatrix4(Ye);
            const yt = st.update(V), At = V.material;
            At.visible && R.push(V, yt, At, me, gt.z, null);
          }
        } else if ((V.isMesh || V.isLine || V.isPoints) && (!V.frustumCulled || ht.intersectsObject(V))) {
          const yt = st.update(V), At = V.material;
          if (pe && (V.boundingSphere !== void 0 ? (V.boundingSphere === null && V.computeBoundingSphere(), gt.copy(V.boundingSphere.center)) : (yt.boundingSphere === null && yt.computeBoundingSphere(), gt.copy(yt.boundingSphere.center)), gt.applyMatrix4(V.matrixWorld).applyMatrix4(Ye)), Array.isArray(At)) {
            const Nt = yt.groups;
            for (let Ct = 0, zt = Nt.length; Ct < zt; Ct++) {
              const Bt = Nt[Ct], In = At[Bt.materialIndex];
              In && In.visible && R.push(V, yt, In, me, gt.z, Bt);
            }
          } else
            At.visible && R.push(V, yt, At, me, gt.z, null);
        }
      }
      const tt = V.children;
      for (let yt = 0, At = tt.length; yt < At; yt++)
        rr(tt[yt], re, me, pe);
    }
    function Wi(V, re, me, pe) {
      const he = V.opaque, tt = V.transmissive, yt = V.transparent;
      b.setupLightsView(me), ve === !0 && ft.setGlobalState(C.clippingPlanes, me), tt.length > 0 && _c(he, tt, re, me), pe && Be.viewport(N.copy(pe)), he.length > 0 && _r(he, re, me), tt.length > 0 && _r(tt, re, me), yt.length > 0 && _r(yt, re, me), Be.buffers.depth.setTest(!0), Be.buffers.depth.setMask(!0), Be.buffers.color.setMask(!0), Be.setPolygonOffset(!1);
    }
    function _c(V, re, me, pe) {
      if ((me.isScene === !0 ? me.overrideMaterial : null) !== null)
        return;
      if (b.state.transmissionRenderTarget === null) {
        b.state.transmissionRenderTarget = new vs(1, 1, {
          generateMipmaps: !0,
          type: Se.has("EXT_color_buffer_half_float") || Se.has("EXT_color_buffer_float") ? mp : qs,
          minFilter: Gs,
          samples: 4,
          stencilBuffer: o
        });
        const Ct = W.get(b.state.transmissionRenderTarget);
        Ct.__isTransmissionRenderTarget = !0;
      }
      const tt = b.state.transmissionRenderTarget;
      C.getDrawingBufferSize(Ge), tt.setSize(Ge.x, Ge.y);
      const yt = C.getRenderTarget();
      C.setRenderTarget(tt), C.getClearColor(J), ae = C.getClearAlpha(), ae < 1 && C.setClearColor(16777215, 0.5), C.clear();
      const At = C.toneMapping;
      C.toneMapping = Xs, _r(V, me, pe), O.updateMultisampleRenderTarget(tt), O.updateRenderTargetMipmap(tt);
      let Nt = !1;
      for (let Ct = 0, zt = re.length; Ct < zt; Ct++) {
        const Bt = re[Ct], In = Bt.object, Xi = Bt.geometry, kn = Bt.material, bi = Bt.group;
        if (kn.side === ks && In.layers.test(pe.layers)) {
          const sn = kn.side;
          kn.side = Dr, kn.needsUpdate = !0, Zs(In, me, pe, Xi, kn, bi), kn.side = sn, kn.needsUpdate = !0, Nt = !0;
        }
      }
      Nt === !0 && (O.updateMultisampleRenderTarget(tt), O.updateRenderTargetMipmap(tt)), C.setRenderTarget(yt), C.setClearColor(J, ae), C.toneMapping = At;
    }
    function _r(V, re, me) {
      const pe = re.isScene === !0 ? re.overrideMaterial : null;
      for (let he = 0, tt = V.length; he < tt; he++) {
        const yt = V[he], At = yt.object, Nt = yt.geometry, Ct = pe === null ? yt.material : pe, zt = yt.group;
        At.layers.test(me.layers) && Zs(At, re, me, Nt, Ct, zt);
      }
    }
    function Zs(V, re, me, pe, he, tt) {
      V.onBeforeRender(C, re, me, pe, he, tt), V.modelViewMatrix.multiplyMatrices(me.matrixWorldInverse, V.matrixWorld), V.normalMatrix.getNormalMatrix(V.modelViewMatrix), he.onBeforeRender(C, re, me, pe, V, tt), he.transparent === !0 && he.side === ks && he.forceSinglePass === !1 ? (he.side = Dr, he.needsUpdate = !0, C.renderBufferDirect(me, re, pe, he, V, tt), he.side = Oo, he.needsUpdate = !0, C.renderBufferDirect(me, re, pe, he, V, tt), he.side = ks) : C.renderBufferDirect(me, re, pe, he, V, tt), V.onAfterRender(C, re, me, pe, he, tt);
    }
    function xa(V, re, me) {
      re.isScene !== !0 && (re = Pt);
      const pe = W.get(V), he = b.state.lights, tt = b.state.shadowsArray, yt = he.state.version, At = Ne.getParameters(V, he.state, tt, re, me), Nt = Ne.getProgramCacheKey(At);
      let Ct = pe.programs;
      pe.environment = V.isMeshStandardMaterial ? re.environment : null, pe.fog = re.fog, pe.envMap = (V.isMeshStandardMaterial ? xe : se).get(V.envMap || pe.environment), pe.envMapRotation = pe.environment !== null && V.envMap === null ? re.environmentRotation : V.envMapRotation, Ct === void 0 && (V.addEventListener("dispose", Ze), Ct = /* @__PURE__ */ new Map(), pe.programs = Ct);
      let zt = Ct.get(Nt);
      if (zt !== void 0) {
        if (pe.currentProgram === zt && pe.lightsStateVersion === yt)
          return xs(V, At), zt;
      } else
        At.uniforms = Ne.getUniforms(V), V.onBuild(me, At, C), V.onBeforeCompile(At, C), zt = Ne.acquireProgram(At, Nt), Ct.set(Nt, zt), pe.uniforms = At.uniforms;
      const Bt = pe.uniforms;
      return (!V.isShaderMaterial && !V.isRawShaderMaterial || V.clipping === !0) && (Bt.clippingPlanes = ft.uniform), xs(V, At), pe.needsLights = Sc(V), pe.lightsStateVersion = yt, pe.needsLights && (Bt.ambientLightColor.value = he.state.ambient, Bt.lightProbe.value = he.state.probe, Bt.directionalLights.value = he.state.directional, Bt.directionalLightShadows.value = he.state.directionalShadow, Bt.spotLights.value = he.state.spot, Bt.spotLightShadows.value = he.state.spotShadow, Bt.rectAreaLights.value = he.state.rectArea, Bt.ltc_1.value = he.state.rectAreaLTC1, Bt.ltc_2.value = he.state.rectAreaLTC2, Bt.pointLights.value = he.state.point, Bt.pointLightShadows.value = he.state.pointShadow, Bt.hemisphereLights.value = he.state.hemi, Bt.directionalShadowMap.value = he.state.directionalShadowMap, Bt.directionalShadowMatrix.value = he.state.directionalShadowMatrix, Bt.spotShadowMap.value = he.state.spotShadowMap, Bt.spotLightMatrix.value = he.state.spotLightMatrix, Bt.spotLightMap.value = he.state.spotLightMap, Bt.pointShadowMap.value = he.state.pointShadowMap, Bt.pointShadowMatrix.value = he.state.pointShadowMatrix), pe.currentProgram = zt, pe.uniformsList = null, zt;
    }
    function xc(V) {
      if (V.uniformsList === null) {
        const re = V.currentProgram.getUniforms();
        V.uniformsList = Ag.seqWithValue(re.seq, V.uniforms);
      }
      return V.uniformsList;
    }
    function xs(V, re) {
      const me = W.get(V);
      me.outputColorSpace = re.outputColorSpace, me.batching = re.batching, me.instancing = re.instancing, me.instancingColor = re.instancingColor, me.instancingMorph = re.instancingMorph, me.skinning = re.skinning, me.morphTargets = re.morphTargets, me.morphNormals = re.morphNormals, me.morphColors = re.morphColors, me.morphTargetsCount = re.morphTargetsCount, me.numClippingPlanes = re.numClippingPlanes, me.numIntersection = re.numClipIntersection, me.vertexAlphas = re.vertexAlphas, me.vertexTangents = re.vertexTangents, me.toneMapping = re.toneMapping;
    }
    function Oi(V, re, me, pe, he) {
      re.isScene !== !0 && (re = Pt), O.resetTextureUnits();
      const tt = re.fog, yt = pe.isMeshStandardMaterial ? re.environment : null, At = H === null ? C.outputColorSpace : H.isXRRenderTarget === !0 ? H.texture.colorSpace : Bo, Nt = (pe.isMeshStandardMaterial ? xe : se).get(pe.envMap || yt), Ct = pe.vertexColors === !0 && !!me.attributes.color && me.attributes.color.itemSize === 4, zt = !!me.attributes.tangent && (!!pe.normalMap || pe.anisotropy > 0), Bt = !!me.morphAttributes.position, In = !!me.morphAttributes.normal, Xi = !!me.morphAttributes.color;
      let kn = Xs;
      pe.toneMapped && (H === null || H.isXRRenderTarget === !0) && (kn = C.toneMapping);
      const bi = me.morphAttributes.position || me.morphAttributes.normal || me.morphAttributes.color, sn = bi !== void 0 ? bi.length : 0, pt = W.get(pe), yn = b.state.lights;
      if (ve === !0 && (Ue === !0 || V !== F)) {
        const Yi = V === F && pe.id === k;
        ft.setState(pe, V, Yi);
      }
      let on = !1;
      pe.version === pt.__version ? (pt.needsLights && pt.lightsStateVersion !== yn.state.version || pt.outputColorSpace !== At || he.isBatchedMesh && pt.batching === !1 || !he.isBatchedMesh && pt.batching === !0 || he.isInstancedMesh && pt.instancing === !1 || !he.isInstancedMesh && pt.instancing === !0 || he.isSkinnedMesh && pt.skinning === !1 || !he.isSkinnedMesh && pt.skinning === !0 || he.isInstancedMesh && pt.instancingColor === !0 && he.instanceColor === null || he.isInstancedMesh && pt.instancingColor === !1 && he.instanceColor !== null || he.isInstancedMesh && pt.instancingMorph === !0 && he.morphTexture === null || he.isInstancedMesh && pt.instancingMorph === !1 && he.morphTexture !== null || pt.envMap !== Nt || pe.fog === !0 && pt.fog !== tt || pt.numClippingPlanes !== void 0 && (pt.numClippingPlanes !== ft.numPlanes || pt.numIntersection !== ft.numIntersection) || pt.vertexAlphas !== Ct || pt.vertexTangents !== zt || pt.morphTargets !== Bt || pt.morphNormals !== In || pt.morphColors !== Xi || pt.toneMapping !== kn || pt.morphTargetsCount !== sn) && (on = !0) : (on = !0, pt.__version = pe.version);
      let Bn = pt.currentProgram;
      on === !0 && (Bn = xa(pe, re, he));
      let Sn = !1, qi = !1, Sa = !1;
      const hn = Bn.getUniforms(), xr = pt.uniforms;
      if (Be.useProgram(Bn.program) && (Sn = !0, qi = !0, Sa = !0), pe.id !== k && (k = pe.id, qi = !0), Sn || F !== V) {
        hn.setValue(ie, "projectionMatrix", V.projectionMatrix), hn.setValue(ie, "viewMatrix", V.matrixWorldInverse);
        const Yi = hn.map.cameraPosition;
        Yi !== void 0 && Yi.setValue(ie, gt.setFromMatrixPosition(V.matrixWorld)), He.logarithmicDepthBuffer && hn.setValue(
          ie,
          "logDepthBufFC",
          2 / (Math.log(V.far + 1) / Math.LN2)
        ), (pe.isMeshPhongMaterial || pe.isMeshToonMaterial || pe.isMeshLambertMaterial || pe.isMeshBasicMaterial || pe.isMeshStandardMaterial || pe.isShaderMaterial) && hn.setValue(ie, "isOrthographic", V.isOrthographicCamera === !0), F !== V && (F = V, qi = !0, Sa = !0);
      }
      if (he.isSkinnedMesh) {
        hn.setOptional(ie, he, "bindMatrix"), hn.setOptional(ie, he, "bindMatrixInverse");
        const Yi = he.skeleton;
        Yi && (Yi.boneTexture === null && Yi.computeBoneTexture(), hn.setValue(ie, "boneTexture", Yi.boneTexture, O));
      }
      he.isBatchedMesh && (hn.setOptional(ie, he, "batchingTexture"), hn.setValue(ie, "batchingTexture", he._matricesTexture, O));
      const Vo = me.morphAttributes;
      if ((Vo.position !== void 0 || Vo.normal !== void 0 || Vo.color !== void 0) && Te.update(he, me, Bn), (qi || pt.receiveShadow !== he.receiveShadow) && (pt.receiveShadow = he.receiveShadow, hn.setValue(ie, "receiveShadow", he.receiveShadow)), pe.isMeshGouraudMaterial && pe.envMap !== null && (xr.envMap.value = Nt, xr.flipEnvMap.value = Nt.isCubeTexture && Nt.isRenderTargetTexture === !1 ? -1 : 1), pe.isMeshStandardMaterial && pe.envMap === null && re.environment !== null && (xr.envMapIntensity.value = re.environmentIntensity), qi && (hn.setValue(ie, "toneMappingExposure", C.toneMappingExposure), pt.needsLights && Kl(xr, Sa), tt && pe.fog === !0 && St.refreshFogUniforms(xr, tt), St.refreshMaterialUniforms(xr, pe, Fe, Me, b.state.transmissionRenderTarget), Ag.upload(ie, xc(pt), xr, O)), pe.isShaderMaterial && pe.uniformsNeedUpdate === !0 && (Ag.upload(ie, xc(pt), xr, O), pe.uniformsNeedUpdate = !1), pe.isSpriteMaterial && hn.setValue(ie, "center", he.center), hn.setValue(ie, "modelViewMatrix", he.modelViewMatrix), hn.setValue(ie, "normalMatrix", he.normalMatrix), hn.setValue(ie, "modelMatrix", he.matrixWorld), pe.isShaderMaterial || pe.isRawShaderMaterial) {
        const Yi = pe.uniformsGroups;
        for (let Ma = 0, $l = Yi.length; Ma < $l; Ma++) {
          const ji = Yi[Ma];
          en.update(ji, Bn), en.bind(ji, Bn);
        }
      }
      return Bn;
    }
    function Kl(V, re) {
      V.ambientLightColor.needsUpdate = re, V.lightProbe.needsUpdate = re, V.directionalLights.needsUpdate = re, V.directionalLightShadows.needsUpdate = re, V.pointLights.needsUpdate = re, V.pointLightShadows.needsUpdate = re, V.spotLights.needsUpdate = re, V.spotLightShadows.needsUpdate = re, V.rectAreaLights.needsUpdate = re, V.hemisphereLights.needsUpdate = re;
    }
    function Sc(V) {
      return V.isMeshLambertMaterial || V.isMeshToonMaterial || V.isMeshPhongMaterial || V.isMeshStandardMaterial || V.isShadowMaterial || V.isShaderMaterial && V.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return Y;
    }, this.getActiveMipmapLevel = function() {
      return B;
    }, this.getRenderTarget = function() {
      return H;
    }, this.setRenderTargetTextures = function(V, re, me) {
      W.get(V.texture).__webglTexture = re, W.get(V.depthTexture).__webglTexture = me;
      const pe = W.get(V);
      pe.__hasExternalTextures = !0, pe.__autoAllocateDepthBuffer = me === void 0, pe.__autoAllocateDepthBuffer || Se.has("WEBGL_multisampled_render_to_texture") === !0 && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), pe.__useRenderToTexture = !1);
    }, this.setRenderTargetFramebuffer = function(V, re) {
      const me = W.get(V);
      me.__webglFramebuffer = re, me.__useDefaultFramebuffer = re === void 0;
    }, this.setRenderTarget = function(V, re = 0, me = 0) {
      H = V, Y = re, B = me;
      let pe = !0, he = null, tt = !1, yt = !1;
      if (V) {
        const Nt = W.get(V);
        Nt.__useDefaultFramebuffer !== void 0 ? (Be.bindFramebuffer(ie.FRAMEBUFFER, null), pe = !1) : Nt.__webglFramebuffer === void 0 ? O.setupRenderTarget(V) : Nt.__hasExternalTextures && O.rebindTextures(V, W.get(V.texture).__webglTexture, W.get(V.depthTexture).__webglTexture);
        const Ct = V.texture;
        (Ct.isData3DTexture || Ct.isDataArrayTexture || Ct.isCompressedArrayTexture) && (yt = !0);
        const zt = W.get(V).__webglFramebuffer;
        V.isWebGLCubeRenderTarget ? (Array.isArray(zt[re]) ? he = zt[re][me] : he = zt[re], tt = !0) : V.samples > 0 && O.useMultisampledRTT(V) === !1 ? he = W.get(V).__webglMultisampledFramebuffer : Array.isArray(zt) ? he = zt[me] : he = zt, N.copy(V.viewport), X.copy(V.scissor), K = V.scissorTest;
      } else
        N.copy(ne).multiplyScalar(Fe).floor(), X.copy(be).multiplyScalar(Fe).floor(), K = Oe;
      if (Be.bindFramebuffer(ie.FRAMEBUFFER, he) && pe && Be.drawBuffers(V, he), Be.viewport(N), Be.scissor(X), Be.setScissorTest(K), tt) {
        const Nt = W.get(V.texture);
        ie.framebufferTexture2D(ie.FRAMEBUFFER, ie.COLOR_ATTACHMENT0, ie.TEXTURE_CUBE_MAP_POSITIVE_X + re, Nt.__webglTexture, me);
      } else if (yt) {
        const Nt = W.get(V.texture), Ct = re || 0;
        ie.framebufferTextureLayer(ie.FRAMEBUFFER, ie.COLOR_ATTACHMENT0, Nt.__webglTexture, me || 0, Ct);
      }
      k = -1;
    }, this.readRenderTargetPixels = function(V, re, me, pe, he, tt, yt) {
      if (!(V && V.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let At = W.get(V).__webglFramebuffer;
      if (V.isWebGLCubeRenderTarget && yt !== void 0 && (At = At[yt]), At) {
        Be.bindFramebuffer(ie.FRAMEBUFFER, At);
        try {
          const Nt = V.texture, Ct = Nt.format, zt = Nt.type;
          if (Ct !== Qr && wt.convert(Ct) !== ie.getParameter(ie.IMPLEMENTATION_COLOR_READ_FORMAT)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          const Bt = zt === mp && (Se.has("EXT_color_buffer_half_float") || Se.has("EXT_color_buffer_float"));
          if (zt !== qs && wt.convert(zt) !== ie.getParameter(ie.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
          zt !== ja && !Bt) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          re >= 0 && re <= V.width - pe && me >= 0 && me <= V.height - he && ie.readPixels(re, me, pe, he, wt.convert(Ct), wt.convert(zt), tt);
        } finally {
          const Nt = H !== null ? W.get(H).__webglFramebuffer : null;
          Be.bindFramebuffer(ie.FRAMEBUFFER, Nt);
        }
      }
    }, this.copyFramebufferToTexture = function(V, re, me = 0) {
      const pe = Math.pow(2, -me), he = Math.floor(re.image.width * pe), tt = Math.floor(re.image.height * pe);
      O.setTexture2D(re, 0), ie.copyTexSubImage2D(ie.TEXTURE_2D, me, 0, 0, V.x, V.y, he, tt), Be.unbindTexture();
    }, this.copyTextureToTexture = function(V, re, me, pe = 0) {
      const he = re.image.width, tt = re.image.height, yt = wt.convert(me.format), At = wt.convert(me.type);
      O.setTexture2D(me, 0), ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL, me.flipY), ie.pixelStorei(ie.UNPACK_PREMULTIPLY_ALPHA_WEBGL, me.premultiplyAlpha), ie.pixelStorei(ie.UNPACK_ALIGNMENT, me.unpackAlignment), re.isDataTexture ? ie.texSubImage2D(ie.TEXTURE_2D, pe, V.x, V.y, he, tt, yt, At, re.image.data) : re.isCompressedTexture ? ie.compressedTexSubImage2D(ie.TEXTURE_2D, pe, V.x, V.y, re.mipmaps[0].width, re.mipmaps[0].height, yt, re.mipmaps[0].data) : ie.texSubImage2D(ie.TEXTURE_2D, pe, V.x, V.y, yt, At, re.image), pe === 0 && me.generateMipmaps && ie.generateMipmap(ie.TEXTURE_2D), Be.unbindTexture();
    }, this.copyTextureToTexture3D = function(V, re, me, pe, he = 0) {
      const tt = Math.round(V.max.x - V.min.x), yt = Math.round(V.max.y - V.min.y), At = V.max.z - V.min.z + 1, Nt = wt.convert(pe.format), Ct = wt.convert(pe.type);
      let zt;
      if (pe.isData3DTexture)
        O.setTexture3D(pe, 0), zt = ie.TEXTURE_3D;
      else if (pe.isDataArrayTexture || pe.isCompressedArrayTexture)
        O.setTexture2DArray(pe, 0), zt = ie.TEXTURE_2D_ARRAY;
      else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      ie.pixelStorei(ie.UNPACK_FLIP_Y_WEBGL, pe.flipY), ie.pixelStorei(ie.UNPACK_PREMULTIPLY_ALPHA_WEBGL, pe.premultiplyAlpha), ie.pixelStorei(ie.UNPACK_ALIGNMENT, pe.unpackAlignment);
      const Bt = ie.getParameter(ie.UNPACK_ROW_LENGTH), In = ie.getParameter(ie.UNPACK_IMAGE_HEIGHT), Xi = ie.getParameter(ie.UNPACK_SKIP_PIXELS), kn = ie.getParameter(ie.UNPACK_SKIP_ROWS), bi = ie.getParameter(ie.UNPACK_SKIP_IMAGES), sn = me.isCompressedTexture ? me.mipmaps[he] : me.image;
      ie.pixelStorei(ie.UNPACK_ROW_LENGTH, sn.width), ie.pixelStorei(ie.UNPACK_IMAGE_HEIGHT, sn.height), ie.pixelStorei(ie.UNPACK_SKIP_PIXELS, V.min.x), ie.pixelStorei(ie.UNPACK_SKIP_ROWS, V.min.y), ie.pixelStorei(ie.UNPACK_SKIP_IMAGES, V.min.z), me.isDataTexture || me.isData3DTexture ? ie.texSubImage3D(zt, he, re.x, re.y, re.z, tt, yt, At, Nt, Ct, sn.data) : pe.isCompressedArrayTexture ? ie.compressedTexSubImage3D(zt, he, re.x, re.y, re.z, tt, yt, At, Nt, sn.data) : ie.texSubImage3D(zt, he, re.x, re.y, re.z, tt, yt, At, Nt, Ct, sn), ie.pixelStorei(ie.UNPACK_ROW_LENGTH, Bt), ie.pixelStorei(ie.UNPACK_IMAGE_HEIGHT, In), ie.pixelStorei(ie.UNPACK_SKIP_PIXELS, Xi), ie.pixelStorei(ie.UNPACK_SKIP_ROWS, kn), ie.pixelStorei(ie.UNPACK_SKIP_IMAGES, bi), he === 0 && pe.generateMipmaps && ie.generateMipmap(zt), Be.unbindTexture();
    }, this.initTexture = function(V) {
      V.isCubeTexture ? O.setTextureCube(V, 0) : V.isData3DTexture ? O.setTexture3D(V, 0) : V.isDataArrayTexture || V.isCompressedArrayTexture ? O.setTexture2DArray(V, 0) : O.setTexture2D(V, 0), Be.unbindTexture();
    }, this.resetState = function() {
      Y = 0, B = 0, H = null, Be.reset(), et.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  get coordinateSystem() {
    return Ws;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const t = this.getContext();
    t.drawingBufferColorSpace = e === Hg ? "display-p3" : "srgb", t.unpackColorSpace = Ln.workingColorSpace === Up ? "display-p3" : "srgb";
  }
  get useLegacyLights() {
    return console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights;
  }
  set useLegacyLights(e) {
    console.warn("THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733."), this._useLegacyLights = e;
  }
}
class Gg {
  constructor(e, t = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new mt(e), this.density = t;
  }
  clone() {
    return new Gg(this.color, this.density);
  }
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Wg {
  constructor(e, t = 1, n = 1e3) {
    this.isFog = !0, this.name = "", this.color = new mt(e), this.near = t, this.far = n;
  }
  clone() {
    return new Wg(this.color, this.near, this.far);
  }
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
let Pg = class extends xn {
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new _a(), this.environmentIntensity = 1, this.environmentRotation = new _a(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, t) {
    return super.copy(e, t), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return this.fog !== null && (t.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (t.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (t.object.backgroundIntensity = this.backgroundIntensity), t.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (t.object.environmentIntensity = this.environmentIntensity), t.object.environmentRotation = this.environmentRotation.toArray(), t;
  }
};
class Xg {
  constructor(e, t) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = t, this.count = e !== void 0 ? e.length / t : 0, this.usage = Mp, this._updateRange = { offset: 0, count: -1 }, this.updateRanges = [], this.version = 0, this.uuid = ya();
  }
  onUploadCallback() {
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  get updateRange() {
    return aA("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead."), this._updateRange;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  addUpdateRange(e, t) {
    this.updateRanges.push({ start: e, count: t });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  copyAt(e, t, n) {
    e *= this.stride, n *= t.stride;
    for (let r = 0, o = this.stride; r < o; r++)
      this.array[e + r] = t.array[n + r];
    return this;
  }
  set(e, t = 0) {
    return this.array.set(e, t), this;
  }
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ya()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const t = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), n = new this.constructor(t, this.stride);
    return n.setUsage(this.usage), n;
  }
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = ya()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Cr = /* @__PURE__ */ new q();
class pc {
  constructor(e, t, n, r = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = t, this.offset = n, this.normalized = r;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  applyMatrix4(e) {
    for (let t = 0, n = this.data.count; t < n; t++)
      Cr.fromBufferAttribute(this, t), Cr.applyMatrix4(e), this.setXYZ(t, Cr.x, Cr.y, Cr.z);
    return this;
  }
  applyNormalMatrix(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Cr.fromBufferAttribute(this, t), Cr.applyNormalMatrix(e), this.setXYZ(t, Cr.x, Cr.y, Cr.z);
    return this;
  }
  transformDirection(e) {
    for (let t = 0, n = this.count; t < n; t++)
      Cr.fromBufferAttribute(this, t), Cr.transformDirection(e), this.setXYZ(t, Cr.x, Cr.y, Cr.z);
    return this;
  }
  getComponent(e, t) {
    let n = this.array[e * this.data.stride + this.offset + t];
    return this.normalized && (n = Pr(n, this.array)), n;
  }
  setComponent(e, t, n) {
    return this.normalized && (n = jt(n, this.array)), this.data.array[e * this.data.stride + this.offset + t] = n, this;
  }
  setX(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.data.array[e * this.data.stride + this.offset] = t, this;
  }
  setY(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = t, this;
  }
  setZ(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = t, this;
  }
  setW(e, t) {
    return this.normalized && (t = jt(t, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = t, this;
  }
  getX(e) {
    let t = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  getY(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  getZ(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  getW(e) {
    let t = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (t = Pr(t, this.array)), t;
  }
  setXY(e, t, n) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = jt(t, this.array), n = jt(n, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this;
  }
  setXYZ(e, t, n, r) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this;
  }
  setXYZW(e, t, n, r, o) {
    return e = e * this.data.stride + this.offset, this.normalized && (t = jt(t, this.array), n = jt(n, this.array), r = jt(r, this.array), o = jt(o, this.array)), this.data.array[e + 0] = t, this.data.array[e + 1] = n, this.data.array[e + 2] = r, this.data.array[e + 3] = o, this;
  }
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const r = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[r + o]);
      }
      return new Dn(new this.array.constructor(t), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new pc(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const t = [];
      for (let n = 0; n < this.count; n++) {
        const r = n * this.data.stride + this.offset;
        for (let o = 0; o < this.itemSize; o++)
          t.push(this.data.array[r + o]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: t,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class IS extends ir {
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new mt(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let jf;
const jh = /* @__PURE__ */ new q(), Zf = /* @__PURE__ */ new q(), Jf = /* @__PURE__ */ new q(), Qf = /* @__PURE__ */ new De(), Zh = /* @__PURE__ */ new De(), MA = /* @__PURE__ */ new Ht(), Zv = /* @__PURE__ */ new q(), Jh = /* @__PURE__ */ new q(), Jv = /* @__PURE__ */ new q(), FT = /* @__PURE__ */ new De(), Z_ = /* @__PURE__ */ new De(), zT = /* @__PURE__ */ new De();
class EA extends xn {
  constructor(e = new IS()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", jf === void 0) {
      jf = new $t();
      const t = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), n = new Xg(t, 5);
      jf.setIndex([0, 1, 2, 0, 2, 3]), jf.setAttribute("position", new pc(n, 3, 0, !1)), jf.setAttribute("uv", new pc(n, 2, 3, !1));
    }
    this.geometry = jf, this.material = e, this.center = new De(0.5, 0.5);
  }
  raycast(e, t) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Zf.setFromMatrixScale(this.matrixWorld), MA.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), Jf.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Zf.multiplyScalar(-Jf.z);
    const n = this.material.rotation;
    let r, o;
    n !== 0 && (o = Math.cos(n), r = Math.sin(n));
    const c = this.center;
    Qv(Zv.set(-0.5, -0.5, 0), Jf, c, Zf, r, o), Qv(Jh.set(0.5, -0.5, 0), Jf, c, Zf, r, o), Qv(Jv.set(0.5, 0.5, 0), Jf, c, Zf, r, o), FT.set(0, 0), Z_.set(1, 0), zT.set(1, 1);
    let f = e.ray.intersectTriangle(Zv, Jh, Jv, !1, jh);
    if (f === null && (Qv(Jh.set(-0.5, 0.5, 0), Jf, c, Zf, r, o), Z_.set(0, 1), f = e.ray.intersectTriangle(Zv, Jv, Jh, !1, jh), f === null))
      return;
    const p = e.ray.origin.distanceTo(jh);
    p < e.near || p > e.far || t.push({
      distance: p,
      point: jh.clone(),
      uv: ga.getInterpolation(jh, Zv, Jh, Jv, FT, Z_, zT, new De()),
      face: null,
      object: this
    });
  }
  copy(e, t) {
    return super.copy(e, t), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function Qv(s, e, t, n, r, o) {
  Qf.subVectors(s, t).addScalar(0.5).multiply(n), r !== void 0 ? (Zh.x = o * Qf.x - r * Qf.y, Zh.y = r * Qf.x + o * Qf.y) : Zh.copy(Qf), s.copy(e), s.x += Zh.x, s.y += Zh.y, s.applyMatrix4(MA);
}
const Kv = /* @__PURE__ */ new q(), BT = /* @__PURE__ */ new q();
class TA extends xn {
  constructor() {
    super(), this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      levels: {
        enumerable: !0,
        value: []
      },
      isLOD: {
        value: !0
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const t = e.levels;
    for (let n = 0, r = t.length; n < r; n++) {
      const o = t[n];
      this.addLevel(o.object.clone(), o.distance, o.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  addLevel(e, t = 0, n = 0) {
    t = Math.abs(t);
    const r = this.levels;
    let o;
    for (o = 0; o < r.length && !(t < r[o].distance); o++)
      ;
    return r.splice(o, 0, { distance: t, hysteresis: n, object: e }), this.add(e), this;
  }
  getCurrentLevel() {
    return this._currentLevel;
  }
  getObjectForDistance(e) {
    const t = this.levels;
    if (t.length > 0) {
      let n, r;
      for (n = 1, r = t.length; n < r; n++) {
        let o = t[n].distance;
        if (t[n].object.visible && (o -= o * t[n].hysteresis), e < o)
          break;
      }
      return t[n - 1].object;
    }
    return null;
  }
  raycast(e, t) {
    if (this.levels.length > 0) {
      Kv.setFromMatrixPosition(this.matrixWorld);
      const r = e.ray.origin.distanceTo(Kv);
      this.getObjectForDistance(r).raycast(e, t);
    }
  }
  update(e) {
    const t = this.levels;
    if (t.length > 1) {
      Kv.setFromMatrixPosition(e.matrixWorld), BT.setFromMatrixPosition(this.matrixWorld);
      const n = Kv.distanceTo(BT) / e.zoom;
      t[0].object.visible = !0;
      let r, o;
      for (r = 1, o = t.length; r < o; r++) {
        let c = t[r].distance;
        if (t[r].object.visible && (c -= c * t[r].hysteresis), n >= c)
          t[r - 1].object.visible = !1, t[r].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = r - 1; r < o; r++)
        t[r].object.visible = !1;
    }
  }
  toJSON(e) {
    const t = super.toJSON(e);
    this.autoUpdate === !1 && (t.object.autoUpdate = !1), t.object.levels = [];
    const n = this.levels;
    for (let r = 0, o = n.length; r < o; r++) {
      const c = n[r];
      t.object.levels.push({
        object: c.object.uuid,
        distance: c.distance,
        hysteresis: c.hysteresis
      });
    }
    return t;
  }
}
const HT = /* @__PURE__ */ new q(), VT = /* @__PURE__ */ new Pn(), kT = /* @__PURE__ */ new Pn(), SO = /* @__PURE__ */ new q(), GT = /* @__PURE__ */ new Ht(), $v = /* @__PURE__ */ new q(), J_ = /* @__PURE__ */ new yr(), WT = /* @__PURE__ */ new Ht(), Q_ = /* @__PURE__ */ new _d();
class bA extends Ti {
  constructor(e, t) {
    super(e, t), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = wx, this.bindMatrix = new Ht(), this.bindMatrixInverse = new Ht(), this.boundingBox = null, this.boundingSphere = null;
  }
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new Nr()), this.boundingBox.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      this.getVertexPosition(n, $v), this.boundingBox.expandByPoint($v);
  }
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new yr()), this.boundingSphere.makeEmpty();
    const t = e.getAttribute("position");
    for (let n = 0; n < t.count; n++)
      this.getVertexPosition(n, $v), this.boundingSphere.expandByPoint($v);
  }
  copy(e, t) {
    return super.copy(e, t), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, t) {
    const n = this.material, r = this.matrixWorld;
    n !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), J_.copy(this.boundingSphere), J_.applyMatrix4(r), e.ray.intersectsSphere(J_) !== !1 && (WT.copy(r).invert(), Q_.copy(e.ray).applyMatrix4(WT), !(this.boundingBox !== null && Q_.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, t, Q_)));
  }
  getVertexPosition(e, t) {
    return super.getVertexPosition(e, t), this.applyBoneTransform(e, t), t;
  }
  bind(e, t) {
    this.skeleton = e, t === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), t = this.matrixWorld), this.bindMatrix.copy(t), this.bindMatrixInverse.copy(t).invert();
  }
  pose() {
    this.skeleton.pose();
  }
  normalizeSkinWeights() {
    const e = new Pn(), t = this.geometry.attributes.skinWeight;
    for (let n = 0, r = t.count; n < r; n++) {
      e.fromBufferAttribute(t, n);
      const o = 1 / e.manhattanLength();
      o !== 1 / 0 ? e.multiplyScalar(o) : e.set(1, 0, 0, 0), t.setXYZW(n, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === wx ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === Uw ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  applyBoneTransform(e, t) {
    const n = this.skeleton, r = this.geometry;
    VT.fromBufferAttribute(r.attributes.skinIndex, e), kT.fromBufferAttribute(r.attributes.skinWeight, e), HT.copy(t).applyMatrix4(this.bindMatrix), t.set(0, 0, 0);
    for (let o = 0; o < 4; o++) {
      const c = kT.getComponent(o);
      if (c !== 0) {
        const f = VT.getComponent(o);
        GT.multiplyMatrices(n.bones[f].matrixWorld, n.boneInverses[f]), t.addScaledVector(SO.copy(HT).applyMatrix4(GT), c);
      }
    }
    return t.applyMatrix4(this.bindMatrixInverse);
  }
}
class OS extends xn {
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class Xl extends ai {
  constructor(e = null, t = 1, n = 1, r, o, c, f, p, h = ki, g = ki, _, x) {
    super(null, c, f, p, h, g, r, o, _, x), this.isDataTexture = !0, this.image = { data: e, width: t, height: n }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const XT = /* @__PURE__ */ new Ht(), MO = /* @__PURE__ */ new Ht();
class qg {
  constructor(e = [], t = []) {
    this.uuid = ya(), this.bones = e.slice(0), this.boneInverses = t, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  init() {
    const e = this.bones, t = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), t.length === 0)
      this.calculateInverses();
    else if (e.length !== t.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let n = 0, r = this.bones.length; n < r; n++)
        this.boneInverses.push(new Ht());
    }
  }
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = new Ht();
      this.bones[e] && n.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(n);
    }
  }
  pose() {
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && n.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, t = this.bones.length; e < t; e++) {
      const n = this.bones[e];
      n && (n.parent && n.parent.isBone ? (n.matrix.copy(n.parent.matrixWorld).invert(), n.matrix.multiply(n.matrixWorld)) : n.matrix.copy(n.matrixWorld), n.matrix.decompose(n.position, n.quaternion, n.scale));
    }
  }
  update() {
    const e = this.bones, t = this.boneInverses, n = this.boneMatrices, r = this.boneTexture;
    for (let o = 0, c = e.length; o < c; o++) {
      const f = e[o] ? e[o].matrixWorld : MO;
      XT.multiplyMatrices(f, t[o]), XT.toArray(n, o * 16);
    }
    r !== null && (r.needsUpdate = !0);
  }
  clone() {
    return new qg(this.bones, this.boneInverses);
  }
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4);
    t.set(this.boneMatrices);
    const n = new Xl(t, e, e, Qr, ja);
    return n.needsUpdate = !0, this.boneMatrices = t, this.boneTexture = n, this;
  }
  getBoneByName(e) {
    for (let t = 0, n = this.bones.length; t < n; t++) {
      const r = this.bones[t];
      if (r.name === e)
        return r;
    }
  }
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  fromJSON(e, t) {
    this.uuid = e.uuid;
    for (let n = 0, r = e.bones.length; n < r; n++) {
      const o = e.bones[n];
      let c = t[o];
      c === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", o), c = new OS()), this.bones.push(c), this.boneInverses.push(new Ht().fromArray(e.boneInverses[n]));
    }
    return this.init(), this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const t = this.bones, n = this.boneInverses;
    for (let r = 0, o = t.length; r < o; r++) {
      const c = t[r];
      e.bones.push(c.uuid);
      const f = n[r];
      e.boneInverses.push(f.toArray());
    }
    return e;
  }
}
class md extends Dn {
  constructor(e, t, n, r = 1) {
    super(e, t, n), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = r;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const Kf = /* @__PURE__ */ new Ht(), qT = /* @__PURE__ */ new Ht(), eg = [], YT = /* @__PURE__ */ new Nr(), EO = /* @__PURE__ */ new Ht(), Qh = /* @__PURE__ */ new Ti(), Kh = /* @__PURE__ */ new yr();
class wA extends Ti {
  constructor(e, t, n) {
    super(e, t), this.isInstancedMesh = !0, this.instanceMatrix = new md(new Float32Array(n * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = n, this.boundingBox = null, this.boundingSphere = null;
    for (let r = 0; r < n; r++)
      this.setMatrixAt(r, EO);
  }
  computeBoundingBox() {
    const e = this.geometry, t = this.count;
    this.boundingBox === null && (this.boundingBox = new Nr()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, Kf), YT.copy(e.boundingBox).applyMatrix4(Kf), this.boundingBox.union(YT);
  }
  computeBoundingSphere() {
    const e = this.geometry, t = this.count;
    this.boundingSphere === null && (this.boundingSphere = new yr()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let n = 0; n < t; n++)
      this.getMatrixAt(n, Kf), Kh.copy(e.boundingSphere).applyMatrix4(Kf), this.boundingSphere.union(Kh);
  }
  copy(e, t) {
    return super.copy(e, t), this.instanceMatrix.copy(e.instanceMatrix), e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  getColorAt(e, t) {
    t.fromArray(this.instanceColor.array, e * 3);
  }
  getMatrixAt(e, t) {
    t.fromArray(this.instanceMatrix.array, e * 16);
  }
  getMorphAt(e, t) {
    const n = t.morphTargetInfluences, r = this.morphTexture.source.data.data, o = n.length + 1, c = e * o + 1;
    for (let f = 0; f < n.length; f++)
      n[f] = r[c + f];
  }
  raycast(e, t) {
    const n = this.matrixWorld, r = this.count;
    if (Qh.geometry = this.geometry, Qh.material = this.material, Qh.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Kh.copy(this.boundingSphere), Kh.applyMatrix4(n), e.ray.intersectsSphere(Kh) !== !1))
      for (let o = 0; o < r; o++) {
        this.getMatrixAt(o, Kf), qT.multiplyMatrices(n, Kf), Qh.matrixWorld = qT, Qh.raycast(e, eg);
        for (let c = 0, f = eg.length; c < f; c++) {
          const p = eg[c];
          p.instanceId = o, p.object = this, t.push(p);
        }
        eg.length = 0;
      }
  }
  setColorAt(e, t) {
    this.instanceColor === null && (this.instanceColor = new md(new Float32Array(this.instanceMatrix.count * 3), 3)), t.toArray(this.instanceColor.array, e * 3);
  }
  setMatrixAt(e, t) {
    t.toArray(this.instanceMatrix.array, e * 16);
  }
  setMorphAt(e, t) {
    const n = t.morphTargetInfluences, r = n.length + 1;
    this.morphTexture === null && (this.morphTexture = new Xl(new Float32Array(r * this.count), r, this.count, xS, ja));
    const o = this.morphTexture.source.data.data;
    let c = 0;
    for (let h = 0; h < n.length; h++)
      c += n[h];
    const f = this.geometry.morphTargetsRelative ? 1 : 1 - c, p = r * e;
    o[p] = f, o.set(n, p + 1);
  }
  updateMorphTargets() {
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null), this;
  }
}
function TO(s, e) {
  return s.z - e.z;
}
function bO(s, e) {
  return e.z - s.z;
}
class wO {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(e, t) {
    const n = this.pool, r = this.list;
    this.index >= n.length && n.push({
      start: -1,
      count: -1,
      z: -1
    });
    const o = n[this.index];
    r.push(o), this.index++, o.start = e.start, o.count = e.count, o.z = t;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const $f = "batchId", Bl = /* @__PURE__ */ new Ht(), jT = /* @__PURE__ */ new Ht(), AO = /* @__PURE__ */ new Ht(), ZT = /* @__PURE__ */ new Ht(), K_ = /* @__PURE__ */ new Fp(), tg = /* @__PURE__ */ new Nr(), ju = /* @__PURE__ */ new yr(), $h = /* @__PURE__ */ new q(), $_ = /* @__PURE__ */ new wO(), gr = /* @__PURE__ */ new Ti(), ng = [];
function RO(s, e, t = 0) {
  const n = e.itemSize;
  if (s.isInterleavedBufferAttribute || s.array.constructor !== e.array.constructor) {
    const r = s.count;
    for (let o = 0; o < r; o++)
      for (let c = 0; c < n; c++)
        e.setComponent(o + t, c, s.getComponent(o, c));
  } else
    e.array.set(s.array, t * n);
  e.needsUpdate = !0;
}
class AA extends Ti {
  get maxGeometryCount() {
    return this._maxGeometryCount;
  }
  constructor(e, t, n = t * 2, r) {
    super(new $t(), r), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._drawRanges = [], this._reservedRanges = [], this._visibility = [], this._active = [], this._bounds = [], this._maxGeometryCount = e, this._maxVertexCount = t, this._maxIndexCount = n, this._geometryInitialized = !1, this._geometryCount = 0, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._visibilityChanged = !0, this._matricesTexture = null, this._initMatricesTexture();
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxGeometryCount * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const t = new Float32Array(e * e * 4), n = new Xl(t, e, e, Qr, ja);
    this._matricesTexture = n;
  }
  _initializeGeometry(e) {
    const t = this.geometry, n = this._maxVertexCount, r = this._maxGeometryCount, o = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const f in e.attributes) {
        const p = e.getAttribute(f), { array: h, itemSize: g, normalized: _ } = p, x = new h.constructor(n * g), M = new Dn(x, g, _);
        t.setAttribute(f, M);
      }
      if (e.getIndex() !== null) {
        const f = n > 65536 ? new Uint32Array(o) : new Uint16Array(o);
        t.setIndex(new Dn(f, 1));
      }
      const c = r > 65536 ? new Uint32Array(n) : new Uint16Array(n);
      t.setAttribute($f, new Dn(c, 1)), this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry attributes
  _validateGeometry(e) {
    if (e.getAttribute($f))
      throw new Error(`BatchedMesh: Geometry cannot use attribute "${$f}"`);
    const t = this.geometry;
    if (!!e.getIndex() != !!t.getIndex())
      throw new Error('BatchedMesh: All geometries must consistently have "index".');
    for (const n in t.attributes) {
      if (n === $f)
        continue;
      if (!e.hasAttribute(n))
        throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);
      const r = e.getAttribute(n), o = t.getAttribute(n);
      if (r.itemSize !== o.itemSize || r.normalized !== o.normalized)
        throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  setCustomSort(e) {
    return this.customSort = e, this;
  }
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new Nr());
    const e = this._geometryCount, t = this.boundingBox, n = this._active;
    t.makeEmpty();
    for (let r = 0; r < e; r++)
      n[r] !== !1 && (this.getMatrixAt(r, Bl), this.getBoundingBoxAt(r, tg).applyMatrix4(Bl), t.union(tg));
  }
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new yr());
    const e = this._geometryCount, t = this.boundingSphere, n = this._active;
    t.makeEmpty();
    for (let r = 0; r < e; r++)
      n[r] !== !1 && (this.getMatrixAt(r, Bl), this.getBoundingSphereAt(r, ju).applyMatrix4(Bl), t.union(ju));
  }
  addGeometry(e, t = -1, n = -1) {
    if (this._initializeGeometry(e), this._validateGeometry(e), this._geometryCount >= this._maxGeometryCount)
      throw new Error("BatchedMesh: Maximum geometry count reached.");
    const r = {
      vertexStart: -1,
      vertexCount: -1,
      indexStart: -1,
      indexCount: -1
    };
    let o = null;
    const c = this._reservedRanges, f = this._drawRanges, p = this._bounds;
    this._geometryCount !== 0 && (o = c[c.length - 1]), t === -1 ? r.vertexCount = e.getAttribute("position").count : r.vertexCount = t, o === null ? r.vertexStart = 0 : r.vertexStart = o.vertexStart + o.vertexCount;
    const h = e.getIndex(), g = h !== null;
    if (g && (n === -1 ? r.indexCount = h.count : r.indexCount = n, o === null ? r.indexStart = 0 : r.indexStart = o.indexStart + o.indexCount), r.indexStart !== -1 && r.indexStart + r.indexCount > this._maxIndexCount || r.vertexStart + r.vertexCount > this._maxVertexCount)
      throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    const _ = this._visibility, x = this._active, M = this._matricesTexture, T = this._matricesTexture.image.data;
    _.push(!0), x.push(!0);
    const R = this._geometryCount;
    this._geometryCount++, AO.toArray(T, R * 16), M.needsUpdate = !0, c.push(r), f.push({
      start: g ? r.indexStart : r.vertexStart,
      count: -1
    }), p.push({
      boxInitialized: !1,
      box: new Nr(),
      sphereInitialized: !1,
      sphere: new yr()
    });
    const b = this.geometry.getAttribute($f);
    for (let E = 0; E < r.vertexCount; E++)
      b.setX(r.vertexStart + E, R);
    return b.needsUpdate = !0, this.setGeometryAt(R, e), R;
  }
  setGeometryAt(e, t) {
    if (e >= this._geometryCount)
      throw new Error("BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(t);
    const n = this.geometry, r = n.getIndex() !== null, o = n.getIndex(), c = t.getIndex(), f = this._reservedRanges[e];
    if (r && c.count > f.indexCount || t.attributes.position.count > f.vertexCount)
      throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");
    const p = f.vertexStart, h = f.vertexCount;
    for (const M in n.attributes) {
      if (M === $f)
        continue;
      const T = t.getAttribute(M), R = n.getAttribute(M);
      RO(T, R, p);
      const b = T.itemSize;
      for (let E = T.count, L = h; E < L; E++) {
        const C = p + E;
        for (let U = 0; U < b; U++)
          R.setComponent(C, U, 0);
      }
      R.needsUpdate = !0, R.addUpdateRange(p * b, h * b);
    }
    if (r) {
      const M = f.indexStart;
      for (let T = 0; T < c.count; T++)
        o.setX(M + T, p + c.getX(T));
      for (let T = c.count, R = f.indexCount; T < R; T++)
        o.setX(M + T, p);
      o.needsUpdate = !0, o.addUpdateRange(M, f.indexCount);
    }
    const g = this._bounds[e];
    t.boundingBox !== null ? (g.box.copy(t.boundingBox), g.boxInitialized = !0) : g.boxInitialized = !1, t.boundingSphere !== null ? (g.sphere.copy(t.boundingSphere), g.sphereInitialized = !0) : g.sphereInitialized = !1;
    const _ = this._drawRanges[e], x = t.getAttribute("position");
    return _.count = r ? c.count : x.count, this._visibilityChanged = !0, e;
  }
  deleteGeometry(e) {
    const t = this._active;
    return e >= t.length || t[e] === !1 ? this : (t[e] = !1, this._visibilityChanged = !0, this);
  }
  // get bounding box and compute it if it doesn't exist
  getBoundingBoxAt(e, t) {
    if (this._active[e] === !1)
      return null;
    const r = this._bounds[e], o = r.box, c = this.geometry;
    if (r.boxInitialized === !1) {
      o.makeEmpty();
      const f = c.index, p = c.attributes.position, h = this._drawRanges[e];
      for (let g = h.start, _ = h.start + h.count; g < _; g++) {
        let x = g;
        f && (x = f.getX(x)), o.expandByPoint($h.fromBufferAttribute(p, x));
      }
      r.boxInitialized = !0;
    }
    return t.copy(o), t;
  }
  // get bounding sphere and compute it if it doesn't exist
  getBoundingSphereAt(e, t) {
    if (this._active[e] === !1)
      return null;
    const r = this._bounds[e], o = r.sphere, c = this.geometry;
    if (r.sphereInitialized === !1) {
      o.makeEmpty(), this.getBoundingBoxAt(e, tg), tg.getCenter(o.center);
      const f = c.index, p = c.attributes.position, h = this._drawRanges[e];
      let g = 0;
      for (let _ = h.start, x = h.start + h.count; _ < x; _++) {
        let M = _;
        f && (M = f.getX(M)), $h.fromBufferAttribute(p, M), g = Math.max(g, o.center.distanceToSquared($h));
      }
      o.radius = Math.sqrt(g), r.sphereInitialized = !0;
    }
    return t.copy(o), t;
  }
  setMatrixAt(e, t) {
    const n = this._active, r = this._matricesTexture, o = this._matricesTexture.image.data, c = this._geometryCount;
    return e >= c || n[e] === !1 ? this : (t.toArray(o, e * 16), r.needsUpdate = !0, this);
  }
  getMatrixAt(e, t) {
    const n = this._active, r = this._matricesTexture.image.data, o = this._geometryCount;
    return e >= o || n[e] === !1 ? null : t.fromArray(r, e * 16);
  }
  setVisibleAt(e, t) {
    const n = this._visibility, r = this._active, o = this._geometryCount;
    return e >= o || r[e] === !1 || n[e] === t ? this : (n[e] = t, this._visibilityChanged = !0, this);
  }
  getVisibleAt(e) {
    const t = this._visibility, n = this._active, r = this._geometryCount;
    return e >= r || n[e] === !1 ? !1 : t[e];
  }
  raycast(e, t) {
    const n = this._visibility, r = this._active, o = this._drawRanges, c = this._geometryCount, f = this.matrixWorld, p = this.geometry;
    gr.material = this.material, gr.geometry.index = p.index, gr.geometry.attributes = p.attributes, gr.geometry.boundingBox === null && (gr.geometry.boundingBox = new Nr()), gr.geometry.boundingSphere === null && (gr.geometry.boundingSphere = new yr());
    for (let h = 0; h < c; h++) {
      if (!n[h] || !r[h])
        continue;
      const g = o[h];
      gr.geometry.setDrawRange(g.start, g.count), this.getMatrixAt(h, gr.matrixWorld).premultiply(f), this.getBoundingBoxAt(h, gr.geometry.boundingBox), this.getBoundingSphereAt(h, gr.geometry.boundingSphere), gr.raycast(e, ng);
      for (let _ = 0, x = ng.length; _ < x; _++) {
        const M = ng[_];
        M.object = this, M.batchId = h, t.push(M);
      }
      ng.length = 0;
    }
    gr.material = null, gr.geometry.index = null, gr.geometry.attributes = {}, gr.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._drawRanges = e._drawRanges.map((t) => ({ ...t })), this._reservedRanges = e._reservedRanges.map((t) => ({ ...t })), this._visibility = e._visibility.slice(), this._active = e._active.slice(), this._bounds = e._bounds.map((t) => ({
      boxInitialized: t.boxInitialized,
      box: t.box.clone(),
      sphereInitialized: t.sphereInitialized,
      sphere: t.sphere.clone()
    })), this._maxGeometryCount = e._maxGeometryCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._geometryCount = e._geometryCount, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.slice(), this;
  }
  dispose() {
    return this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this;
  }
  onBeforeRender(e, t, n, r, o) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const c = r.getIndex(), f = c === null ? 1 : c.array.BYTES_PER_ELEMENT, p = this._active, h = this._visibility, g = this._multiDrawStarts, _ = this._multiDrawCounts, x = this._drawRanges, M = this.perObjectFrustumCulled;
    M && (ZT.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse).multiply(this.matrixWorld), K_.setFromProjectionMatrix(
      ZT,
      e.coordinateSystem
    ));
    let T = 0;
    if (this.sortObjects) {
      jT.copy(this.matrixWorld).invert(), $h.setFromMatrixPosition(n.matrixWorld).applyMatrix4(jT);
      for (let E = 0, L = h.length; E < L; E++)
        if (h[E] && p[E]) {
          this.getMatrixAt(E, Bl), this.getBoundingSphereAt(E, ju).applyMatrix4(Bl);
          let C = !1;
          if (M && (C = !K_.intersectsSphere(ju)), !C) {
            const U = $h.distanceTo(ju.center);
            $_.push(x[E], U);
          }
        }
      const R = $_.list, b = this.customSort;
      b === null ? R.sort(o.transparent ? bO : TO) : b.call(this, R, n);
      for (let E = 0, L = R.length; E < L; E++) {
        const C = R[E];
        g[T] = C.start * f, _[T] = C.count, T++;
      }
      $_.reset();
    } else
      for (let R = 0, b = h.length; R < b; R++)
        if (h[R] && p[R]) {
          let E = !1;
          if (M && (this.getMatrixAt(R, Bl), this.getBoundingSphereAt(R, ju).applyMatrix4(Bl), E = !K_.intersectsSphere(ju)), !E) {
            const L = x[R];
            g[T] = L.start * f, _[T] = L.count, T++;
          }
        }
    this._multiDrawCount = T, this._visibilityChanged = !1;
  }
  onBeforeShadow(e, t, n, r, o, c) {
    this.onBeforeRender(e, null, r, o, c);
  }
}
class Ur extends ir {
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new mt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const JT = /* @__PURE__ */ new q(), QT = /* @__PURE__ */ new q(), KT = /* @__PURE__ */ new Ht(), ex = /* @__PURE__ */ new _d(), ig = /* @__PURE__ */ new yr();
class Yl extends xn {
  constructor(e = new $t(), t = new Ur()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [0];
      for (let r = 1, o = t.count; r < o; r++)
        JT.fromBufferAttribute(t, r - 1), QT.fromBufferAttribute(t, r), n[r] = n[r - 1], n[r] += JT.distanceTo(QT);
      e.setAttribute("lineDistance", new Mt(n, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.matrixWorld, o = e.params.Line.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), ig.copy(n.boundingSphere), ig.applyMatrix4(r), ig.radius += o, e.ray.intersectsSphere(ig) === !1)
      return;
    KT.copy(r).invert(), ex.copy(e.ray).applyMatrix4(KT);
    const f = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = f * f, h = new q(), g = new q(), _ = new q(), x = new q(), M = this.isLineSegments ? 2 : 1, T = n.index, b = n.attributes.position;
    if (T !== null) {
      const E = Math.max(0, c.start), L = Math.min(T.count, c.start + c.count);
      for (let C = E, U = L - 1; C < U; C += M) {
        const Y = T.getX(C), B = T.getX(C + 1);
        if (h.fromBufferAttribute(b, Y), g.fromBufferAttribute(b, B), ex.distanceSqToSegment(h, g, x, _) > p)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const k = e.ray.origin.distanceTo(x);
        k < e.near || k > e.far || t.push({
          distance: k,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: _.clone().applyMatrix4(this.matrixWorld),
          index: C,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    } else {
      const E = Math.max(0, c.start), L = Math.min(b.count, c.start + c.count);
      for (let C = E, U = L - 1; C < U; C += M) {
        if (h.fromBufferAttribute(b, C), g.fromBufferAttribute(b, C + 1), ex.distanceSqToSegment(h, g, x, _) > p)
          continue;
        x.applyMatrix4(this.matrixWorld);
        const B = e.ray.origin.distanceTo(x);
        B < e.near || B > e.far || t.push({
          distance: B,
          // What do we want? intersection point on the ray or on the segment??
          // point: raycaster.ray.at( distance ),
          point: _.clone().applyMatrix4(this.matrixWorld),
          index: C,
          face: null,
          faceIndex: null,
          object: this
        });
      }
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
}
const $T = /* @__PURE__ */ new q(), eb = /* @__PURE__ */ new q();
class js extends Yl {
  constructor(e, t) {
    super(e, t), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const t = e.attributes.position, n = [];
      for (let r = 0, o = t.count; r < o; r += 2)
        $T.fromBufferAttribute(t, r), eb.fromBufferAttribute(t, r + 1), n[r] = r === 0 ? 0 : n[r - 1], n[r + 1] = n[r] + $T.distanceTo(eb);
      e.setAttribute("lineDistance", new Mt(n, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class RA extends Yl {
  constructor(e, t) {
    super(e, t), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class FS extends ir {
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new mt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const tb = /* @__PURE__ */ new Ht(), nS = /* @__PURE__ */ new _d(), rg = /* @__PURE__ */ new yr(), ag = /* @__PURE__ */ new q();
class CA extends xn {
  constructor(e = new $t(), t = new FS()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = t, this.updateMorphTargets();
  }
  copy(e, t) {
    return super.copy(e, t), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  raycast(e, t) {
    const n = this.geometry, r = this.matrixWorld, o = e.params.Points.threshold, c = n.drawRange;
    if (n.boundingSphere === null && n.computeBoundingSphere(), rg.copy(n.boundingSphere), rg.applyMatrix4(r), rg.radius += o, e.ray.intersectsSphere(rg) === !1)
      return;
    tb.copy(r).invert(), nS.copy(e.ray).applyMatrix4(tb);
    const f = o / ((this.scale.x + this.scale.y + this.scale.z) / 3), p = f * f, h = n.index, _ = n.attributes.position;
    if (h !== null) {
      const x = Math.max(0, c.start), M = Math.min(h.count, c.start + c.count);
      for (let T = x, R = M; T < R; T++) {
        const b = h.getX(T);
        ag.fromBufferAttribute(_, b), nb(ag, b, p, r, e, t, this);
      }
    } else {
      const x = Math.max(0, c.start), M = Math.min(_.count, c.start + c.count);
      for (let T = x, R = M; T < R; T++)
        ag.fromBufferAttribute(_, T), nb(ag, T, p, r, e, t, this);
    }
  }
  updateMorphTargets() {
    const t = this.geometry.morphAttributes, n = Object.keys(t);
    if (n.length > 0) {
      const r = t[n[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let o = 0, c = r.length; o < c; o++) {
          const f = r[o].name || String(o);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[f] = o;
        }
      }
    }
  }
}
function nb(s, e, t, n, r, o, c) {
  const f = nS.distanceSqToPoint(s);
  if (f < t) {
    const p = new q();
    nS.closestPointToPoint(s, p), p.applyMatrix4(n);
    const h = r.ray.origin.distanceTo(p);
    if (h < r.near || h > r.far)
      return;
    o.push({
      distance: h,
      distanceToRay: Math.sqrt(f),
      point: p,
      index: e,
      face: null,
      object: c
    });
  }
}
class CO extends ai {
  constructor(e, t, n, r, o, c, f, p, h) {
    super(e, t, n, r, o, c, f, p, h), this.isVideoTexture = !0, this.minFilter = c !== void 0 ? c : Ei, this.magFilter = o !== void 0 ? o : Ei, this.generateMipmaps = !1;
    const g = this;
    function _() {
      g.needsUpdate = !0, e.requestVideoFrameCallback(_);
    }
    "requestVideoFrameCallback" in e && e.requestVideoFrameCallback(_);
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
}
class LO extends ai {
  constructor(e, t) {
    super({ width: e, height: t }), this.isFramebufferTexture = !0, this.magFilter = ki, this.minFilter = ki, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class Yg extends ai {
  constructor(e, t, n, r, o, c, f, p, h, g, _, x) {
    super(null, c, f, p, h, g, r, o, _, x), this.isCompressedTexture = !0, this.image = { width: t, height: n }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class PO extends Yg {
  constructor(e, t, n, r, o, c) {
    super(e, t, n, o, c), this.isCompressedArrayTexture = !0, this.image.depth = r, this.wrapR = Ya;
  }
}
class DO extends Yg {
  constructor(e, t, n) {
    super(void 0, e[0].width, e[0].height, t, n, Fo), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class NO extends ai {
  constructor(e, t, n, r, o, c, f, p, h) {
    super(e, t, n, r, o, c, f, p, h), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class ys {
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    return console.warn("THREE.Curve: .getPoint() not implemented."), null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getPoint(n, t);
  }
  // Get sequence of points using getPoint( t )
  getPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return t;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(e = 5) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPointAt(n / e));
    return t;
  }
  // Get total curve arc length
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const t = [];
    let n, r = this.getPoint(0), o = 0;
    t.push(0);
    for (let c = 1; c <= e; c++)
      n = this.getPoint(c / e), o += n.distanceTo(r), t.push(o), r = n;
    return this.cacheArcLengths = t, t;
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(e, t) {
    const n = this.getLengths();
    let r = 0;
    const o = n.length;
    let c;
    t ? c = t : c = e * n[o - 1];
    let f = 0, p = o - 1, h;
    for (; f <= p; )
      if (r = Math.floor(f + (p - f) / 2), h = n[r] - c, h < 0)
        f = r + 1;
      else if (h > 0)
        p = r - 1;
      else {
        p = r;
        break;
      }
    if (r = p, n[r] === c)
      return r / (o - 1);
    const g = n[r], x = n[r + 1] - g, M = (c - g) / x;
    return (r + M) / (o - 1);
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(e, t) {
    let r = e - 1e-4, o = e + 1e-4;
    r < 0 && (r = 0), o > 1 && (o = 1);
    const c = this.getPoint(r), f = this.getPoint(o), p = t || (c.isVector2 ? new De() : new q());
    return p.copy(f).sub(c).normalize(), p;
  }
  getTangentAt(e, t) {
    const n = this.getUtoTmapping(e);
    return this.getTangent(n, t);
  }
  computeFrenetFrames(e, t) {
    const n = new q(), r = [], o = [], c = [], f = new q(), p = new Ht();
    for (let M = 0; M <= e; M++) {
      const T = M / e;
      r[M] = this.getTangentAt(T, new q());
    }
    o[0] = new q(), c[0] = new q();
    let h = Number.MAX_VALUE;
    const g = Math.abs(r[0].x), _ = Math.abs(r[0].y), x = Math.abs(r[0].z);
    g <= h && (h = g, n.set(1, 0, 0)), _ <= h && (h = _, n.set(0, 1, 0)), x <= h && n.set(0, 0, 1), f.crossVectors(r[0], n).normalize(), o[0].crossVectors(r[0], f), c[0].crossVectors(r[0], o[0]);
    for (let M = 1; M <= e; M++) {
      if (o[M] = o[M - 1].clone(), c[M] = c[M - 1].clone(), f.crossVectors(r[M - 1], r[M]), f.length() > Number.EPSILON) {
        f.normalize();
        const T = Math.acos(ci(r[M - 1].dot(r[M]), -1, 1));
        o[M].applyMatrix4(p.makeRotationAxis(f, T));
      }
      c[M].crossVectors(r[M], o[M]);
    }
    if (t === !0) {
      let M = Math.acos(ci(o[0].dot(o[e]), -1, 1));
      M /= e, r[0].dot(f.crossVectors(o[0], o[e])) > 0 && (M = -M);
      for (let T = 1; T <= e; T++)
        o[T].applyMatrix4(p.makeRotationAxis(r[T], M * T)), c[T].crossVectors(r[T], o[T]);
    }
    return {
      tangents: r,
      normals: o,
      binormals: c
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  toJSON() {
    const e = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class jg extends ys {
  constructor(e = 0, t = 0, n = 1, r = 1, o = 0, c = Math.PI * 2, f = !1, p = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = t, this.xRadius = n, this.yRadius = r, this.aStartAngle = o, this.aEndAngle = c, this.aClockwise = f, this.aRotation = p;
  }
  getPoint(e, t = new De()) {
    const n = t, r = Math.PI * 2;
    let o = this.aEndAngle - this.aStartAngle;
    const c = Math.abs(o) < Number.EPSILON;
    for (; o < 0; )
      o += r;
    for (; o > r; )
      o -= r;
    o < Number.EPSILON && (c ? o = 0 : o = r), this.aClockwise === !0 && !c && (o === r ? o = -r : o = o - r);
    const f = this.aStartAngle + e * o;
    let p = this.aX + this.xRadius * Math.cos(f), h = this.aY + this.yRadius * Math.sin(f);
    if (this.aRotation !== 0) {
      const g = Math.cos(this.aRotation), _ = Math.sin(this.aRotation), x = p - this.aX, M = h - this.aY;
      p = x * g - M * _ + this.aX, h = x * _ + M * g + this.aY;
    }
    return n.set(p, h);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class LA extends jg {
  constructor(e, t, n, r, o, c) {
    super(e, t, n, n, r, o, c), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function zS() {
  let s = 0, e = 0, t = 0, n = 0;
  function r(o, c, f, p) {
    s = o, e = f, t = -3 * o + 3 * c - 2 * f - p, n = 2 * o - 2 * c + f + p;
  }
  return {
    initCatmullRom: function(o, c, f, p, h) {
      r(c, f, h * (f - o), h * (p - c));
    },
    initNonuniformCatmullRom: function(o, c, f, p, h, g, _) {
      let x = (c - o) / h - (f - o) / (h + g) + (f - c) / g, M = (f - c) / g - (p - c) / (g + _) + (p - f) / _;
      x *= g, M *= g, r(c, f, x, M);
    },
    calc: function(o) {
      const c = o * o, f = c * o;
      return s + e * o + t * c + n * f;
    }
  };
}
const sg = /* @__PURE__ */ new q(), tx = /* @__PURE__ */ new zS(), nx = /* @__PURE__ */ new zS(), ix = /* @__PURE__ */ new zS();
class PA extends ys {
  constructor(e = [], t = !1, n = "centripetal", r = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = t, this.curveType = n, this.tension = r;
  }
  getPoint(e, t = new q()) {
    const n = t, r = this.points, o = r.length, c = (o - (this.closed ? 0 : 1)) * e;
    let f = Math.floor(c), p = c - f;
    this.closed ? f += f > 0 ? 0 : (Math.floor(Math.abs(f) / o) + 1) * o : p === 0 && f === o - 1 && (f = o - 2, p = 1);
    let h, g;
    this.closed || f > 0 ? h = r[(f - 1) % o] : (sg.subVectors(r[0], r[1]).add(r[0]), h = sg);
    const _ = r[f % o], x = r[(f + 1) % o];
    if (this.closed || f + 2 < o ? g = r[(f + 2) % o] : (sg.subVectors(r[o - 1], r[o - 2]).add(r[o - 1]), g = sg), this.curveType === "centripetal" || this.curveType === "chordal") {
      const M = this.curveType === "chordal" ? 0.5 : 0.25;
      let T = Math.pow(h.distanceToSquared(_), M), R = Math.pow(_.distanceToSquared(x), M), b = Math.pow(x.distanceToSquared(g), M);
      R < 1e-4 && (R = 1), T < 1e-4 && (T = R), b < 1e-4 && (b = R), tx.initNonuniformCatmullRom(h.x, _.x, x.x, g.x, T, R, b), nx.initNonuniformCatmullRom(h.y, _.y, x.y, g.y, T, R, b), ix.initNonuniformCatmullRom(h.z, _.z, x.z, g.z, T, R, b);
    } else
      this.curveType === "catmullrom" && (tx.initCatmullRom(h.x, _.x, x.x, g.x, this.tension), nx.initCatmullRom(h.y, _.y, x.y, g.y, this.tension), ix.initCatmullRom(h.z, _.z, x.z, g.z, this.tension));
    return n.set(
      tx.calc(p),
      nx.calc(p),
      ix.calc(p)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(new q().fromArray(r));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function ib(s, e, t, n, r) {
  const o = (n - e) * 0.5, c = (r - t) * 0.5, f = s * s, p = s * f;
  return (2 * t - 2 * n + o + c) * p + (-3 * t + 3 * n - 2 * o - c) * f + o * s + t;
}
function UO(s, e) {
  const t = 1 - s;
  return t * t * e;
}
function IO(s, e) {
  return 2 * (1 - s) * s * e;
}
function OO(s, e) {
  return s * s * e;
}
function lp(s, e, t, n) {
  return UO(s, e) + IO(s, t) + OO(s, n);
}
function FO(s, e) {
  const t = 1 - s;
  return t * t * t * e;
}
function zO(s, e) {
  const t = 1 - s;
  return 3 * t * t * s * e;
}
function BO(s, e) {
  return 3 * (1 - s) * s * s * e;
}
function HO(s, e) {
  return s * s * s * e;
}
function up(s, e, t, n, r) {
  return FO(s, e) + zO(s, t) + BO(s, n) + HO(s, r);
}
class BS extends ys {
  constructor(e = new De(), t = new De(), n = new De(), r = new De()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = r;
  }
  getPoint(e, t = new De()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2, f = this.v3;
    return n.set(
      up(e, r.x, o.x, c.x, f.x),
      up(e, r.y, o.y, c.y, f.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class DA extends ys {
  constructor(e = new q(), t = new q(), n = new q(), r = new q()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n, this.v3 = r;
  }
  getPoint(e, t = new q()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2, f = this.v3;
    return n.set(
      up(e, r.x, o.x, c.x, f.x),
      up(e, r.y, o.y, c.y, f.y),
      up(e, r.z, o.z, c.z, f.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class HS extends ys {
  constructor(e = new De(), t = new De()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new De()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new De()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class NA extends ys {
  constructor(e = new q(), t = new q()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = t;
  }
  getPoint(e, t = new q()) {
    const n = t;
    return e === 1 ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(e).add(this.v1)), n;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, t) {
    return this.getPoint(e, t);
  }
  getTangent(e, t = new q()) {
    return t.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, t) {
    return this.getTangent(e, t);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class VS extends ys {
  constructor(e = new De(), t = new De(), n = new De()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new De()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2;
    return n.set(
      lp(e, r.x, o.x, c.x),
      lp(e, r.y, o.y, c.y)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class kS extends ys {
  constructor(e = new q(), t = new q(), n = new q()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = t, this.v2 = n;
  }
  getPoint(e, t = new q()) {
    const n = t, r = this.v0, o = this.v1, c = this.v2;
    return n.set(
      lp(e, r.x, o.x, c.x),
      lp(e, r.y, o.y, c.y),
      lp(e, r.z, o.z, c.z)
    ), n;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class GS extends ys {
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  getPoint(e, t = new De()) {
    const n = t, r = this.points, o = (r.length - 1) * e, c = Math.floor(o), f = o - c, p = r[c === 0 ? c : c - 1], h = r[c], g = r[c > r.length - 2 ? r.length - 1 : c + 1], _ = r[c > r.length - 3 ? r.length - 1 : c + 2];
    return n.set(
      ib(f, p.x, h.x, g.x, _.x),
      ib(f, p.y, h.y, g.y, _.y)
    ), n;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let t = 0, n = this.points.length; t < n; t++) {
      const r = this.points[t];
      e.points.push(r.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let t = 0, n = e.points.length; t < n; t++) {
      const r = e.points[t];
      this.points.push(new De().fromArray(r));
    }
    return this;
  }
}
var Dg = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: LA,
  CatmullRomCurve3: PA,
  CubicBezierCurve: BS,
  CubicBezierCurve3: DA,
  EllipseCurve: jg,
  LineCurve: HS,
  LineCurve3: NA,
  QuadraticBezierCurve: VS,
  QuadraticBezierCurve3: kS,
  SplineCurve: GS
});
class UA extends ys {
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  add(e) {
    this.curves.push(e);
  }
  closePath() {
    const e = this.curves[0].getPoint(0), t = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(t)) {
      const n = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new Dg[n](t, e));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(e, t) {
    const n = e * this.getLength(), r = this.getCurveLengths();
    let o = 0;
    for (; o < r.length; ) {
      if (r[o] >= n) {
        const c = r[o] - n, f = this.curves[o], p = f.getLength(), h = p === 0 ? 0 : 1 - c / p;
        return f.getPointAt(h, t);
      }
      o++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let t = 0;
    for (let n = 0, r = this.curves.length; n < r; n++)
      t += this.curves[n].getLength(), e.push(t);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const t = [];
    for (let n = 0; n <= e; n++)
      t.push(this.getPoint(n / e));
    return this.autoClose && t.push(t[0]), t;
  }
  getPoints(e = 12) {
    const t = [];
    let n;
    for (let r = 0, o = this.curves; r < o.length; r++) {
      const c = o[r], f = c.isEllipseCurve ? e * 2 : c.isLineCurve || c.isLineCurve3 ? 1 : c.isSplineCurve ? e * c.points.length : e, p = c.getPoints(f);
      for (let h = 0; h < p.length; h++) {
        const g = p[h];
        n && n.equals(g) || (t.push(g), n = g);
      }
    }
    return this.autoClose && t.length > 1 && !t[t.length - 1].equals(t[0]) && t.push(t[0]), t;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const r = e.curves[t];
      this.curves.push(r.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let t = 0, n = this.curves.length; t < n; t++) {
      const r = this.curves[t];
      e.curves.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let t = 0, n = e.curves.length; t < n; t++) {
      const r = e.curves[t];
      this.curves.push(new Dg[r.type]().fromJSON(r));
    }
    return this;
  }
}
class bp extends UA {
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new De(), e && this.setFromPoints(e);
  }
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let t = 1, n = e.length; t < n; t++)
      this.lineTo(e[t].x, e[t].y);
    return this;
  }
  moveTo(e, t) {
    return this.currentPoint.set(e, t), this;
  }
  lineTo(e, t) {
    const n = new HS(this.currentPoint.clone(), new De(e, t));
    return this.curves.push(n), this.currentPoint.set(e, t), this;
  }
  quadraticCurveTo(e, t, n, r) {
    const o = new VS(
      this.currentPoint.clone(),
      new De(e, t),
      new De(n, r)
    );
    return this.curves.push(o), this.currentPoint.set(n, r), this;
  }
  bezierCurveTo(e, t, n, r, o, c) {
    const f = new BS(
      this.currentPoint.clone(),
      new De(e, t),
      new De(n, r),
      new De(o, c)
    );
    return this.curves.push(f), this.currentPoint.set(o, c), this;
  }
  splineThru(e) {
    const t = [this.currentPoint.clone()].concat(e), n = new GS(t);
    return this.curves.push(n), this.currentPoint.copy(e[e.length - 1]), this;
  }
  arc(e, t, n, r, o, c) {
    const f = this.currentPoint.x, p = this.currentPoint.y;
    return this.absarc(
      e + f,
      t + p,
      n,
      r,
      o,
      c
    ), this;
  }
  absarc(e, t, n, r, o, c) {
    return this.absellipse(e, t, n, n, r, o, c), this;
  }
  ellipse(e, t, n, r, o, c, f, p) {
    const h = this.currentPoint.x, g = this.currentPoint.y;
    return this.absellipse(e + h, t + g, n, r, o, c, f, p), this;
  }
  absellipse(e, t, n, r, o, c, f, p) {
    const h = new jg(e, t, n, r, o, c, f, p);
    if (this.curves.length > 0) {
      const _ = h.getPoint(0);
      _.equals(this.currentPoint) || this.lineTo(_.x, _.y);
    }
    this.curves.push(h);
    const g = h.getPoint(1);
    return this.currentPoint.copy(g), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Bp extends $t {
  constructor(e = [new De(0, -0.5), new De(0.5, 0), new De(0, 0.5)], t = 12, n = 0, r = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: t,
      phiStart: n,
      phiLength: r
    }, t = Math.floor(t), r = ci(r, 0, Math.PI * 2);
    const o = [], c = [], f = [], p = [], h = [], g = 1 / t, _ = new q(), x = new De(), M = new q(), T = new q(), R = new q();
    let b = 0, E = 0;
    for (let L = 0; L <= e.length - 1; L++)
      switch (L) {
        case 0:
          b = e[L + 1].x - e[L].x, E = e[L + 1].y - e[L].y, M.x = E * 1, M.y = -b, M.z = E * 0, R.copy(M), M.normalize(), p.push(M.x, M.y, M.z);
          break;
        case e.length - 1:
          p.push(R.x, R.y, R.z);
          break;
        default:
          b = e[L + 1].x - e[L].x, E = e[L + 1].y - e[L].y, M.x = E * 1, M.y = -b, M.z = E * 0, T.copy(M), M.x += R.x, M.y += R.y, M.z += R.z, M.normalize(), p.push(M.x, M.y, M.z), R.copy(T);
      }
    for (let L = 0; L <= t; L++) {
      const C = n + L * g * r, U = Math.sin(C), Y = Math.cos(C);
      for (let B = 0; B <= e.length - 1; B++) {
        _.x = e[B].x * U, _.y = e[B].y, _.z = e[B].x * Y, c.push(_.x, _.y, _.z), x.x = L / t, x.y = B / (e.length - 1), f.push(x.x, x.y);
        const H = p[3 * B + 0] * U, k = p[3 * B + 1], F = p[3 * B + 0] * Y;
        h.push(H, k, F);
      }
    }
    for (let L = 0; L < t; L++)
      for (let C = 0; C < e.length - 1; C++) {
        const U = C + L * e.length, Y = U, B = U + e.length, H = U + e.length + 1, k = U + 1;
        o.push(Y, B, k), o.push(H, k, B);
      }
    this.setIndex(o), this.setAttribute("position", new Mt(c, 3)), this.setAttribute("uv", new Mt(f, 2)), this.setAttribute("normal", new Mt(h, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Bp(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class Zg extends Bp {
  constructor(e = 1, t = 1, n = 4, r = 8) {
    const o = new bp();
    o.absarc(0, -t / 2, e, Math.PI * 1.5, 0), o.absarc(0, t / 2, e, 0, Math.PI * 0.5), super(o.getPoints(n), r), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      length: t,
      capSegments: n,
      radialSegments: r
    };
  }
  static fromJSON(e) {
    return new Zg(e.radius, e.length, e.capSegments, e.radialSegments);
  }
}
class Jg extends $t {
  constructor(e = 1, t = 32, n = 0, r = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: t,
      thetaStart: n,
      thetaLength: r
    }, t = Math.max(3, t);
    const o = [], c = [], f = [], p = [], h = new q(), g = new De();
    c.push(0, 0, 0), f.push(0, 0, 1), p.push(0.5, 0.5);
    for (let _ = 0, x = 3; _ <= t; _++, x += 3) {
      const M = n + _ / t * r;
      h.x = e * Math.cos(M), h.y = e * Math.sin(M), c.push(h.x, h.y, h.z), f.push(0, 0, 1), g.x = (c[x] / e + 1) / 2, g.y = (c[x + 1] / e + 1) / 2, p.push(g.x, g.y);
    }
    for (let _ = 1; _ <= t; _++)
      o.push(_, _ + 1, 0);
    this.setIndex(o), this.setAttribute("position", new Mt(c, 3)), this.setAttribute("normal", new Mt(f, 3)), this.setAttribute("uv", new Mt(p, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Jg(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class Md extends $t {
  constructor(e = 1, t = 1, n = 1, r = 32, o = 1, c = !1, f = 0, p = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: t,
      height: n,
      radialSegments: r,
      heightSegments: o,
      openEnded: c,
      thetaStart: f,
      thetaLength: p
    };
    const h = this;
    r = Math.floor(r), o = Math.floor(o);
    const g = [], _ = [], x = [], M = [];
    let T = 0;
    const R = [], b = n / 2;
    let E = 0;
    L(), c === !1 && (e > 0 && C(!0), t > 0 && C(!1)), this.setIndex(g), this.setAttribute("position", new Mt(_, 3)), this.setAttribute("normal", new Mt(x, 3)), this.setAttribute("uv", new Mt(M, 2));
    function L() {
      const U = new q(), Y = new q();
      let B = 0;
      const H = (t - e) / n;
      for (let k = 0; k <= o; k++) {
        const F = [], N = k / o, X = N * (t - e) + e;
        for (let K = 0; K <= r; K++) {
          const J = K / r, ae = J * p + f, _e = Math.sin(ae), Me = Math.cos(ae);
          Y.x = X * _e, Y.y = -N * n + b, Y.z = X * Me, _.push(Y.x, Y.y, Y.z), U.set(_e, H, Me).normalize(), x.push(U.x, U.y, U.z), M.push(J, 1 - N), F.push(T++);
        }
        R.push(F);
      }
      for (let k = 0; k < r; k++)
        for (let F = 0; F < o; F++) {
          const N = R[F][k], X = R[F + 1][k], K = R[F + 1][k + 1], J = R[F][k + 1];
          g.push(N, X, J), g.push(X, K, J), B += 6;
        }
      h.addGroup(E, B, 0), E += B;
    }
    function C(U) {
      const Y = T, B = new De(), H = new q();
      let k = 0;
      const F = U === !0 ? e : t, N = U === !0 ? 1 : -1;
      for (let K = 1; K <= r; K++)
        _.push(0, b * N, 0), x.push(0, N, 0), M.push(0.5, 0.5), T++;
      const X = T;
      for (let K = 0; K <= r; K++) {
        const ae = K / r * p + f, _e = Math.cos(ae), Me = Math.sin(ae);
        H.x = F * Me, H.y = b * N, H.z = F * _e, _.push(H.x, H.y, H.z), x.push(0, N, 0), B.x = _e * 0.5 + 0.5, B.y = Me * 0.5 * N + 0.5, M.push(B.x, B.y), T++;
      }
      for (let K = 0; K < r; K++) {
        const J = Y + K, ae = X + K;
        U === !0 ? g.push(ae, ae + 1, J) : g.push(ae + 1, ae, J), k += 3;
      }
      h.addGroup(E, k, U === !0 ? 1 : 2), E += k;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Md(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Qg extends Md {
  constructor(e = 1, t = 1, n = 32, r = 1, o = !1, c = 0, f = Math.PI * 2) {
    super(0, e, t, n, r, o, c, f), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: t,
      radialSegments: n,
      heightSegments: r,
      openEnded: o,
      thetaStart: c,
      thetaLength: f
    };
  }
  static fromJSON(e) {
    return new Qg(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Jl extends $t {
  constructor(e = [], t = [], n = 1, r = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: t,
      radius: n,
      detail: r
    };
    const o = [], c = [];
    f(r), h(n), g(), this.setAttribute("position", new Mt(o, 3)), this.setAttribute("normal", new Mt(o.slice(), 3)), this.setAttribute("uv", new Mt(c, 2)), r === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function f(L) {
      const C = new q(), U = new q(), Y = new q();
      for (let B = 0; B < t.length; B += 3)
        M(t[B + 0], C), M(t[B + 1], U), M(t[B + 2], Y), p(C, U, Y, L);
    }
    function p(L, C, U, Y) {
      const B = Y + 1, H = [];
      for (let k = 0; k <= B; k++) {
        H[k] = [];
        const F = L.clone().lerp(U, k / B), N = C.clone().lerp(U, k / B), X = B - k;
        for (let K = 0; K <= X; K++)
          K === 0 && k === B ? H[k][K] = F : H[k][K] = F.clone().lerp(N, K / X);
      }
      for (let k = 0; k < B; k++)
        for (let F = 0; F < 2 * (B - k) - 1; F++) {
          const N = Math.floor(F / 2);
          F % 2 === 0 ? (x(H[k][N + 1]), x(H[k + 1][N]), x(H[k][N])) : (x(H[k][N + 1]), x(H[k + 1][N + 1]), x(H[k + 1][N]));
        }
    }
    function h(L) {
      const C = new q();
      for (let U = 0; U < o.length; U += 3)
        C.x = o[U + 0], C.y = o[U + 1], C.z = o[U + 2], C.normalize().multiplyScalar(L), o[U + 0] = C.x, o[U + 1] = C.y, o[U + 2] = C.z;
    }
    function g() {
      const L = new q();
      for (let C = 0; C < o.length; C += 3) {
        L.x = o[C + 0], L.y = o[C + 1], L.z = o[C + 2];
        const U = b(L) / 2 / Math.PI + 0.5, Y = E(L) / Math.PI + 0.5;
        c.push(U, 1 - Y);
      }
      T(), _();
    }
    function _() {
      for (let L = 0; L < c.length; L += 6) {
        const C = c[L + 0], U = c[L + 2], Y = c[L + 4], B = Math.max(C, U, Y), H = Math.min(C, U, Y);
        B > 0.9 && H < 0.1 && (C < 0.2 && (c[L + 0] += 1), U < 0.2 && (c[L + 2] += 1), Y < 0.2 && (c[L + 4] += 1));
      }
    }
    function x(L) {
      o.push(L.x, L.y, L.z);
    }
    function M(L, C) {
      const U = L * 3;
      C.x = e[U + 0], C.y = e[U + 1], C.z = e[U + 2];
    }
    function T() {
      const L = new q(), C = new q(), U = new q(), Y = new q(), B = new De(), H = new De(), k = new De();
      for (let F = 0, N = 0; F < o.length; F += 9, N += 6) {
        L.set(o[F + 0], o[F + 1], o[F + 2]), C.set(o[F + 3], o[F + 4], o[F + 5]), U.set(o[F + 6], o[F + 7], o[F + 8]), B.set(c[N + 0], c[N + 1]), H.set(c[N + 2], c[N + 3]), k.set(c[N + 4], c[N + 5]), Y.copy(L).add(C).add(U).divideScalar(3);
        const X = b(Y);
        R(B, N + 0, L, X), R(H, N + 2, C, X), R(k, N + 4, U, X);
      }
    }
    function R(L, C, U, Y) {
      Y < 0 && L.x === 1 && (c[C] = L.x - 1), U.x === 0 && U.z === 0 && (c[C] = Y / 2 / Math.PI + 0.5);
    }
    function b(L) {
      return Math.atan2(L.z, -L.x);
    }
    function E(L) {
      return Math.atan2(-L.y, Math.sqrt(L.x * L.x + L.z * L.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Jl(e.vertices, e.indices, e.radius, e.details);
  }
}
class Kg extends Jl {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, r = 1 / n, o = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r,
      -n,
      0,
      -r,
      n,
      0,
      r,
      -n,
      0,
      r,
      n,
      // (±1/φ, ±φ, 0)
      -r,
      -n,
      0,
      -r,
      n,
      0,
      r,
      -n,
      0,
      r,
      n,
      0,
      // (±φ, 0, ±1/φ)
      -n,
      0,
      -r,
      n,
      0,
      -r,
      -n,
      0,
      r,
      n,
      0,
      r
    ], c = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(o, c, e, t), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Kg(e.radius, e.detail);
  }
}
const og = /* @__PURE__ */ new q(), lg = /* @__PURE__ */ new q(), rx = /* @__PURE__ */ new q(), ug = /* @__PURE__ */ new ga();
class IA extends $t {
  constructor(e = null, t = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: t
    }, e !== null) {
      const r = Math.pow(10, 4), o = Math.cos(cc * t), c = e.getIndex(), f = e.getAttribute("position"), p = c ? c.count : f.count, h = [0, 0, 0], g = ["a", "b", "c"], _ = new Array(3), x = {}, M = [];
      for (let T = 0; T < p; T += 3) {
        c ? (h[0] = c.getX(T), h[1] = c.getX(T + 1), h[2] = c.getX(T + 2)) : (h[0] = T, h[1] = T + 1, h[2] = T + 2);
        const { a: R, b, c: E } = ug;
        if (R.fromBufferAttribute(f, h[0]), b.fromBufferAttribute(f, h[1]), E.fromBufferAttribute(f, h[2]), ug.getNormal(rx), _[0] = `${Math.round(R.x * r)},${Math.round(R.y * r)},${Math.round(R.z * r)}`, _[1] = `${Math.round(b.x * r)},${Math.round(b.y * r)},${Math.round(b.z * r)}`, _[2] = `${Math.round(E.x * r)},${Math.round(E.y * r)},${Math.round(E.z * r)}`, !(_[0] === _[1] || _[1] === _[2] || _[2] === _[0]))
          for (let L = 0; L < 3; L++) {
            const C = (L + 1) % 3, U = _[L], Y = _[C], B = ug[g[L]], H = ug[g[C]], k = `${U}_${Y}`, F = `${Y}_${U}`;
            F in x && x[F] ? (rx.dot(x[F].normal) <= o && (M.push(B.x, B.y, B.z), M.push(H.x, H.y, H.z)), x[F] = null) : k in x || (x[k] = {
              index0: h[L],
              index1: h[C],
              normal: rx.clone()
            });
          }
      }
      for (const T in x)
        if (x[T]) {
          const { index0: R, index1: b } = x[T];
          og.fromBufferAttribute(f, R), lg.fromBufferAttribute(f, b), M.push(og.x, og.y, og.z), M.push(lg.x, lg.y, lg.z);
        }
      this.setAttribute("position", new Mt(M, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class dc extends bp {
  constructor(e) {
    super(e), this.uuid = ya(), this.type = "Shape", this.holes = [];
  }
  getPointsHoles(e) {
    const t = [];
    for (let n = 0, r = this.holes.length; n < r; n++)
      t[n] = this.holes[n].getPoints(e);
    return t;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const r = e.holes[t];
      this.holes.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let t = 0, n = this.holes.length; t < n; t++) {
      const r = this.holes[t];
      e.holes.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let t = 0, n = e.holes.length; t < n; t++) {
      const r = e.holes[t];
      this.holes.push(new bp().fromJSON(r));
    }
    return this;
  }
}
const VO = {
  triangulate: function(s, e, t = 2) {
    const n = e && e.length, r = n ? e[0] * t : s.length;
    let o = OA(s, 0, r, t, !0);
    const c = [];
    if (!o || o.next === o.prev)
      return c;
    let f, p, h, g, _, x, M;
    if (n && (o = qO(s, e, o, t)), s.length > 80 * t) {
      f = h = s[0], p = g = s[1];
      for (let T = t; T < r; T += t)
        _ = s[T], x = s[T + 1], _ < f && (f = _), x < p && (p = x), _ > h && (h = _), x > g && (g = x);
      M = Math.max(h - f, g - p), M = M !== 0 ? 32767 / M : 0;
    }
    return wp(o, c, t, f, p, M, 0), c;
  }
};
function OA(s, e, t, n, r) {
  let o, c;
  if (r === iF(s, e, t, n) > 0)
    for (o = e; o < t; o += n)
      c = rb(o, s[o], s[o + 1], c);
  else
    for (o = t - n; o >= e; o -= n)
      c = rb(o, s[o], s[o + 1], c);
  return c && $g(c, c.next) && (Rp(c), c = c.next), c;
}
function mc(s, e) {
  if (!s)
    return s;
  e || (e = s);
  let t = s, n;
  do
    if (n = !1, !t.steiner && ($g(t, t.next) || ri(t.prev, t, t.next) === 0)) {
      if (Rp(t), t = e = t.prev, t === t.next)
        break;
      n = !0;
    } else
      t = t.next;
  while (n || t !== e);
  return e;
}
function wp(s, e, t, n, r, o, c) {
  if (!s)
    return;
  !c && o && QO(s, n, r, o);
  let f = s, p, h;
  for (; s.prev !== s.next; ) {
    if (p = s.prev, h = s.next, o ? GO(s, n, r, o) : kO(s)) {
      e.push(p.i / t | 0), e.push(s.i / t | 0), e.push(h.i / t | 0), Rp(s), s = h.next, f = h.next;
      continue;
    }
    if (s = h, s === f) {
      c ? c === 1 ? (s = WO(mc(s), e, t), wp(s, e, t, n, r, o, 2)) : c === 2 && XO(s, e, t, n, r, o) : wp(mc(s), e, t, n, r, o, 1);
      break;
    }
  }
}
function kO(s) {
  const e = s.prev, t = s, n = s.next;
  if (ri(e, t, n) >= 0)
    return !1;
  const r = e.x, o = t.x, c = n.x, f = e.y, p = t.y, h = n.y, g = r < o ? r < c ? r : c : o < c ? o : c, _ = f < p ? f < h ? f : h : p < h ? p : h, x = r > o ? r > c ? r : c : o > c ? o : c, M = f > p ? f > h ? f : h : p > h ? p : h;
  let T = n.next;
  for (; T !== e; ) {
    if (T.x >= g && T.x <= x && T.y >= _ && T.y <= M && ld(r, f, o, p, c, h, T.x, T.y) && ri(T.prev, T, T.next) >= 0)
      return !1;
    T = T.next;
  }
  return !0;
}
function GO(s, e, t, n) {
  const r = s.prev, o = s, c = s.next;
  if (ri(r, o, c) >= 0)
    return !1;
  const f = r.x, p = o.x, h = c.x, g = r.y, _ = o.y, x = c.y, M = f < p ? f < h ? f : h : p < h ? p : h, T = g < _ ? g < x ? g : x : _ < x ? _ : x, R = f > p ? f > h ? f : h : p > h ? p : h, b = g > _ ? g > x ? g : x : _ > x ? _ : x, E = iS(M, T, e, t, n), L = iS(R, b, e, t, n);
  let C = s.prevZ, U = s.nextZ;
  for (; C && C.z >= E && U && U.z <= L; ) {
    if (C.x >= M && C.x <= R && C.y >= T && C.y <= b && C !== r && C !== c && ld(f, g, p, _, h, x, C.x, C.y) && ri(C.prev, C, C.next) >= 0 || (C = C.prevZ, U.x >= M && U.x <= R && U.y >= T && U.y <= b && U !== r && U !== c && ld(f, g, p, _, h, x, U.x, U.y) && ri(U.prev, U, U.next) >= 0))
      return !1;
    U = U.nextZ;
  }
  for (; C && C.z >= E; ) {
    if (C.x >= M && C.x <= R && C.y >= T && C.y <= b && C !== r && C !== c && ld(f, g, p, _, h, x, C.x, C.y) && ri(C.prev, C, C.next) >= 0)
      return !1;
    C = C.prevZ;
  }
  for (; U && U.z <= L; ) {
    if (U.x >= M && U.x <= R && U.y >= T && U.y <= b && U !== r && U !== c && ld(f, g, p, _, h, x, U.x, U.y) && ri(U.prev, U, U.next) >= 0)
      return !1;
    U = U.nextZ;
  }
  return !0;
}
function WO(s, e, t) {
  let n = s;
  do {
    const r = n.prev, o = n.next.next;
    !$g(r, o) && FA(r, n, n.next, o) && Ap(r, o) && Ap(o, r) && (e.push(r.i / t | 0), e.push(n.i / t | 0), e.push(o.i / t | 0), Rp(n), Rp(n.next), n = s = o), n = n.next;
  } while (n !== s);
  return mc(n);
}
function XO(s, e, t, n, r, o) {
  let c = s;
  do {
    let f = c.next.next;
    for (; f !== c.prev; ) {
      if (c.i !== f.i && eF(c, f)) {
        let p = zA(c, f);
        c = mc(c, c.next), p = mc(p, p.next), wp(c, e, t, n, r, o, 0), wp(p, e, t, n, r, o, 0);
        return;
      }
      f = f.next;
    }
    c = c.next;
  } while (c !== s);
}
function qO(s, e, t, n) {
  const r = [];
  let o, c, f, p, h;
  for (o = 0, c = e.length; o < c; o++)
    f = e[o] * n, p = o < c - 1 ? e[o + 1] * n : s.length, h = OA(s, f, p, n, !1), h === h.next && (h.steiner = !0), r.push($O(h));
  for (r.sort(YO), o = 0; o < r.length; o++)
    t = jO(r[o], t);
  return t;
}
function YO(s, e) {
  return s.x - e.x;
}
function jO(s, e) {
  const t = ZO(s, e);
  if (!t)
    return e;
  const n = zA(t, s);
  return mc(n, n.next), mc(t, t.next);
}
function ZO(s, e) {
  let t = e, n = -1 / 0, r;
  const o = s.x, c = s.y;
  do {
    if (c <= t.y && c >= t.next.y && t.next.y !== t.y) {
      const x = t.x + (c - t.y) * (t.next.x - t.x) / (t.next.y - t.y);
      if (x <= o && x > n && (n = x, r = t.x < t.next.x ? t : t.next, x === o))
        return r;
    }
    t = t.next;
  } while (t !== e);
  if (!r)
    return null;
  const f = r, p = r.x, h = r.y;
  let g = 1 / 0, _;
  t = r;
  do
    o >= t.x && t.x >= p && o !== t.x && ld(c < h ? o : n, c, p, h, c < h ? n : o, c, t.x, t.y) && (_ = Math.abs(c - t.y) / (o - t.x), Ap(t, s) && (_ < g || _ === g && (t.x > r.x || t.x === r.x && JO(r, t))) && (r = t, g = _)), t = t.next;
  while (t !== f);
  return r;
}
function JO(s, e) {
  return ri(s.prev, s, e.prev) < 0 && ri(e.next, s, s.next) < 0;
}
function QO(s, e, t, n) {
  let r = s;
  do
    r.z === 0 && (r.z = iS(r.x, r.y, e, t, n)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next;
  while (r !== s);
  r.prevZ.nextZ = null, r.prevZ = null, KO(r);
}
function KO(s) {
  let e, t, n, r, o, c, f, p, h = 1;
  do {
    for (t = s, s = null, o = null, c = 0; t; ) {
      for (c++, n = t, f = 0, e = 0; e < h && (f++, n = n.nextZ, !!n); e++)
        ;
      for (p = h; f > 0 || p > 0 && n; )
        f !== 0 && (p === 0 || !n || t.z <= n.z) ? (r = t, t = t.nextZ, f--) : (r = n, n = n.nextZ, p--), o ? o.nextZ = r : s = r, r.prevZ = o, o = r;
      t = n;
    }
    o.nextZ = null, h *= 2;
  } while (c > 1);
  return s;
}
function iS(s, e, t, n, r) {
  return s = (s - t) * r | 0, e = (e - n) * r | 0, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s | e << 1;
}
function $O(s) {
  let e = s, t = s;
  do
    (e.x < t.x || e.x === t.x && e.y < t.y) && (t = e), e = e.next;
  while (e !== s);
  return t;
}
function ld(s, e, t, n, r, o, c, f) {
  return (r - c) * (e - f) >= (s - c) * (o - f) && (s - c) * (n - f) >= (t - c) * (e - f) && (t - c) * (o - f) >= (r - c) * (n - f);
}
function eF(s, e) {
  return s.next.i !== e.i && s.prev.i !== e.i && !tF(s, e) && // dones't intersect other edges
  (Ap(s, e) && Ap(e, s) && nF(s, e) && // locally visible
  (ri(s.prev, s, e.prev) || ri(s, e.prev, e)) || // does not create opposite-facing sectors
  $g(s, e) && ri(s.prev, s, s.next) > 0 && ri(e.prev, e, e.next) > 0);
}
function ri(s, e, t) {
  return (e.y - s.y) * (t.x - e.x) - (e.x - s.x) * (t.y - e.y);
}
function $g(s, e) {
  return s.x === e.x && s.y === e.y;
}
function FA(s, e, t, n) {
  const r = fg(ri(s, e, t)), o = fg(ri(s, e, n)), c = fg(ri(t, n, s)), f = fg(ri(t, n, e));
  return !!(r !== o && c !== f || r === 0 && cg(s, t, e) || o === 0 && cg(s, n, e) || c === 0 && cg(t, s, n) || f === 0 && cg(t, e, n));
}
function cg(s, e, t) {
  return e.x <= Math.max(s.x, t.x) && e.x >= Math.min(s.x, t.x) && e.y <= Math.max(s.y, t.y) && e.y >= Math.min(s.y, t.y);
}
function fg(s) {
  return s > 0 ? 1 : s < 0 ? -1 : 0;
}
function tF(s, e) {
  let t = s;
  do {
    if (t.i !== s.i && t.next.i !== s.i && t.i !== e.i && t.next.i !== e.i && FA(t, t.next, s, e))
      return !0;
    t = t.next;
  } while (t !== s);
  return !1;
}
function Ap(s, e) {
  return ri(s.prev, s, s.next) < 0 ? ri(s, e, s.next) >= 0 && ri(s, s.prev, e) >= 0 : ri(s, e, s.prev) < 0 || ri(s, s.next, e) < 0;
}
function nF(s, e) {
  let t = s, n = !1;
  const r = (s.x + e.x) / 2, o = (s.y + e.y) / 2;
  do
    t.y > o != t.next.y > o && t.next.y !== t.y && r < (t.next.x - t.x) * (o - t.y) / (t.next.y - t.y) + t.x && (n = !n), t = t.next;
  while (t !== s);
  return n;
}
function zA(s, e) {
  const t = new rS(s.i, s.x, s.y), n = new rS(e.i, e.x, e.y), r = s.next, o = e.prev;
  return s.next = e, e.prev = s, t.next = r, r.prev = t, n.next = t, t.prev = n, o.next = n, n.prev = o, n;
}
function rb(s, e, t, n) {
  const r = new rS(s, e, t);
  return n ? (r.next = n.next, r.prev = n, n.next.prev = r, n.next = r) : (r.prev = r, r.next = r), r;
}
function Rp(s) {
  s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ);
}
function rS(s, e, t) {
  this.i = s, this.x = e, this.y = t, this.prev = null, this.next = null, this.z = 0, this.prevZ = null, this.nextZ = null, this.steiner = !1;
}
function iF(s, e, t, n) {
  let r = 0;
  for (let o = e, c = t - n; o < t; o += n)
    r += (s[c] - s[o]) * (s[o + 1] + s[c + 1]), c = o;
  return r;
}
class Ys {
  // calculate area of the contour polygon
  static area(e) {
    const t = e.length;
    let n = 0;
    for (let r = t - 1, o = 0; o < t; r = o++)
      n += e[r].x * e[o].y - e[o].x * e[r].y;
    return n * 0.5;
  }
  static isClockWise(e) {
    return Ys.area(e) < 0;
  }
  static triangulateShape(e, t) {
    const n = [], r = [], o = [];
    ab(e), sb(n, e);
    let c = e.length;
    t.forEach(ab);
    for (let p = 0; p < t.length; p++)
      r.push(c), c += t[p].length, sb(n, t[p]);
    const f = VO.triangulate(n, r);
    for (let p = 0; p < f.length; p += 3)
      o.push(f.slice(p, p + 3));
    return o;
  }
}
function ab(s) {
  const e = s.length;
  e > 2 && s[e - 1].equals(s[0]) && s.pop();
}
function sb(s, e) {
  for (let t = 0; t < e.length; t++)
    s.push(e[t].x), s.push(e[t].y);
}
class ey extends $t {
  constructor(e = new dc([new De(0.5, 0.5), new De(-0.5, 0.5), new De(-0.5, -0.5), new De(0.5, -0.5)]), t = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: t
    }, e = Array.isArray(e) ? e : [e];
    const n = this, r = [], o = [];
    for (let f = 0, p = e.length; f < p; f++) {
      const h = e[f];
      c(h);
    }
    this.setAttribute("position", new Mt(r, 3)), this.setAttribute("uv", new Mt(o, 2)), this.computeVertexNormals();
    function c(f) {
      const p = [], h = t.curveSegments !== void 0 ? t.curveSegments : 12, g = t.steps !== void 0 ? t.steps : 1, _ = t.depth !== void 0 ? t.depth : 1;
      let x = t.bevelEnabled !== void 0 ? t.bevelEnabled : !0, M = t.bevelThickness !== void 0 ? t.bevelThickness : 0.2, T = t.bevelSize !== void 0 ? t.bevelSize : M - 0.1, R = t.bevelOffset !== void 0 ? t.bevelOffset : 0, b = t.bevelSegments !== void 0 ? t.bevelSegments : 3;
      const E = t.extrudePath, L = t.UVGenerator !== void 0 ? t.UVGenerator : rF;
      let C, U = !1, Y, B, H, k;
      E && (C = E.getSpacedPoints(g), U = !0, x = !1, Y = E.computeFrenetFrames(g, !1), B = new q(), H = new q(), k = new q()), x || (b = 0, M = 0, T = 0, R = 0);
      const F = f.extractPoints(h);
      let N = F.shape;
      const X = F.holes;
      if (!Ys.isClockWise(N)) {
        N = N.reverse();
        for (let Re = 0, Se = X.length; Re < Se; Re++) {
          const He = X[Re];
          Ys.isClockWise(He) && (X[Re] = He.reverse());
        }
      }
      const J = Ys.triangulateShape(N, X), ae = N;
      for (let Re = 0, Se = X.length; Re < Se; Re++) {
        const He = X[Re];
        N = N.concat(He);
      }
      function _e(Re, Se, He) {
        return Se || console.error("THREE.ExtrudeGeometry: vec does not exist"), Re.clone().addScaledVector(Se, He);
      }
      const Me = N.length, Fe = J.length;
      function Q(Re, Se, He) {
        let Be, Ve, W;
        const O = Re.x - Se.x, se = Re.y - Se.y, xe = He.x - Re.x, Ae = He.y - Re.y, Pe = O * O + se * se, st = O * Ae - se * xe;
        if (Math.abs(st) > Number.EPSILON) {
          const Ne = Math.sqrt(Pe), St = Math.sqrt(xe * xe + Ae * Ae), bt = Se.x - se / Ne, Je = Se.y + O / Ne, ft = He.x - Ae / St, Ft = He.y + xe / St, vt = ((ft - bt) * Ae - (Ft - Je) * xe) / (O * Ae - se * xe);
          Be = bt + O * vt - Re.x, Ve = Je + se * vt - Re.y;
          const Te = Be * Be + Ve * Ve;
          if (Te <= 2)
            return new De(Be, Ve);
          W = Math.sqrt(Te / 2);
        } else {
          let Ne = !1;
          O > Number.EPSILON ? xe > Number.EPSILON && (Ne = !0) : O < -Number.EPSILON ? xe < -Number.EPSILON && (Ne = !0) : Math.sign(se) === Math.sign(Ae) && (Ne = !0), Ne ? (Be = -se, Ve = O, W = Math.sqrt(Pe)) : (Be = O, Ve = se, W = Math.sqrt(Pe / 2));
        }
        return new De(Be / W, Ve / W);
      }
      const ue = [];
      for (let Re = 0, Se = ae.length, He = Se - 1, Be = Re + 1; Re < Se; Re++, He++, Be++)
        He === Se && (He = 0), Be === Se && (Be = 0), ue[Re] = Q(ae[Re], ae[He], ae[Be]);
      const ne = [];
      let be, Oe = ue.concat();
      for (let Re = 0, Se = X.length; Re < Se; Re++) {
        const He = X[Re];
        be = [];
        for (let Be = 0, Ve = He.length, W = Ve - 1, O = Be + 1; Be < Ve; Be++, W++, O++)
          W === Ve && (W = 0), O === Ve && (O = 0), be[Be] = Q(He[Be], He[W], He[O]);
        ne.push(be), Oe = Oe.concat(be);
      }
      for (let Re = 0; Re < b; Re++) {
        const Se = Re / b, He = M * Math.cos(Se * Math.PI / 2), Be = T * Math.sin(Se * Math.PI / 2) + R;
        for (let Ve = 0, W = ae.length; Ve < W; Ve++) {
          const O = _e(ae[Ve], ue[Ve], Be);
          Ge(O.x, O.y, -He);
        }
        for (let Ve = 0, W = X.length; Ve < W; Ve++) {
          const O = X[Ve];
          be = ne[Ve];
          for (let se = 0, xe = O.length; se < xe; se++) {
            const Ae = _e(O[se], be[se], Be);
            Ge(Ae.x, Ae.y, -He);
          }
        }
      }
      const ht = T + R;
      for (let Re = 0; Re < Me; Re++) {
        const Se = x ? _e(N[Re], Oe[Re], ht) : N[Re];
        U ? (H.copy(Y.normals[0]).multiplyScalar(Se.x), B.copy(Y.binormals[0]).multiplyScalar(Se.y), k.copy(C[0]).add(H).add(B), Ge(k.x, k.y, k.z)) : Ge(Se.x, Se.y, 0);
      }
      for (let Re = 1; Re <= g; Re++)
        for (let Se = 0; Se < Me; Se++) {
          const He = x ? _e(N[Se], Oe[Se], ht) : N[Se];
          U ? (H.copy(Y.normals[Re]).multiplyScalar(He.x), B.copy(Y.binormals[Re]).multiplyScalar(He.y), k.copy(C[Re]).add(H).add(B), Ge(k.x, k.y, k.z)) : Ge(He.x, He.y, _ / g * Re);
        }
      for (let Re = b - 1; Re >= 0; Re--) {
        const Se = Re / b, He = M * Math.cos(Se * Math.PI / 2), Be = T * Math.sin(Se * Math.PI / 2) + R;
        for (let Ve = 0, W = ae.length; Ve < W; Ve++) {
          const O = _e(ae[Ve], ue[Ve], Be);
          Ge(O.x, O.y, _ + He);
        }
        for (let Ve = 0, W = X.length; Ve < W; Ve++) {
          const O = X[Ve];
          be = ne[Ve];
          for (let se = 0, xe = O.length; se < xe; se++) {
            const Ae = _e(O[se], be[se], Be);
            U ? Ge(Ae.x, Ae.y + C[g - 1].y, C[g - 1].x + He) : Ge(Ae.x, Ae.y, _ + He);
          }
        }
      }
      ve(), Ue();
      function ve() {
        const Re = r.length / 3;
        if (x) {
          let Se = 0, He = Me * Se;
          for (let Be = 0; Be < Fe; Be++) {
            const Ve = J[Be];
            gt(Ve[2] + He, Ve[1] + He, Ve[0] + He);
          }
          Se = g + b * 2, He = Me * Se;
          for (let Be = 0; Be < Fe; Be++) {
            const Ve = J[Be];
            gt(Ve[0] + He, Ve[1] + He, Ve[2] + He);
          }
        } else {
          for (let Se = 0; Se < Fe; Se++) {
            const He = J[Se];
            gt(He[2], He[1], He[0]);
          }
          for (let Se = 0; Se < Fe; Se++) {
            const He = J[Se];
            gt(He[0] + Me * g, He[1] + Me * g, He[2] + Me * g);
          }
        }
        n.addGroup(Re, r.length / 3 - Re, 0);
      }
      function Ue() {
        const Re = r.length / 3;
        let Se = 0;
        Ye(ae, Se), Se += ae.length;
        for (let He = 0, Be = X.length; He < Be; He++) {
          const Ve = X[He];
          Ye(Ve, Se), Se += Ve.length;
        }
        n.addGroup(Re, r.length / 3 - Re, 1);
      }
      function Ye(Re, Se) {
        let He = Re.length;
        for (; --He >= 0; ) {
          const Be = He;
          let Ve = He - 1;
          Ve < 0 && (Ve = Re.length - 1);
          for (let W = 0, O = g + b * 2; W < O; W++) {
            const se = Me * W, xe = Me * (W + 1), Ae = Se + Be + se, Pe = Se + Ve + se, st = Se + Ve + xe, Ne = Se + Be + xe;
            Pt(Ae, Pe, st, Ne);
          }
        }
      }
      function Ge(Re, Se, He) {
        p.push(Re), p.push(Se), p.push(He);
      }
      function gt(Re, Se, He) {
        Dt(Re), Dt(Se), Dt(He);
        const Be = r.length / 3, Ve = L.generateTopUV(n, r, Be - 3, Be - 2, Be - 1);
        ie(Ve[0]), ie(Ve[1]), ie(Ve[2]);
      }
      function Pt(Re, Se, He, Be) {
        Dt(Re), Dt(Se), Dt(Be), Dt(Se), Dt(He), Dt(Be);
        const Ve = r.length / 3, W = L.generateSideWallUV(n, r, Ve - 6, Ve - 3, Ve - 2, Ve - 1);
        ie(W[0]), ie(W[1]), ie(W[3]), ie(W[1]), ie(W[2]), ie(W[3]);
      }
      function Dt(Re) {
        r.push(p[Re * 3 + 0]), r.push(p[Re * 3 + 1]), r.push(p[Re * 3 + 2]);
      }
      function ie(Re) {
        o.push(Re.x), o.push(Re.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes, n = this.parameters.options;
    return aF(t, n, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let o = 0, c = e.shapes.length; o < c; o++) {
      const f = t[e.shapes[o]];
      n.push(f);
    }
    const r = e.options.extrudePath;
    return r !== void 0 && (e.options.extrudePath = new Dg[r.type]().fromJSON(r)), new ey(n, e.options);
  }
}
const rF = {
  generateTopUV: function(s, e, t, n, r) {
    const o = e[t * 3], c = e[t * 3 + 1], f = e[n * 3], p = e[n * 3 + 1], h = e[r * 3], g = e[r * 3 + 1];
    return [
      new De(o, c),
      new De(f, p),
      new De(h, g)
    ];
  },
  generateSideWallUV: function(s, e, t, n, r, o) {
    const c = e[t * 3], f = e[t * 3 + 1], p = e[t * 3 + 2], h = e[n * 3], g = e[n * 3 + 1], _ = e[n * 3 + 2], x = e[r * 3], M = e[r * 3 + 1], T = e[r * 3 + 2], R = e[o * 3], b = e[o * 3 + 1], E = e[o * 3 + 2];
    return Math.abs(f - g) < Math.abs(c - h) ? [
      new De(c, 1 - p),
      new De(h, 1 - _),
      new De(x, 1 - T),
      new De(R, 1 - E)
    ] : [
      new De(f, 1 - p),
      new De(g, 1 - _),
      new De(M, 1 - T),
      new De(b, 1 - E)
    ];
  }
};
function aF(s, e, t) {
  if (t.shapes = [], Array.isArray(s))
    for (let n = 0, r = s.length; n < r; n++) {
      const o = s[n];
      t.shapes.push(o.uuid);
    }
  else
    t.shapes.push(s.uuid);
  return t.options = Object.assign({}, e), e.extrudePath !== void 0 && (t.options.extrudePath = e.extrudePath.toJSON()), t;
}
class ty extends Jl {
  constructor(e = 1, t = 0) {
    const n = (1 + Math.sqrt(5)) / 2, r = [
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      0,
      0,
      -1,
      n,
      0,
      1,
      n,
      0,
      -1,
      -n,
      0,
      1,
      -n,
      n,
      0,
      -1,
      n,
      0,
      1,
      -n,
      0,
      -1,
      -n,
      0,
      1
    ], o = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(r, o, e, t), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new ty(e.radius, e.detail);
  }
}
class Hp extends Jl {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], r = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(n, r, e, t), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new Hp(e.radius, e.detail);
  }
}
class ny extends $t {
  constructor(e = 0.5, t = 1, n = 32, r = 1, o = 0, c = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: t,
      thetaSegments: n,
      phiSegments: r,
      thetaStart: o,
      thetaLength: c
    }, n = Math.max(3, n), r = Math.max(1, r);
    const f = [], p = [], h = [], g = [];
    let _ = e;
    const x = (t - e) / r, M = new q(), T = new De();
    for (let R = 0; R <= r; R++) {
      for (let b = 0; b <= n; b++) {
        const E = o + b / n * c;
        M.x = _ * Math.cos(E), M.y = _ * Math.sin(E), p.push(M.x, M.y, M.z), h.push(0, 0, 1), T.x = (M.x / t + 1) / 2, T.y = (M.y / t + 1) / 2, g.push(T.x, T.y);
      }
      _ += x;
    }
    for (let R = 0; R < r; R++) {
      const b = R * (n + 1);
      for (let E = 0; E < n; E++) {
        const L = E + b, C = L, U = L + n + 1, Y = L + n + 2, B = L + 1;
        f.push(C, U, B), f.push(U, Y, B);
      }
    }
    this.setIndex(f), this.setAttribute("position", new Mt(p, 3)), this.setAttribute("normal", new Mt(h, 3)), this.setAttribute("uv", new Mt(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ny(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class iy extends $t {
  constructor(e = new dc([new De(0, 0.5), new De(-0.5, -0.5), new De(0.5, -0.5)]), t = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: t
    };
    const n = [], r = [], o = [], c = [];
    let f = 0, p = 0;
    if (Array.isArray(e) === !1)
      h(e);
    else
      for (let g = 0; g < e.length; g++)
        h(e[g]), this.addGroup(f, p, g), f += p, p = 0;
    this.setIndex(n), this.setAttribute("position", new Mt(r, 3)), this.setAttribute("normal", new Mt(o, 3)), this.setAttribute("uv", new Mt(c, 2));
    function h(g) {
      const _ = r.length / 3, x = g.extractPoints(t);
      let M = x.shape;
      const T = x.holes;
      Ys.isClockWise(M) === !1 && (M = M.reverse());
      for (let b = 0, E = T.length; b < E; b++) {
        const L = T[b];
        Ys.isClockWise(L) === !0 && (T[b] = L.reverse());
      }
      const R = Ys.triangulateShape(M, T);
      for (let b = 0, E = T.length; b < E; b++) {
        const L = T[b];
        M = M.concat(L);
      }
      for (let b = 0, E = M.length; b < E; b++) {
        const L = M[b];
        r.push(L.x, L.y, 0), o.push(0, 0, 1), c.push(L.x, L.y);
      }
      for (let b = 0, E = R.length; b < E; b++) {
        const L = R[b], C = L[0] + _, U = L[1] + _, Y = L[2] + _;
        n.push(C, U, Y), p += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), t = this.parameters.shapes;
    return sF(t, e);
  }
  static fromJSON(e, t) {
    const n = [];
    for (let r = 0, o = e.shapes.length; r < o; r++) {
      const c = t[e.shapes[r]];
      n.push(c);
    }
    return new iy(n, e.curveSegments);
  }
}
function sF(s, e) {
  if (e.shapes = [], Array.isArray(s))
    for (let t = 0, n = s.length; t < n; t++) {
      const r = s[t];
      e.shapes.push(r.uuid);
    }
  else
    e.shapes.push(s.uuid);
  return e;
}
class Vp extends $t {
  constructor(e = 1, t = 32, n = 16, r = 0, o = Math.PI * 2, c = 0, f = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: t,
      heightSegments: n,
      phiStart: r,
      phiLength: o,
      thetaStart: c,
      thetaLength: f
    }, t = Math.max(3, Math.floor(t)), n = Math.max(2, Math.floor(n));
    const p = Math.min(c + f, Math.PI);
    let h = 0;
    const g = [], _ = new q(), x = new q(), M = [], T = [], R = [], b = [];
    for (let E = 0; E <= n; E++) {
      const L = [], C = E / n;
      let U = 0;
      E === 0 && c === 0 ? U = 0.5 / t : E === n && p === Math.PI && (U = -0.5 / t);
      for (let Y = 0; Y <= t; Y++) {
        const B = Y / t;
        _.x = -e * Math.cos(r + B * o) * Math.sin(c + C * f), _.y = e * Math.cos(c + C * f), _.z = e * Math.sin(r + B * o) * Math.sin(c + C * f), T.push(_.x, _.y, _.z), x.copy(_).normalize(), R.push(x.x, x.y, x.z), b.push(B + U, 1 - C), L.push(h++);
      }
      g.push(L);
    }
    for (let E = 0; E < n; E++)
      for (let L = 0; L < t; L++) {
        const C = g[E][L + 1], U = g[E][L], Y = g[E + 1][L], B = g[E + 1][L + 1];
        (E !== 0 || c > 0) && M.push(C, U, B), (E !== n - 1 || p < Math.PI) && M.push(U, Y, B);
      }
    this.setIndex(M), this.setAttribute("position", new Mt(T, 3)), this.setAttribute("normal", new Mt(R, 3)), this.setAttribute("uv", new Mt(b, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new Vp(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class ry extends Jl {
  constructor(e = 1, t = 0) {
    const n = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], r = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(n, r, e, t), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: t
    };
  }
  static fromJSON(e) {
    return new ry(e.radius, e.detail);
  }
}
class ay extends $t {
  constructor(e = 1, t = 0.4, n = 12, r = 48, o = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: t,
      radialSegments: n,
      tubularSegments: r,
      arc: o
    }, n = Math.floor(n), r = Math.floor(r);
    const c = [], f = [], p = [], h = [], g = new q(), _ = new q(), x = new q();
    for (let M = 0; M <= n; M++)
      for (let T = 0; T <= r; T++) {
        const R = T / r * o, b = M / n * Math.PI * 2;
        _.x = (e + t * Math.cos(b)) * Math.cos(R), _.y = (e + t * Math.cos(b)) * Math.sin(R), _.z = t * Math.sin(b), f.push(_.x, _.y, _.z), g.x = e * Math.cos(R), g.y = e * Math.sin(R), x.subVectors(_, g).normalize(), p.push(x.x, x.y, x.z), h.push(T / r), h.push(M / n);
      }
    for (let M = 1; M <= n; M++)
      for (let T = 1; T <= r; T++) {
        const R = (r + 1) * M + T - 1, b = (r + 1) * (M - 1) + T - 1, E = (r + 1) * (M - 1) + T, L = (r + 1) * M + T;
        c.push(R, b, L), c.push(b, E, L);
      }
    this.setIndex(c), this.setAttribute("position", new Mt(f, 3)), this.setAttribute("normal", new Mt(p, 3)), this.setAttribute("uv", new Mt(h, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new ay(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class sy extends $t {
  constructor(e = 1, t = 0.4, n = 64, r = 8, o = 2, c = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: t,
      tubularSegments: n,
      radialSegments: r,
      p: o,
      q: c
    }, n = Math.floor(n), r = Math.floor(r);
    const f = [], p = [], h = [], g = [], _ = new q(), x = new q(), M = new q(), T = new q(), R = new q(), b = new q(), E = new q();
    for (let C = 0; C <= n; ++C) {
      const U = C / n * o * Math.PI * 2;
      L(U, o, c, e, M), L(U + 0.01, o, c, e, T), b.subVectors(T, M), E.addVectors(T, M), R.crossVectors(b, E), E.crossVectors(R, b), R.normalize(), E.normalize();
      for (let Y = 0; Y <= r; ++Y) {
        const B = Y / r * Math.PI * 2, H = -t * Math.cos(B), k = t * Math.sin(B);
        _.x = M.x + (H * E.x + k * R.x), _.y = M.y + (H * E.y + k * R.y), _.z = M.z + (H * E.z + k * R.z), p.push(_.x, _.y, _.z), x.subVectors(_, M).normalize(), h.push(x.x, x.y, x.z), g.push(C / n), g.push(Y / r);
      }
    }
    for (let C = 1; C <= n; C++)
      for (let U = 1; U <= r; U++) {
        const Y = (r + 1) * (C - 1) + (U - 1), B = (r + 1) * C + (U - 1), H = (r + 1) * C + U, k = (r + 1) * (C - 1) + U;
        f.push(Y, B, k), f.push(B, H, k);
      }
    this.setIndex(f), this.setAttribute("position", new Mt(p, 3)), this.setAttribute("normal", new Mt(h, 3)), this.setAttribute("uv", new Mt(g, 2));
    function L(C, U, Y, B, H) {
      const k = Math.cos(C), F = Math.sin(C), N = Y / U * C, X = Math.cos(N);
      H.x = B * (2 + X) * 0.5 * k, H.y = B * (2 + X) * F * 0.5, H.z = B * Math.sin(N) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  static fromJSON(e) {
    return new sy(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class oy extends $t {
  constructor(e = new kS(new q(-1, -1, 0), new q(-1, 1, 0), new q(1, 1, 0)), t = 64, n = 1, r = 8, o = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: t,
      radius: n,
      radialSegments: r,
      closed: o
    };
    const c = e.computeFrenetFrames(t, o);
    this.tangents = c.tangents, this.normals = c.normals, this.binormals = c.binormals;
    const f = new q(), p = new q(), h = new De();
    let g = new q();
    const _ = [], x = [], M = [], T = [];
    R(), this.setIndex(T), this.setAttribute("position", new Mt(_, 3)), this.setAttribute("normal", new Mt(x, 3)), this.setAttribute("uv", new Mt(M, 2));
    function R() {
      for (let C = 0; C < t; C++)
        b(C);
      b(o === !1 ? t : 0), L(), E();
    }
    function b(C) {
      g = e.getPointAt(C / t, g);
      const U = c.normals[C], Y = c.binormals[C];
      for (let B = 0; B <= r; B++) {
        const H = B / r * Math.PI * 2, k = Math.sin(H), F = -Math.cos(H);
        p.x = F * U.x + k * Y.x, p.y = F * U.y + k * Y.y, p.z = F * U.z + k * Y.z, p.normalize(), x.push(p.x, p.y, p.z), f.x = g.x + n * p.x, f.y = g.y + n * p.y, f.z = g.z + n * p.z, _.push(f.x, f.y, f.z);
      }
    }
    function E() {
      for (let C = 1; C <= t; C++)
        for (let U = 1; U <= r; U++) {
          const Y = (r + 1) * (C - 1) + (U - 1), B = (r + 1) * C + (U - 1), H = (r + 1) * C + U, k = (r + 1) * (C - 1) + U;
          T.push(Y, B, k), T.push(B, H, k);
        }
    }
    function L() {
      for (let C = 0; C <= t; C++)
        for (let U = 0; U <= r; U++)
          h.x = C / t, h.y = U / r, M.push(h.x, h.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  static fromJSON(e) {
    return new oy(
      new Dg[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class BA extends $t {
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const t = [], n = /* @__PURE__ */ new Set(), r = new q(), o = new q();
      if (e.index !== null) {
        const c = e.attributes.position, f = e.index;
        let p = e.groups;
        p.length === 0 && (p = [{ start: 0, count: f.count, materialIndex: 0 }]);
        for (let h = 0, g = p.length; h < g; ++h) {
          const _ = p[h], x = _.start, M = _.count;
          for (let T = x, R = x + M; T < R; T += 3)
            for (let b = 0; b < 3; b++) {
              const E = f.getX(T + b), L = f.getX(T + (b + 1) % 3);
              r.fromBufferAttribute(c, E), o.fromBufferAttribute(c, L), ob(r, o, n) === !0 && (t.push(r.x, r.y, r.z), t.push(o.x, o.y, o.z));
            }
        }
      } else {
        const c = e.attributes.position;
        for (let f = 0, p = c.count / 3; f < p; f++)
          for (let h = 0; h < 3; h++) {
            const g = 3 * f + h, _ = 3 * f + (h + 1) % 3;
            r.fromBufferAttribute(c, g), o.fromBufferAttribute(c, _), ob(r, o, n) === !0 && (t.push(r.x, r.y, r.z), t.push(o.x, o.y, o.z));
          }
      }
      this.setAttribute("position", new Mt(t, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function ob(s, e, t) {
  const n = `${s.x},${s.y},${s.z}-${e.x},${e.y},${e.z}`, r = `${e.x},${e.y},${e.z}-${s.x},${s.y},${s.z}`;
  return t.has(n) === !0 || t.has(r) === !0 ? !1 : (t.add(n), t.add(r), !0);
}
var lb = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: vc,
  CapsuleGeometry: Zg,
  CircleGeometry: Jg,
  ConeGeometry: Qg,
  CylinderGeometry: Md,
  DodecahedronGeometry: Kg,
  EdgesGeometry: IA,
  ExtrudeGeometry: ey,
  IcosahedronGeometry: ty,
  LatheGeometry: Bp,
  OctahedronGeometry: Hp,
  PlaneGeometry: xd,
  PolyhedronGeometry: Jl,
  RingGeometry: ny,
  ShapeGeometry: iy,
  SphereGeometry: Vp,
  TetrahedronGeometry: ry,
  TorusGeometry: ay,
  TorusKnotGeometry: sy,
  TubeGeometry: oy,
  WireframeGeometry: BA
});
class HA extends ir {
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new mt(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class VA extends gs {
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class WS extends ir {
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.defines = { STANDARD: "" }, this.type = "MeshStandardMaterial", this.color = new mt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new mt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class kA extends WS {
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new De(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return ci(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(t) {
        this.ior = (1 + 0.4 * t) / (1 - 0.4 * t);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new mt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new mt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new mt(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class GA extends ir {
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new mt(16777215), this.specular = new mt(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new mt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = Np, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class WA extends ir {
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new mt(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new mt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class XA extends ir {
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class qA extends ir {
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new mt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new mt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new _a(), this.combine = Np, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class YA extends ir {
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new mt(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = jl, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class jA extends Ur {
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function oc(s, e, t) {
  return !s || // let 'undefined' and 'null' pass
  !t && s.constructor === e ? s : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s) : Array.prototype.slice.call(s);
}
function ZA(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function JA(s) {
  function e(r, o) {
    return s[r] - s[o];
  }
  const t = s.length, n = new Array(t);
  for (let r = 0; r !== t; ++r)
    n[r] = r;
  return n.sort(e), n;
}
function aS(s, e, t) {
  const n = s.length, r = new s.constructor(n);
  for (let o = 0, c = 0; c !== n; ++o) {
    const f = t[o] * e;
    for (let p = 0; p !== e; ++p)
      r[c++] = s[f + p];
  }
  return r;
}
function XS(s, e, t, n) {
  let r = 1, o = s[0];
  for (; o !== void 0 && o[n] === void 0; )
    o = s[r++];
  if (o === void 0)
    return;
  let c = o[n];
  if (c !== void 0)
    if (Array.isArray(c))
      do
        c = o[n], c !== void 0 && (e.push(o.time), t.push.apply(t, c)), o = s[r++];
      while (o !== void 0);
    else if (c.toArray !== void 0)
      do
        c = o[n], c !== void 0 && (e.push(o.time), c.toArray(t, t.length)), o = s[r++];
      while (o !== void 0);
    else
      do
        c = o[n], c !== void 0 && (e.push(o.time), t.push(c)), o = s[r++];
      while (o !== void 0);
}
function oF(s, e, t, n, r = 30) {
  const o = s.clone();
  o.name = e;
  const c = [];
  for (let p = 0; p < o.tracks.length; ++p) {
    const h = o.tracks[p], g = h.getValueSize(), _ = [], x = [];
    for (let M = 0; M < h.times.length; ++M) {
      const T = h.times[M] * r;
      if (!(T < t || T >= n)) {
        _.push(h.times[M]);
        for (let R = 0; R < g; ++R)
          x.push(h.values[M * g + R]);
      }
    }
    _.length !== 0 && (h.times = oc(_, h.times.constructor), h.values = oc(x, h.values.constructor), c.push(h));
  }
  o.tracks = c;
  let f = 1 / 0;
  for (let p = 0; p < o.tracks.length; ++p)
    f > o.tracks[p].times[0] && (f = o.tracks[p].times[0]);
  for (let p = 0; p < o.tracks.length; ++p)
    o.tracks[p].shift(-1 * f);
  return o.resetDuration(), o;
}
function lF(s, e = 0, t = s, n = 30) {
  n <= 0 && (n = 30);
  const r = t.tracks.length, o = e / n;
  for (let c = 0; c < r; ++c) {
    const f = t.tracks[c], p = f.ValueTypeName;
    if (p === "bool" || p === "string")
      continue;
    const h = s.tracks.find(function(E) {
      return E.name === f.name && E.ValueTypeName === p;
    });
    if (h === void 0)
      continue;
    let g = 0;
    const _ = f.getValueSize();
    f.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (g = _ / 3);
    let x = 0;
    const M = h.getValueSize();
    h.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (x = M / 3);
    const T = f.times.length - 1;
    let R;
    if (o <= f.times[0]) {
      const E = g, L = _ - g;
      R = f.values.slice(E, L);
    } else if (o >= f.times[T]) {
      const E = T * _ + g, L = E + _ - g;
      R = f.values.slice(E, L);
    } else {
      const E = f.createInterpolant(), L = g, C = _ - g;
      E.evaluate(o), R = E.resultBuffer.slice(L, C);
    }
    p === "quaternion" && new Kr().fromArray(R).normalize().conjugate().toArray(R);
    const b = h.times.length;
    for (let E = 0; E < b; ++E) {
      const L = E * M + x;
      if (p === "quaternion")
        Kr.multiplyQuaternionsFlat(
          h.values,
          L,
          R,
          0,
          h.values,
          L
        );
      else {
        const C = M - x * 2;
        for (let U = 0; U < C; ++U)
          h.values[L + U] -= R[U];
      }
    }
  }
  return s.blendMode = bS, s;
}
const uF = {
  convertArray: oc,
  isTypedArray: ZA,
  getKeyframeOrder: JA,
  sortedArray: aS,
  flattenJSON: XS,
  subclip: oF,
  makeClipAdditive: lF
};
class kp {
  constructor(e, t, n, r) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = r !== void 0 ? r : new t.constructor(n), this.sampleValues = t, this.valueSize = n, this.settings = null, this.DefaultSettings_ = {};
  }
  evaluate(e) {
    const t = this.parameterPositions;
    let n = this._cachedIndex, r = t[n], o = t[n - 1];
    e: {
      t: {
        let c;
        n: {
          i:
            if (!(e < r)) {
              for (let f = n + 2; ; ) {
                if (r === void 0) {
                  if (e < o)
                    break i;
                  return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
                }
                if (n === f)
                  break;
                if (o = r, r = t[++n], e < r)
                  break t;
              }
              c = t.length;
              break n;
            }
          if (!(e >= o)) {
            const f = t[1];
            e < f && (n = 2, o = f);
            for (let p = n - 2; ; ) {
              if (o === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (n === p)
                break;
              if (r = o, o = t[--n - 1], e >= o)
                break t;
            }
            c = n, n = 0;
            break n;
          }
          break e;
        }
        for (; n < c; ) {
          const f = n + c >>> 1;
          e < t[f] ? c = f : n = f + 1;
        }
        if (r = t[n], o = t[n - 1], o === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (r === void 0)
          return n = t.length, this._cachedIndex = n, this.copySampleValue_(n - 1);
      }
      this._cachedIndex = n, this.intervalChanged_(n, o, r);
    }
    return this.interpolate_(n, o, e, r);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(e) {
    const t = this.resultBuffer, n = this.sampleValues, r = this.valueSize, o = e * r;
    for (let c = 0; c !== r; ++c)
      t[c] = n[o + c];
    return t;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
}
class QA extends kp {
  constructor(e, t, n, r) {
    super(e, t, n, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: rc,
      endingEnd: rc
    };
  }
  intervalChanged_(e, t, n) {
    const r = this.parameterPositions;
    let o = e - 2, c = e + 1, f = r[o], p = r[c];
    if (f === void 0)
      switch (this.getSettings_().endingStart) {
        case ac:
          o = e, f = 2 * t - n;
          break;
        case yp:
          o = r.length - 2, f = t + r[o] - r[o + 1];
          break;
        default:
          o = e, f = n;
      }
    if (p === void 0)
      switch (this.getSettings_().endingEnd) {
        case ac:
          c = e, p = 2 * n - t;
          break;
        case yp:
          c = 1, p = n + r[1] - r[0];
          break;
        default:
          c = e - 1, p = t;
      }
    const h = (n - t) * 0.5, g = this.valueSize;
    this._weightPrev = h / (t - f), this._weightNext = h / (p - n), this._offsetPrev = o * g, this._offsetNext = c * g;
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = e * f, h = p - f, g = this._offsetPrev, _ = this._offsetNext, x = this._weightPrev, M = this._weightNext, T = (n - t) / (r - t), R = T * T, b = R * T, E = -x * b + 2 * x * R - x * T, L = (1 + x) * b + (-1.5 - 2 * x) * R + (-0.5 + x) * T + 1, C = (-1 - M) * b + (1.5 + M) * R + 0.5 * T, U = M * b - M * R;
    for (let Y = 0; Y !== f; ++Y)
      o[Y] = E * c[g + Y] + L * c[h + Y] + C * c[p + Y] + U * c[_ + Y];
    return o;
  }
}
class qS extends kp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = e * f, h = p - f, g = (n - t) / (r - t), _ = 1 - g;
    for (let x = 0; x !== f; ++x)
      o[x] = c[h + x] * _ + c[p + x] * g;
    return o;
  }
}
class KA extends kp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class _s {
  constructor(e, t, n, r) {
    if (e === void 0)
      throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (t === void 0 || t.length === 0)
      throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = oc(t, this.TimeBufferType), this.values = oc(n, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(e) {
    const t = e.constructor;
    let n;
    if (t.toJSON !== this.toJSON)
      n = t.toJSON(e);
    else {
      n = {
        name: e.name,
        times: oc(e.times, Array),
        values: oc(e.values, Array)
      };
      const r = e.getInterpolation();
      r !== e.DefaultInterpolation && (n.interpolation = r);
    }
    return n.type = e.ValueTypeName, n;
  }
  InterpolantFactoryMethodDiscrete(e) {
    return new KA(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodLinear(e) {
    return new qS(this.times, this.values, this.getValueSize(), e);
  }
  InterpolantFactoryMethodSmooth(e) {
    return new QA(this.times, this.values, this.getValueSize(), e);
  }
  setInterpolation(e) {
    let t;
    switch (e) {
      case vp:
        t = this.InterpolantFactoryMethodDiscrete;
        break;
      case gp:
        t = this.InterpolantFactoryMethodLinear;
        break;
      case wg:
        t = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (t === void 0) {
      const n = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(n);
      return console.warn("THREE.KeyframeTrack:", n), this;
    }
    return this.createInterpolant = t, this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return vp;
      case this.InterpolantFactoryMethodLinear:
        return gp;
      case this.InterpolantFactoryMethodSmooth:
        return wg;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(e) {
    if (e !== 0) {
      const t = this.times;
      for (let n = 0, r = t.length; n !== r; ++n)
        t[n] += e;
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(e) {
    if (e !== 1) {
      const t = this.times;
      for (let n = 0, r = t.length; n !== r; ++n)
        t[n] *= e;
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(e, t) {
    const n = this.times, r = n.length;
    let o = 0, c = r - 1;
    for (; o !== r && n[o] < e; )
      ++o;
    for (; c !== -1 && n[c] > t; )
      --c;
    if (++c, o !== 0 || c !== r) {
      o >= c && (c = Math.max(c, 1), o = c - 1);
      const f = this.getValueSize();
      this.times = n.slice(o, c), this.values = this.values.slice(o * f, c * f);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let e = !0;
    const t = this.getValueSize();
    t - Math.floor(t) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const n = this.times, r = this.values, o = n.length;
    o === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let c = null;
    for (let f = 0; f !== o; f++) {
      const p = n[f];
      if (typeof p == "number" && isNaN(p)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, f, p), e = !1;
        break;
      }
      if (c !== null && c > p) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, f, p, c), e = !1;
        break;
      }
      c = p;
    }
    if (r !== void 0 && ZA(r))
      for (let f = 0, p = r.length; f !== p; ++f) {
        const h = r[f];
        if (isNaN(h)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, f, h), e = !1;
          break;
        }
      }
    return e;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const e = this.times.slice(), t = this.values.slice(), n = this.getValueSize(), r = this.getInterpolation() === wg, o = e.length - 1;
    let c = 1;
    for (let f = 1; f < o; ++f) {
      let p = !1;
      const h = e[f], g = e[f + 1];
      if (h !== g && (f !== 1 || h !== e[0]))
        if (r)
          p = !0;
        else {
          const _ = f * n, x = _ - n, M = _ + n;
          for (let T = 0; T !== n; ++T) {
            const R = t[_ + T];
            if (R !== t[x + T] || R !== t[M + T]) {
              p = !0;
              break;
            }
          }
        }
      if (p) {
        if (f !== c) {
          e[c] = e[f];
          const _ = f * n, x = c * n;
          for (let M = 0; M !== n; ++M)
            t[x + M] = t[_ + M];
        }
        ++c;
      }
    }
    if (o > 0) {
      e[c] = e[o];
      for (let f = o * n, p = c * n, h = 0; h !== n; ++h)
        t[p + h] = t[f + h];
      ++c;
    }
    return c !== e.length ? (this.times = e.slice(0, c), this.values = t.slice(0, c * n)) : (this.times = e, this.values = t), this;
  }
  clone() {
    const e = this.times.slice(), t = this.values.slice(), n = this.constructor, r = new n(this.name, e, t);
    return r.createInterpolant = this.createInterpolant, r;
  }
}
_s.prototype.TimeBufferType = Float32Array;
_s.prototype.ValueBufferType = Float32Array;
_s.prototype.DefaultInterpolation = gp;
class gc extends _s {
}
gc.prototype.ValueTypeName = "bool";
gc.prototype.ValueBufferType = Array;
gc.prototype.DefaultInterpolation = vp;
gc.prototype.InterpolantFactoryMethodLinear = void 0;
gc.prototype.InterpolantFactoryMethodSmooth = void 0;
class YS extends _s {
}
YS.prototype.ValueTypeName = "color";
class Cp extends _s {
}
Cp.prototype.ValueTypeName = "number";
class $A extends kp {
  constructor(e, t, n, r) {
    super(e, t, n, r);
  }
  interpolate_(e, t, n, r) {
    const o = this.resultBuffer, c = this.sampleValues, f = this.valueSize, p = (n - t) / (r - t);
    let h = e * f;
    for (let g = h + f; h !== g; h += 4)
      Kr.slerpFlat(o, 0, c, h - f, c, h, p);
    return o;
  }
}
class Ed extends _s {
  InterpolantFactoryMethodLinear(e) {
    return new $A(this.times, this.values, this.getValueSize(), e);
  }
}
Ed.prototype.ValueTypeName = "quaternion";
Ed.prototype.DefaultInterpolation = gp;
Ed.prototype.InterpolantFactoryMethodSmooth = void 0;
class yc extends _s {
}
yc.prototype.ValueTypeName = "string";
yc.prototype.ValueBufferType = Array;
yc.prototype.DefaultInterpolation = vp;
yc.prototype.InterpolantFactoryMethodLinear = void 0;
yc.prototype.InterpolantFactoryMethodSmooth = void 0;
class Lp extends _s {
}
Lp.prototype.ValueTypeName = "vector";
class Pp {
  constructor(e = "", t = -1, n = [], r = Bg) {
    this.name = e, this.tracks = n, this.duration = t, this.blendMode = r, this.uuid = ya(), this.duration < 0 && this.resetDuration();
  }
  static parse(e) {
    const t = [], n = e.tracks, r = 1 / (e.fps || 1);
    for (let c = 0, f = n.length; c !== f; ++c)
      t.push(fF(n[c]).scale(r));
    const o = new this(e.name, e.duration, t, e.blendMode);
    return o.uuid = e.uuid, o;
  }
  static toJSON(e) {
    const t = [], n = e.tracks, r = {
      name: e.name,
      duration: e.duration,
      tracks: t,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let o = 0, c = n.length; o !== c; ++o)
      t.push(_s.toJSON(n[o]));
    return r;
  }
  static CreateFromMorphTargetSequence(e, t, n, r) {
    const o = t.length, c = [];
    for (let f = 0; f < o; f++) {
      let p = [], h = [];
      p.push(
        (f + o - 1) % o,
        f,
        (f + 1) % o
      ), h.push(0, 1, 0);
      const g = JA(p);
      p = aS(p, 1, g), h = aS(h, 1, g), !r && p[0] === 0 && (p.push(o), h.push(h[0])), c.push(
        new Cp(
          ".morphTargetInfluences[" + t[f].name + "]",
          p,
          h
        ).scale(1 / n)
      );
    }
    return new this(e, -1, c);
  }
  static findByName(e, t) {
    let n = e;
    if (!Array.isArray(e)) {
      const r = e;
      n = r.geometry && r.geometry.animations || r.animations;
    }
    for (let r = 0; r < n.length; r++)
      if (n[r].name === t)
        return n[r];
    return null;
  }
  static CreateClipsFromMorphTargetSequences(e, t, n) {
    const r = {}, o = /^([\w-]*?)([\d]+)$/;
    for (let f = 0, p = e.length; f < p; f++) {
      const h = e[f], g = h.name.match(o);
      if (g && g.length > 1) {
        const _ = g[1];
        let x = r[_];
        x || (r[_] = x = []), x.push(h);
      }
    }
    const c = [];
    for (const f in r)
      c.push(this.CreateFromMorphTargetSequence(f, r[f], t, n));
    return c;
  }
  // parse the animation.hierarchy format
  static parseAnimation(e, t) {
    if (!e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const n = function(_, x, M, T, R) {
      if (M.length !== 0) {
        const b = [], E = [];
        XS(M, b, E, T), b.length !== 0 && R.push(new _(x, b, E));
      }
    }, r = [], o = e.name || "default", c = e.fps || 30, f = e.blendMode;
    let p = e.length || -1;
    const h = e.hierarchy || [];
    for (let _ = 0; _ < h.length; _++) {
      const x = h[_].keys;
      if (!(!x || x.length === 0))
        if (x[0].morphTargets) {
          const M = {};
          let T;
          for (T = 0; T < x.length; T++)
            if (x[T].morphTargets)
              for (let R = 0; R < x[T].morphTargets.length; R++)
                M[x[T].morphTargets[R]] = -1;
          for (const R in M) {
            const b = [], E = [];
            for (let L = 0; L !== x[T].morphTargets.length; ++L) {
              const C = x[T];
              b.push(C.time), E.push(C.morphTarget === R ? 1 : 0);
            }
            r.push(new Cp(".morphTargetInfluence[" + R + "]", b, E));
          }
          p = M.length * c;
        } else {
          const M = ".bones[" + t[_].name + "]";
          n(
            Lp,
            M + ".position",
            x,
            "pos",
            r
          ), n(
            Ed,
            M + ".quaternion",
            x,
            "rot",
            r
          ), n(
            Lp,
            M + ".scale",
            x,
            "scl",
            r
          );
        }
    }
    return r.length === 0 ? null : new this(o, p, r, f);
  }
  resetDuration() {
    const e = this.tracks;
    let t = 0;
    for (let n = 0, r = e.length; n !== r; ++n) {
      const o = this.tracks[n];
      t = Math.max(t, o.times[o.times.length - 1]);
    }
    return this.duration = t, this;
  }
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  validate() {
    let e = !0;
    for (let t = 0; t < this.tracks.length; t++)
      e = e && this.tracks[t].validate();
    return e;
  }
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  clone() {
    const e = [];
    for (let t = 0; t < this.tracks.length; t++)
      e.push(this.tracks[t].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function cF(s) {
  switch (s.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return Cp;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return Lp;
    case "color":
      return YS;
    case "quaternion":
      return Ed;
    case "bool":
    case "boolean":
      return gc;
    case "string":
      return yc;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s);
}
function fF(s) {
  if (s.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = cF(s.type);
  if (s.times === void 0) {
    const t = [], n = [];
    XS(s.keys, t, n, "value"), s.times = t, s.values = n;
  }
  return e.parse !== void 0 ? e.parse(s) : new e(s.name, s.times, s.values, s.interpolation);
}
const Uo = {
  enabled: !1,
  files: {},
  add: function(s, e) {
    this.enabled !== !1 && (this.files[s] = e);
  },
  get: function(s) {
    if (this.enabled !== !1)
      return this.files[s];
  },
  remove: function(s) {
    delete this.files[s];
  },
  clear: function() {
    this.files = {};
  }
};
class jS {
  constructor(e, t, n) {
    const r = this;
    let o = !1, c = 0, f = 0, p;
    const h = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = t, this.onError = n, this.itemStart = function(g) {
      f++, o === !1 && r.onStart !== void 0 && r.onStart(g, c, f), o = !0;
    }, this.itemEnd = function(g) {
      c++, r.onProgress !== void 0 && r.onProgress(g, c, f), c === f && (o = !1, r.onLoad !== void 0 && r.onLoad());
    }, this.itemError = function(g) {
      r.onError !== void 0 && r.onError(g);
    }, this.resolveURL = function(g) {
      return p ? p(g) : g;
    }, this.setURLModifier = function(g) {
      return p = g, this;
    }, this.addHandler = function(g, _) {
      return h.push(g, _), this;
    }, this.removeHandler = function(g) {
      const _ = h.indexOf(g);
      return _ !== -1 && h.splice(_, 2), this;
    }, this.getHandler = function(g) {
      for (let _ = 0, x = h.length; _ < x; _ += 2) {
        const M = h[_], T = h[_ + 1];
        if (M.global && (M.lastIndex = 0), M.test(g))
          return T;
      }
      return null;
    };
  }
}
const eR = /* @__PURE__ */ new jS();
class $r {
  constructor(e) {
    this.manager = e !== void 0 ? e : eR, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  load() {
  }
  loadAsync(e, t) {
    const n = this;
    return new Promise(function(r, o) {
      n.load(e, r, t, o);
    });
  }
  parse() {
  }
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  setPath(e) {
    return this.path = e, this;
  }
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
}
$r.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const Lo = {};
class dF extends Error {
  constructor(e, t) {
    super(e), this.response = t;
  }
}
class zo extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = Uo.get(e);
    if (o !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        t && t(o), this.manager.itemEnd(e);
      }, 0), o;
    if (Lo[e] !== void 0) {
      Lo[e].push({
        onLoad: t,
        onProgress: n,
        onError: r
      });
      return;
    }
    Lo[e] = [], Lo[e].push({
      onLoad: t,
      onProgress: n,
      onError: r
    });
    const c = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    }), f = this.mimeType, p = this.responseType;
    fetch(c).then((h) => {
      if (h.status === 200 || h.status === 0) {
        if (h.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || h.body === void 0 || h.body.getReader === void 0)
          return h;
        const g = Lo[e], _ = h.body.getReader(), x = h.headers.get("Content-Length") || h.headers.get("X-File-Size"), M = x ? parseInt(x) : 0, T = M !== 0;
        let R = 0;
        const b = new ReadableStream({
          start(E) {
            L();
            function L() {
              _.read().then(({ done: C, value: U }) => {
                if (C)
                  E.close();
                else {
                  R += U.byteLength;
                  const Y = new ProgressEvent("progress", { lengthComputable: T, loaded: R, total: M });
                  for (let B = 0, H = g.length; B < H; B++) {
                    const k = g[B];
                    k.onProgress && k.onProgress(Y);
                  }
                  E.enqueue(U), L();
                }
              });
            }
          }
        });
        return new Response(b);
      } else
        throw new dF(`fetch for "${h.url}" responded with ${h.status}: ${h.statusText}`, h);
    }).then((h) => {
      switch (p) {
        case "arraybuffer":
          return h.arrayBuffer();
        case "blob":
          return h.blob();
        case "document":
          return h.text().then((g) => new DOMParser().parseFromString(g, f));
        case "json":
          return h.json();
        default:
          if (f === void 0)
            return h.text();
          {
            const _ = /charset="?([^;"\s]*)"?/i.exec(f), x = _ && _[1] ? _[1].toLowerCase() : void 0, M = new TextDecoder(x);
            return h.arrayBuffer().then((T) => M.decode(T));
          }
      }
    }).then((h) => {
      Uo.add(e, h);
      const g = Lo[e];
      delete Lo[e];
      for (let _ = 0, x = g.length; _ < x; _++) {
        const M = g[_];
        M.onLoad && M.onLoad(h);
      }
    }).catch((h) => {
      const g = Lo[e];
      if (g === void 0)
        throw this.manager.itemError(e), h;
      delete Lo[e];
      for (let _ = 0, x = g.length; _ < x; _++) {
        const M = g[_];
        M.onError && M.onError(h);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  setResponseType(e) {
    return this.responseType = e, this;
  }
  setMimeType(e) {
    return this.mimeType = e, this;
  }
}
class hF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new zo(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (p) {
        r ? r(p) : console.error(p), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = [];
    for (let n = 0; n < e.length; n++) {
      const r = Pp.parse(e[n]);
      t.push(r);
    }
    return t;
  }
}
class pF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = [], f = new Yg(), p = new zo(this.manager);
    p.setPath(this.path), p.setResponseType("arraybuffer"), p.setRequestHeader(this.requestHeader), p.setWithCredentials(o.withCredentials);
    let h = 0;
    function g(_) {
      p.load(e[_], function(x) {
        const M = o.parse(x, !0);
        c[_] = {
          width: M.width,
          height: M.height,
          format: M.format,
          mipmaps: M.mipmaps
        }, h += 1, h === 6 && (M.mipmapCount === 1 && (f.minFilter = Ei), f.image = c, f.format = M.format, f.needsUpdate = !0, t && t(f));
      }, n, r);
    }
    if (Array.isArray(e))
      for (let _ = 0, x = e.length; _ < x; ++_)
        g(_);
    else
      p.load(e, function(_) {
        const x = o.parse(_, !0);
        if (x.isCubemap) {
          const M = x.mipmaps.length / x.mipmapCount;
          for (let T = 0; T < M; T++) {
            c[T] = { mipmaps: [] };
            for (let R = 0; R < x.mipmapCount; R++)
              c[T].mipmaps.push(x.mipmaps[T * x.mipmapCount + R]), c[T].format = x.format, c[T].width = x.width, c[T].height = x.height;
          }
          f.image = c;
        } else
          f.image.width = x.width, f.image.height = x.height, f.mipmaps = x.mipmaps;
        x.mipmapCount === 1 && (f.minFilter = Ei), f.format = x.format, f.needsUpdate = !0, t && t(f);
      }, n, r);
    return f;
  }
}
class Dp extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, c = Uo.get(e);
    if (c !== void 0)
      return o.manager.itemStart(e), setTimeout(function() {
        t && t(c), o.manager.itemEnd(e);
      }, 0), c;
    const f = Tp("img");
    function p() {
      g(), Uo.add(e, this), t && t(this), o.manager.itemEnd(e);
    }
    function h(_) {
      g(), r && r(_), o.manager.itemError(e), o.manager.itemEnd(e);
    }
    function g() {
      f.removeEventListener("load", p, !1), f.removeEventListener("error", h, !1);
    }
    return f.addEventListener("load", p, !1), f.addEventListener("error", h, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (f.crossOrigin = this.crossOrigin), o.manager.itemStart(e), f.src = e, f;
  }
}
class mF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = new Op();
    o.colorSpace = qa;
    const c = new Dp(this.manager);
    c.setCrossOrigin(this.crossOrigin), c.setPath(this.path);
    let f = 0;
    function p(h) {
      c.load(e[h], function(g) {
        o.images[h] = g, f++, f === 6 && (o.needsUpdate = !0, t && t(o));
      }, void 0, r);
    }
    for (let h = 0; h < e.length; ++h)
      p(h);
    return o;
  }
}
class vF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new Xl(), f = new zo(this.manager);
    return f.setResponseType("arraybuffer"), f.setRequestHeader(this.requestHeader), f.setPath(this.path), f.setWithCredentials(o.withCredentials), f.load(e, function(p) {
      let h;
      try {
        h = o.parse(p);
      } catch (g) {
        if (r !== void 0)
          r(g);
        else {
          console.error(g);
          return;
        }
      }
      h.image !== void 0 ? c.image = h.image : h.data !== void 0 && (c.image.width = h.width, c.image.height = h.height, c.image.data = h.data), c.wrapS = h.wrapS !== void 0 ? h.wrapS : Ya, c.wrapT = h.wrapT !== void 0 ? h.wrapT : Ya, c.magFilter = h.magFilter !== void 0 ? h.magFilter : Ei, c.minFilter = h.minFilter !== void 0 ? h.minFilter : Ei, c.anisotropy = h.anisotropy !== void 0 ? h.anisotropy : 1, h.colorSpace !== void 0 && (c.colorSpace = h.colorSpace), h.flipY !== void 0 && (c.flipY = h.flipY), h.format !== void 0 && (c.format = h.format), h.type !== void 0 && (c.type = h.type), h.mipmaps !== void 0 && (c.mipmaps = h.mipmaps, c.minFilter = Gs), h.mipmapCount === 1 && (c.minFilter = Ei), h.generateMipmaps !== void 0 && (c.generateMipmaps = h.generateMipmaps), c.needsUpdate = !0, t && t(c, h);
    }, n, r), c;
  }
}
class gF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = new ai(), c = new Dp(this.manager);
    return c.setCrossOrigin(this.crossOrigin), c.setPath(this.path), c.load(e, function(f) {
      o.image = f, o.needsUpdate = !0, t !== void 0 && t(o);
    }, n, r), o;
  }
}
class Ql extends xn {
  constructor(e, t = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new mt(e), this.intensity = t;
  }
  dispose() {
  }
  copy(e, t) {
    return super.copy(e, t), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.color = this.color.getHex(), t.object.intensity = this.intensity, this.groundColor !== void 0 && (t.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (t.object.distance = this.distance), this.angle !== void 0 && (t.object.angle = this.angle), this.decay !== void 0 && (t.object.decay = this.decay), this.penumbra !== void 0 && (t.object.penumbra = this.penumbra), this.shadow !== void 0 && (t.object.shadow = this.shadow.toJSON()), t;
  }
}
class tR extends Ql {
  constructor(e, t, n) {
    super(e, n), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(xn.DEFAULT_UP), this.updateMatrix(), this.groundColor = new mt(t);
  }
  copy(e, t) {
    return super.copy(e, t), this.groundColor.copy(e.groundColor), this;
  }
}
const ax = /* @__PURE__ */ new Ht(), ub = /* @__PURE__ */ new q(), cb = /* @__PURE__ */ new q();
class ZS {
  constructor(e) {
    this.camera = e, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new De(512, 512), this.map = null, this.mapPass = null, this.matrix = new Ht(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Fp(), this._frameExtents = new De(1, 1), this._viewportCount = 1, this._viewports = [
      new Pn(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(e) {
    const t = this.camera, n = this.matrix;
    ub.setFromMatrixPosition(e.matrixWorld), t.position.copy(ub), cb.setFromMatrixPosition(e.target.matrixWorld), t.lookAt(cb), t.updateMatrixWorld(), ax.multiplyMatrices(t.projectionMatrix, t.matrixWorldInverse), this._frustum.setFromProjectionMatrix(ax), n.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), n.multiply(ax);
  }
  getViewport(e) {
    return this._viewports[e];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  copy(e) {
    return this.camera = e.camera.clone(), this.bias = e.bias, this.radius = e.radius, this.mapSize.copy(e.mapSize), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const e = {};
    return this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class yF extends ZS {
  constructor() {
    super(new Vi(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1;
  }
  updateMatrices(e) {
    const t = this.camera, n = hd * 2 * e.angle * this.focus, r = this.mapSize.width / this.mapSize.height, o = e.distance || t.far;
    (n !== t.fov || r !== t.aspect || o !== t.far) && (t.fov = n, t.aspect = r, t.far = o, t.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class nR extends Ql {
  constructor(e, t, n = 0, r = Math.PI / 3, o = 0, c = 2) {
    super(e, t), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(xn.DEFAULT_UP), this.updateMatrix(), this.target = new xn(), this.distance = n, this.angle = r, this.penumbra = o, this.decay = c, this.map = null, this.shadow = new yF();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const fb = /* @__PURE__ */ new Ht(), ep = /* @__PURE__ */ new q(), sx = /* @__PURE__ */ new q();
class _F extends ZS {
  constructor() {
    super(new Vi(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new De(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Pn(2, 1, 1, 1),
      // negative X
      new Pn(0, 1, 1, 1),
      // positive Z
      new Pn(3, 1, 1, 1),
      // negative Z
      new Pn(1, 1, 1, 1),
      // positive Y
      new Pn(3, 0, 1, 1),
      // negative Y
      new Pn(1, 0, 1, 1)
    ], this._cubeDirections = [
      new q(1, 0, 0),
      new q(-1, 0, 0),
      new q(0, 0, 1),
      new q(0, 0, -1),
      new q(0, 1, 0),
      new q(0, -1, 0)
    ], this._cubeUps = [
      new q(0, 1, 0),
      new q(0, 1, 0),
      new q(0, 1, 0),
      new q(0, 1, 0),
      new q(0, 0, 1),
      new q(0, 0, -1)
    ];
  }
  updateMatrices(e, t = 0) {
    const n = this.camera, r = this.matrix, o = e.distance || n.far;
    o !== n.far && (n.far = o, n.updateProjectionMatrix()), ep.setFromMatrixPosition(e.matrixWorld), n.position.copy(ep), sx.copy(n.position), sx.add(this._cubeDirections[t]), n.up.copy(this._cubeUps[t]), n.lookAt(sx), n.updateMatrixWorld(), r.makeTranslation(-ep.x, -ep.y, -ep.z), fb.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(fb);
  }
}
class iR extends Ql {
  constructor(e, t, n = 0, r = 2) {
    super(e, t), this.isPointLight = !0, this.type = "PointLight", this.distance = n, this.decay = r, this.shadow = new _F();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, t) {
    return super.copy(e, t), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class xF extends ZS {
  constructor() {
    super(new zp(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class rR extends Ql {
  constructor(e, t) {
    super(e, t), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(xn.DEFAULT_UP), this.updateMatrix(), this.target = new xn(), this.shadow = new xF();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class aR extends Ql {
  constructor(e, t) {
    super(e, t), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class sR extends Ql {
  constructor(e, t, n = 10, r = 10) {
    super(e, t), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = n, this.height = r;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.width = this.width, t.object.height = this.height, t;
  }
}
class oR {
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new q());
  }
  set(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].copy(e[t]);
    return this;
  }
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(e, t) {
    const n = e.x, r = e.y, o = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.282095), t.addScaledVector(c[1], 0.488603 * r), t.addScaledVector(c[2], 0.488603 * o), t.addScaledVector(c[3], 0.488603 * n), t.addScaledVector(c[4], 1.092548 * (n * r)), t.addScaledVector(c[5], 1.092548 * (r * o)), t.addScaledVector(c[6], 0.315392 * (3 * o * o - 1)), t.addScaledVector(c[7], 1.092548 * (n * o)), t.addScaledVector(c[8], 0.546274 * (n * n - r * r)), t;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(e, t) {
    const n = e.x, r = e.y, o = e.z, c = this.coefficients;
    return t.copy(c[0]).multiplyScalar(0.886227), t.addScaledVector(c[1], 2 * 0.511664 * r), t.addScaledVector(c[2], 2 * 0.511664 * o), t.addScaledVector(c[3], 2 * 0.511664 * n), t.addScaledVector(c[4], 2 * 0.429043 * n * r), t.addScaledVector(c[5], 2 * 0.429043 * r * o), t.addScaledVector(c[6], 0.743125 * o * o - 0.247708), t.addScaledVector(c[7], 2 * 0.429043 * n * o), t.addScaledVector(c[8], 0.429043 * (n * n - r * r)), t;
  }
  add(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].add(e.coefficients[t]);
    return this;
  }
  addScaledSH(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].addScaledVector(e.coefficients[n], t);
    return this;
  }
  scale(e) {
    for (let t = 0; t < 9; t++)
      this.coefficients[t].multiplyScalar(e);
    return this;
  }
  lerp(e, t) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].lerp(e.coefficients[n], t);
    return this;
  }
  equals(e) {
    for (let t = 0; t < 9; t++)
      if (!this.coefficients[t].equals(e.coefficients[t]))
        return !1;
    return !0;
  }
  copy(e) {
    return this.set(e.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(e, t = 0) {
    const n = this.coefficients;
    for (let r = 0; r < 9; r++)
      n[r].fromArray(e, t + r * 3);
    return this;
  }
  toArray(e = [], t = 0) {
    const n = this.coefficients;
    for (let r = 0; r < 9; r++)
      n[r].toArray(e, t + r * 3);
    return e;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(e, t) {
    const n = e.x, r = e.y, o = e.z;
    t[0] = 0.282095, t[1] = 0.488603 * r, t[2] = 0.488603 * o, t[3] = 0.488603 * n, t[4] = 1.092548 * n * r, t[5] = 1.092548 * r * o, t[6] = 0.315392 * (3 * o * o - 1), t[7] = 1.092548 * n * o, t[8] = 0.546274 * (n * n - r * r);
  }
}
class lR extends Ql {
  constructor(e = new oR(), t = 1) {
    super(void 0, t), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.object.sh = this.sh.toArray(), t;
  }
}
class ly extends $r {
  constructor(e) {
    super(e), this.textures = {};
  }
  load(e, t, n, r) {
    const o = this, c = new zo(o.manager);
    c.setPath(o.path), c.setRequestHeader(o.requestHeader), c.setWithCredentials(o.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (p) {
        r ? r(p) : console.error(p), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = this.textures;
    function n(o) {
      return t[o] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", o), t[o];
    }
    const r = ly.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (r.uuid = e.uuid), e.name !== void 0 && (r.name = e.name), e.color !== void 0 && r.color !== void 0 && r.color.setHex(e.color), e.roughness !== void 0 && (r.roughness = e.roughness), e.metalness !== void 0 && (r.metalness = e.metalness), e.sheen !== void 0 && (r.sheen = e.sheen), e.sheenColor !== void 0 && (r.sheenColor = new mt().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (r.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && r.emissive !== void 0 && r.emissive.setHex(e.emissive), e.specular !== void 0 && r.specular !== void 0 && r.specular.setHex(e.specular), e.specularIntensity !== void 0 && (r.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && r.specularColor !== void 0 && r.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (r.shininess = e.shininess), e.clearcoat !== void 0 && (r.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (r.clearcoatRoughness = e.clearcoatRoughness), e.iridescence !== void 0 && (r.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (r.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (r.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (r.transmission = e.transmission), e.thickness !== void 0 && (r.thickness = e.thickness), e.attenuationDistance !== void 0 && (r.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && r.attenuationColor !== void 0 && r.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (r.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (r.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (r.fog = e.fog), e.flatShading !== void 0 && (r.flatShading = e.flatShading), e.blending !== void 0 && (r.blending = e.blending), e.combine !== void 0 && (r.combine = e.combine), e.side !== void 0 && (r.side = e.side), e.shadowSide !== void 0 && (r.shadowSide = e.shadowSide), e.opacity !== void 0 && (r.opacity = e.opacity), e.transparent !== void 0 && (r.transparent = e.transparent), e.alphaTest !== void 0 && (r.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (r.alphaHash = e.alphaHash), e.depthFunc !== void 0 && (r.depthFunc = e.depthFunc), e.depthTest !== void 0 && (r.depthTest = e.depthTest), e.depthWrite !== void 0 && (r.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (r.colorWrite = e.colorWrite), e.blendSrc !== void 0 && (r.blendSrc = e.blendSrc), e.blendDst !== void 0 && (r.blendDst = e.blendDst), e.blendEquation !== void 0 && (r.blendEquation = e.blendEquation), e.blendSrcAlpha !== void 0 && (r.blendSrcAlpha = e.blendSrcAlpha), e.blendDstAlpha !== void 0 && (r.blendDstAlpha = e.blendDstAlpha), e.blendEquationAlpha !== void 0 && (r.blendEquationAlpha = e.blendEquationAlpha), e.blendColor !== void 0 && r.blendColor !== void 0 && r.blendColor.setHex(e.blendColor), e.blendAlpha !== void 0 && (r.blendAlpha = e.blendAlpha), e.stencilWriteMask !== void 0 && (r.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (r.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (r.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (r.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (r.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (r.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (r.stencilZPass = e.stencilZPass), e.stencilWrite !== void 0 && (r.stencilWrite = e.stencilWrite), e.wireframe !== void 0 && (r.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (r.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (r.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (r.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (r.rotation = e.rotation), e.linewidth !== void 0 && (r.linewidth = e.linewidth), e.dashSize !== void 0 && (r.dashSize = e.dashSize), e.gapSize !== void 0 && (r.gapSize = e.gapSize), e.scale !== void 0 && (r.scale = e.scale), e.polygonOffset !== void 0 && (r.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (r.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (r.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (r.dithering = e.dithering), e.alphaToCoverage !== void 0 && (r.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (r.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (r.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (r.visible = e.visible), e.toneMapped !== void 0 && (r.toneMapped = e.toneMapped), e.userData !== void 0 && (r.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? r.vertexColors = e.vertexColors > 0 : r.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const o in e.uniforms) {
        const c = e.uniforms[o];
        switch (r.uniforms[o] = {}, c.type) {
          case "t":
            r.uniforms[o].value = n(c.value);
            break;
          case "c":
            r.uniforms[o].value = new mt().setHex(c.value);
            break;
          case "v2":
            r.uniforms[o].value = new De().fromArray(c.value);
            break;
          case "v3":
            r.uniforms[o].value = new q().fromArray(c.value);
            break;
          case "v4":
            r.uniforms[o].value = new Pn().fromArray(c.value);
            break;
          case "m3":
            r.uniforms[o].value = new Yt().fromArray(c.value);
            break;
          case "m4":
            r.uniforms[o].value = new Ht().fromArray(c.value);
            break;
          default:
            r.uniforms[o].value = c.value;
        }
      }
    if (e.defines !== void 0 && (r.defines = e.defines), e.vertexShader !== void 0 && (r.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (r.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (r.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const o in e.extensions)
        r.extensions[o] = e.extensions[o];
    if (e.lights !== void 0 && (r.lights = e.lights), e.clipping !== void 0 && (r.clipping = e.clipping), e.size !== void 0 && (r.size = e.size), e.sizeAttenuation !== void 0 && (r.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (r.map = n(e.map)), e.matcap !== void 0 && (r.matcap = n(e.matcap)), e.alphaMap !== void 0 && (r.alphaMap = n(e.alphaMap)), e.bumpMap !== void 0 && (r.bumpMap = n(e.bumpMap)), e.bumpScale !== void 0 && (r.bumpScale = e.bumpScale), e.normalMap !== void 0 && (r.normalMap = n(e.normalMap)), e.normalMapType !== void 0 && (r.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let o = e.normalScale;
      Array.isArray(o) === !1 && (o = [o, o]), r.normalScale = new De().fromArray(o);
    }
    return e.displacementMap !== void 0 && (r.displacementMap = n(e.displacementMap)), e.displacementScale !== void 0 && (r.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (r.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (r.roughnessMap = n(e.roughnessMap)), e.metalnessMap !== void 0 && (r.metalnessMap = n(e.metalnessMap)), e.emissiveMap !== void 0 && (r.emissiveMap = n(e.emissiveMap)), e.emissiveIntensity !== void 0 && (r.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (r.specularMap = n(e.specularMap)), e.specularIntensityMap !== void 0 && (r.specularIntensityMap = n(e.specularIntensityMap)), e.specularColorMap !== void 0 && (r.specularColorMap = n(e.specularColorMap)), e.envMap !== void 0 && (r.envMap = n(e.envMap)), e.envMapRotation !== void 0 && r.envMapRotation.fromArray(e.envMapRotation), e.envMapIntensity !== void 0 && (r.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (r.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (r.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (r.lightMap = n(e.lightMap)), e.lightMapIntensity !== void 0 && (r.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (r.aoMap = n(e.aoMap)), e.aoMapIntensity !== void 0 && (r.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (r.gradientMap = n(e.gradientMap)), e.clearcoatMap !== void 0 && (r.clearcoatMap = n(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (r.clearcoatRoughnessMap = n(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (r.clearcoatNormalMap = n(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (r.clearcoatNormalScale = new De().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (r.iridescenceMap = n(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (r.iridescenceThicknessMap = n(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (r.transmissionMap = n(e.transmissionMap)), e.thicknessMap !== void 0 && (r.thicknessMap = n(e.thicknessMap)), e.anisotropyMap !== void 0 && (r.anisotropyMap = n(e.anisotropyMap)), e.sheenColorMap !== void 0 && (r.sheenColorMap = n(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (r.sheenRoughnessMap = n(e.sheenRoughnessMap)), r;
  }
  setTextures(e) {
    return this.textures = e, this;
  }
  static createMaterialFromType(e) {
    const t = {
      ShadowMaterial: HA,
      SpriteMaterial: IS,
      RawShaderMaterial: VA,
      ShaderMaterial: gs,
      PointsMaterial: FS,
      MeshPhysicalMaterial: kA,
      MeshStandardMaterial: WS,
      MeshPhongMaterial: GA,
      MeshToonMaterial: WA,
      MeshNormalMaterial: XA,
      MeshLambertMaterial: qA,
      MeshDepthMaterial: NS,
      MeshDistanceMaterial: US,
      MeshBasicMaterial: Zl,
      MeshMatcapMaterial: YA,
      LineDashedMaterial: jA,
      LineBasicMaterial: Ur,
      Material: ir
    };
    return new t[e]();
  }
}
class sS {
  static decodeText(e) {
    if (typeof TextDecoder < "u")
      return new TextDecoder().decode(e);
    let t = "";
    for (let n = 0, r = e.length; n < r; n++)
      t += String.fromCharCode(e[n]);
    try {
      return decodeURIComponent(escape(t));
    } catch {
      return t;
    }
  }
  static extractUrlBase(e) {
    const t = e.lastIndexOf("/");
    return t === -1 ? "./" : e.slice(0, t + 1);
  }
  static resolveURL(e, t) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(t) && /^\//.test(e) && (t = t.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : t + e);
  }
}
class uR extends $t {
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class cR extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new zo(o.manager);
    c.setPath(o.path), c.setRequestHeader(o.requestHeader), c.setWithCredentials(o.withCredentials), c.load(e, function(f) {
      try {
        t(o.parse(JSON.parse(f)));
      } catch (p) {
        r ? r(p) : console.error(p), o.manager.itemError(e);
      }
    }, n, r);
  }
  parse(e) {
    const t = {}, n = {};
    function r(M, T) {
      if (t[T] !== void 0)
        return t[T];
      const b = M.interleavedBuffers[T], E = o(M, b.buffer), L = ad(b.type, E), C = new Xg(L, b.stride);
      return C.uuid = b.uuid, t[T] = C, C;
    }
    function o(M, T) {
      if (n[T] !== void 0)
        return n[T];
      const b = M.arrayBuffers[T], E = new Uint32Array(b).buffer;
      return n[T] = E, E;
    }
    const c = e.isInstancedBufferGeometry ? new uR() : new $t(), f = e.data.index;
    if (f !== void 0) {
      const M = ad(f.type, f.array);
      c.setIndex(new Dn(M, 1));
    }
    const p = e.data.attributes;
    for (const M in p) {
      const T = p[M];
      let R;
      if (T.isInterleavedBufferAttribute) {
        const b = r(e.data, T.data);
        R = new pc(b, T.itemSize, T.offset, T.normalized);
      } else {
        const b = ad(T.type, T.array), E = T.isInstancedBufferAttribute ? md : Dn;
        R = new E(b, T.itemSize, T.normalized);
      }
      T.name !== void 0 && (R.name = T.name), T.usage !== void 0 && R.setUsage(T.usage), c.setAttribute(M, R);
    }
    const h = e.data.morphAttributes;
    if (h)
      for (const M in h) {
        const T = h[M], R = [];
        for (let b = 0, E = T.length; b < E; b++) {
          const L = T[b];
          let C;
          if (L.isInterleavedBufferAttribute) {
            const U = r(e.data, L.data);
            C = new pc(U, L.itemSize, L.offset, L.normalized);
          } else {
            const U = ad(L.type, L.array);
            C = new Dn(U, L.itemSize, L.normalized);
          }
          L.name !== void 0 && (C.name = L.name), R.push(C);
        }
        c.morphAttributes[M] = R;
      }
    e.data.morphTargetsRelative && (c.morphTargetsRelative = !0);
    const _ = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (_ !== void 0)
      for (let M = 0, T = _.length; M !== T; ++M) {
        const R = _[M];
        c.addGroup(R.start, R.count, R.materialIndex);
      }
    const x = e.data.boundingSphere;
    if (x !== void 0) {
      const M = new q();
      x.center !== void 0 && M.fromArray(x.center), c.boundingSphere = new yr(M, x.radius);
    }
    return e.name && (c.name = e.name), e.userData && (c.userData = e.userData), c;
  }
}
class SF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = this.path === "" ? sS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || c;
    const f = new zo(this.manager);
    f.setPath(this.path), f.setRequestHeader(this.requestHeader), f.setWithCredentials(this.withCredentials), f.load(e, function(p) {
      let h = null;
      try {
        h = JSON.parse(p);
      } catch (_) {
        r !== void 0 && r(_), console.error("THREE:ObjectLoader: Can't parse " + e + ".", _.message);
        return;
      }
      const g = h.metadata;
      if (g === void 0 || g.type === void 0 || g.type.toLowerCase() === "geometry") {
        r !== void 0 && r(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      o.parse(h, t);
    }, n, r);
  }
  async loadAsync(e, t) {
    const n = this, r = this.path === "" ? sS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || r;
    const o = new zo(this.manager);
    o.setPath(this.path), o.setRequestHeader(this.requestHeader), o.setWithCredentials(this.withCredentials);
    const c = await o.loadAsync(e, t), f = JSON.parse(c), p = f.metadata;
    if (p === void 0 || p.type === void 0 || p.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await n.parseAsync(f);
  }
  parse(e, t) {
    const n = this.parseAnimations(e.animations), r = this.parseShapes(e.shapes), o = this.parseGeometries(e.geometries, r), c = this.parseImages(e.images, function() {
      t !== void 0 && t(h);
    }), f = this.parseTextures(e.textures, c), p = this.parseMaterials(e.materials, f), h = this.parseObject(e.object, o, p, f, n), g = this.parseSkeletons(e.skeletons, h);
    if (this.bindSkeletons(h, g), t !== void 0) {
      let _ = !1;
      for (const x in c)
        if (c[x].data instanceof HTMLImageElement) {
          _ = !0;
          break;
        }
      _ === !1 && t(h);
    }
    return h;
  }
  async parseAsync(e) {
    const t = this.parseAnimations(e.animations), n = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, n), o = await this.parseImagesAsync(e.images), c = this.parseTextures(e.textures, o), f = this.parseMaterials(e.materials, c), p = this.parseObject(e.object, r, f, c, t), h = this.parseSkeletons(e.skeletons, p);
    return this.bindSkeletons(p, h), p;
  }
  parseShapes(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0, r = e.length; n < r; n++) {
        const o = new dc().fromJSON(e[n]);
        t[o.uuid] = o;
      }
    return t;
  }
  parseSkeletons(e, t) {
    const n = {}, r = {};
    if (t.traverse(function(o) {
      o.isBone && (r[o.uuid] = o);
    }), e !== void 0)
      for (let o = 0, c = e.length; o < c; o++) {
        const f = new qg().fromJSON(e[o], r);
        n[f.uuid] = f;
      }
    return n;
  }
  parseGeometries(e, t) {
    const n = {};
    if (e !== void 0) {
      const r = new cR();
      for (let o = 0, c = e.length; o < c; o++) {
        let f;
        const p = e[o];
        switch (p.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            f = r.parse(p);
            break;
          default:
            p.type in lb ? f = lb[p.type].fromJSON(p, t) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${p.type}"`);
        }
        f.uuid = p.uuid, p.name !== void 0 && (f.name = p.name), p.userData !== void 0 && (f.userData = p.userData), n[p.uuid] = f;
      }
    }
    return n;
  }
  parseMaterials(e, t) {
    const n = {}, r = {};
    if (e !== void 0) {
      const o = new ly();
      o.setTextures(t);
      for (let c = 0, f = e.length; c < f; c++) {
        const p = e[c];
        n[p.uuid] === void 0 && (n[p.uuid] = o.parse(p)), r[p.uuid] = n[p.uuid];
      }
    }
    return r;
  }
  parseAnimations(e) {
    const t = {};
    if (e !== void 0)
      for (let n = 0; n < e.length; n++) {
        const r = e[n], o = Pp.parse(r);
        t[o.uuid] = o;
      }
    return t;
  }
  parseImages(e, t) {
    const n = this, r = {};
    let o;
    function c(p) {
      return n.manager.itemStart(p), o.load(p, function() {
        n.manager.itemEnd(p);
      }, void 0, function() {
        n.manager.itemError(p), n.manager.itemEnd(p);
      });
    }
    function f(p) {
      if (typeof p == "string") {
        const h = p, g = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(h) ? h : n.resourcePath + h;
        return c(g);
      } else
        return p.data ? {
          data: ad(p.type, p.data),
          width: p.width,
          height: p.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const p = new jS(t);
      o = new Dp(p), o.setCrossOrigin(this.crossOrigin);
      for (let h = 0, g = e.length; h < g; h++) {
        const _ = e[h], x = _.url;
        if (Array.isArray(x)) {
          const M = [];
          for (let T = 0, R = x.length; T < R; T++) {
            const b = x[T], E = f(b);
            E !== null && (E instanceof HTMLImageElement ? M.push(E) : M.push(new Xl(E.data, E.width, E.height)));
          }
          r[_.uuid] = new sc(M);
        } else {
          const M = f(_.url);
          r[_.uuid] = new sc(M);
        }
      }
    }
    return r;
  }
  async parseImagesAsync(e) {
    const t = this, n = {};
    let r;
    async function o(c) {
      if (typeof c == "string") {
        const f = c, p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(f) ? f : t.resourcePath + f;
        return await r.loadAsync(p);
      } else
        return c.data ? {
          data: ad(c.type, c.data),
          width: c.width,
          height: c.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      r = new Dp(this.manager), r.setCrossOrigin(this.crossOrigin);
      for (let c = 0, f = e.length; c < f; c++) {
        const p = e[c], h = p.url;
        if (Array.isArray(h)) {
          const g = [];
          for (let _ = 0, x = h.length; _ < x; _++) {
            const M = h[_], T = await o(M);
            T !== null && (T instanceof HTMLImageElement ? g.push(T) : g.push(new Xl(T.data, T.width, T.height)));
          }
          n[p.uuid] = new sc(g);
        } else {
          const g = await o(p.url);
          n[p.uuid] = new sc(g);
        }
      }
    }
    return n;
  }
  parseTextures(e, t) {
    function n(o, c) {
      return typeof o == "number" ? o : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", o), c[o]);
    }
    const r = {};
    if (e !== void 0)
      for (let o = 0, c = e.length; o < c; o++) {
        const f = e[o];
        f.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', f.uuid), t[f.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", f.image);
        const p = t[f.image], h = p.data;
        let g;
        Array.isArray(h) ? (g = new Op(), h.length === 6 && (g.needsUpdate = !0)) : (h && h.data ? g = new Xl() : g = new ai(), h && (g.needsUpdate = !0)), g.source = p, g.uuid = f.uuid, f.name !== void 0 && (g.name = f.name), f.mapping !== void 0 && (g.mapping = n(f.mapping, MF)), f.channel !== void 0 && (g.channel = f.channel), f.offset !== void 0 && g.offset.fromArray(f.offset), f.repeat !== void 0 && g.repeat.fromArray(f.repeat), f.center !== void 0 && g.center.fromArray(f.center), f.rotation !== void 0 && (g.rotation = f.rotation), f.wrap !== void 0 && (g.wrapS = n(f.wrap[0], db), g.wrapT = n(f.wrap[1], db)), f.format !== void 0 && (g.format = f.format), f.internalFormat !== void 0 && (g.internalFormat = f.internalFormat), f.type !== void 0 && (g.type = f.type), f.colorSpace !== void 0 && (g.colorSpace = f.colorSpace), f.minFilter !== void 0 && (g.minFilter = n(f.minFilter, hb)), f.magFilter !== void 0 && (g.magFilter = n(f.magFilter, hb)), f.anisotropy !== void 0 && (g.anisotropy = f.anisotropy), f.flipY !== void 0 && (g.flipY = f.flipY), f.generateMipmaps !== void 0 && (g.generateMipmaps = f.generateMipmaps), f.premultiplyAlpha !== void 0 && (g.premultiplyAlpha = f.premultiplyAlpha), f.unpackAlignment !== void 0 && (g.unpackAlignment = f.unpackAlignment), f.compareFunction !== void 0 && (g.compareFunction = f.compareFunction), f.userData !== void 0 && (g.userData = f.userData), r[f.uuid] = g;
      }
    return r;
  }
  parseObject(e, t, n, r, o) {
    let c;
    function f(x) {
      return t[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", x), t[x];
    }
    function p(x) {
      if (x !== void 0) {
        if (Array.isArray(x)) {
          const M = [];
          for (let T = 0, R = x.length; T < R; T++) {
            const b = x[T];
            n[b] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", b), M.push(n[b]);
          }
          return M;
        }
        return n[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", x), n[x];
      }
    }
    function h(x) {
      return r[x] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", x), r[x];
    }
    let g, _;
    switch (e.type) {
      case "Scene":
        c = new Pg(), e.background !== void 0 && (Number.isInteger(e.background) ? c.background = new mt(e.background) : c.background = h(e.background)), e.environment !== void 0 && (c.environment = h(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? c.fog = new Wg(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (c.fog = new Gg(e.fog.color, e.fog.density)), e.fog.name !== "" && (c.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (c.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (c.backgroundIntensity = e.backgroundIntensity), e.backgroundRotation !== void 0 && c.backgroundRotation.fromArray(e.backgroundRotation), e.environmentIntensity !== void 0 && (c.environmentIntensity = e.environmentIntensity), e.environmentRotation !== void 0 && c.environmentRotation.fromArray(e.environmentRotation);
        break;
      case "PerspectiveCamera":
        c = new Vi(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (c.focus = e.focus), e.zoom !== void 0 && (c.zoom = e.zoom), e.filmGauge !== void 0 && (c.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (c.filmOffset = e.filmOffset), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        c = new zp(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (c.zoom = e.zoom), e.view !== void 0 && (c.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        c = new aR(e.color, e.intensity);
        break;
      case "DirectionalLight":
        c = new rR(e.color, e.intensity);
        break;
      case "PointLight":
        c = new iR(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        c = new sR(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        c = new nR(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay);
        break;
      case "HemisphereLight":
        c = new tR(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        c = new lR().fromJSON(e);
        break;
      case "SkinnedMesh":
        g = f(e.geometry), _ = p(e.material), c = new bA(g, _), e.bindMode !== void 0 && (c.bindMode = e.bindMode), e.bindMatrix !== void 0 && c.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (c.skeleton = e.skeleton);
        break;
      case "Mesh":
        g = f(e.geometry), _ = p(e.material), c = new Ti(g, _);
        break;
      case "InstancedMesh":
        g = f(e.geometry), _ = p(e.material);
        const x = e.count, M = e.instanceMatrix, T = e.instanceColor;
        c = new wA(g, _, x), c.instanceMatrix = new md(new Float32Array(M.array), 16), T !== void 0 && (c.instanceColor = new md(new Float32Array(T.array), T.itemSize));
        break;
      case "BatchedMesh":
        g = f(e.geometry), _ = p(e.material), c = new AA(e.maxGeometryCount, e.maxVertexCount, e.maxIndexCount, _), c.geometry = g, c.perObjectFrustumCulled = e.perObjectFrustumCulled, c.sortObjects = e.sortObjects, c._drawRanges = e.drawRanges, c._reservedRanges = e.reservedRanges, c._visibility = e.visibility, c._active = e.active, c._bounds = e.bounds.map((R) => {
          const b = new Nr();
          b.min.fromArray(R.boxMin), b.max.fromArray(R.boxMax);
          const E = new yr();
          return E.radius = R.sphereRadius, E.center.fromArray(R.sphereCenter), {
            boxInitialized: R.boxInitialized,
            box: b,
            sphereInitialized: R.sphereInitialized,
            sphere: E
          };
        }), c._maxGeometryCount = e.maxGeometryCount, c._maxVertexCount = e.maxVertexCount, c._maxIndexCount = e.maxIndexCount, c._geometryInitialized = e.geometryInitialized, c._geometryCount = e.geometryCount, c._matricesTexture = h(e.matricesTexture.uuid);
        break;
      case "LOD":
        c = new TA();
        break;
      case "Line":
        c = new Yl(f(e.geometry), p(e.material));
        break;
      case "LineLoop":
        c = new RA(f(e.geometry), p(e.material));
        break;
      case "LineSegments":
        c = new js(f(e.geometry), p(e.material));
        break;
      case "PointCloud":
      case "Points":
        c = new CA(f(e.geometry), p(e.material));
        break;
      case "Sprite":
        c = new EA(p(e.material));
        break;
      case "Group":
        c = new od();
        break;
      case "Bone":
        c = new OS();
        break;
      default:
        c = new xn();
    }
    if (c.uuid = e.uuid, e.name !== void 0 && (c.name = e.name), e.matrix !== void 0 ? (c.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (c.matrixAutoUpdate = e.matrixAutoUpdate), c.matrixAutoUpdate && c.matrix.decompose(c.position, c.quaternion, c.scale)) : (e.position !== void 0 && c.position.fromArray(e.position), e.rotation !== void 0 && c.rotation.fromArray(e.rotation), e.quaternion !== void 0 && c.quaternion.fromArray(e.quaternion), e.scale !== void 0 && c.scale.fromArray(e.scale)), e.up !== void 0 && c.up.fromArray(e.up), e.castShadow !== void 0 && (c.castShadow = e.castShadow), e.receiveShadow !== void 0 && (c.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.bias !== void 0 && (c.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (c.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (c.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && c.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (c.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (c.visible = e.visible), e.frustumCulled !== void 0 && (c.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (c.renderOrder = e.renderOrder), e.userData !== void 0 && (c.userData = e.userData), e.layers !== void 0 && (c.layers.mask = e.layers), e.children !== void 0) {
      const x = e.children;
      for (let M = 0; M < x.length; M++)
        c.add(this.parseObject(x[M], t, n, r, o));
    }
    if (e.animations !== void 0) {
      const x = e.animations;
      for (let M = 0; M < x.length; M++) {
        const T = x[M];
        c.animations.push(o[T]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (c.autoUpdate = e.autoUpdate);
      const x = e.levels;
      for (let M = 0; M < x.length; M++) {
        const T = x[M], R = c.getObjectByProperty("uuid", T.object);
        R !== void 0 && c.addLevel(R, T.distance, T.hysteresis);
      }
    }
    return c;
  }
  bindSkeletons(e, t) {
    Object.keys(t).length !== 0 && e.traverse(function(n) {
      if (n.isSkinnedMesh === !0 && n.skeleton !== void 0) {
        const r = t[n.skeleton];
        r === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", n.skeleton) : n.bind(r, n.bindMatrix);
      }
    });
  }
}
const MF = {
  UVMapping: zg,
  CubeReflectionMapping: Fo,
  CubeRefractionMapping: ql,
  EquirectangularReflectionMapping: fp,
  EquirectangularRefractionMapping: dp,
  CubeUVReflectionMapping: gd
}, db = {
  RepeatWrapping: hp,
  ClampToEdgeWrapping: Ya,
  MirroredRepeatWrapping: pp
}, hb = {
  NearestFilter: ki,
  NearestMipmapNearestFilter: mS,
  NearestMipmapLinearFilter: rd,
  LinearFilter: Ei,
  LinearMipmapNearestFilter: sp,
  LinearMipmapLinearFilter: Gs
};
class EF extends $r {
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" };
  }
  setOptions(e) {
    return this.options = e, this;
  }
  load(e, t, n, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const o = this, c = Uo.get(e);
    if (c !== void 0) {
      if (o.manager.itemStart(e), c.then) {
        c.then((h) => {
          t && t(h), o.manager.itemEnd(e);
        }).catch((h) => {
          r && r(h);
        });
        return;
      }
      return setTimeout(function() {
        t && t(c), o.manager.itemEnd(e);
      }, 0), c;
    }
    const f = {};
    f.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", f.headers = this.requestHeader;
    const p = fetch(e, f).then(function(h) {
      return h.blob();
    }).then(function(h) {
      return createImageBitmap(h, Object.assign(o.options, { colorSpaceConversion: "none" }));
    }).then(function(h) {
      return Uo.add(e, h), t && t(h), o.manager.itemEnd(e), h;
    }).catch(function(h) {
      r && r(h), Uo.remove(e), o.manager.itemError(e), o.manager.itemEnd(e);
    });
    Uo.add(e, p), o.manager.itemStart(e);
  }
}
let dg;
class JS {
  static getContext() {
    return dg === void 0 && (dg = new (window.AudioContext || window.webkitAudioContext)()), dg;
  }
  static setContext(e) {
    dg = e;
  }
}
class TF extends $r {
  constructor(e) {
    super(e);
  }
  load(e, t, n, r) {
    const o = this, c = new zo(this.manager);
    c.setResponseType("arraybuffer"), c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials), c.load(e, function(p) {
      try {
        const h = p.slice(0);
        JS.getContext().decodeAudioData(h, function(_) {
          t(_);
        }).catch(f);
      } catch (h) {
        f(h);
      }
    }, n, r);
    function f(p) {
      r ? r(p) : console.error(p), o.manager.itemError(e);
    }
  }
}
const pb = /* @__PURE__ */ new Ht(), mb = /* @__PURE__ */ new Ht(), Zu = /* @__PURE__ */ new Ht();
class bF {
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Vi(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Vi(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(e) {
    const t = this._cache;
    if (t.focus !== e.focus || t.fov !== e.fov || t.aspect !== e.aspect * this.aspect || t.near !== e.near || t.far !== e.far || t.zoom !== e.zoom || t.eyeSep !== this.eyeSep) {
      t.focus = e.focus, t.fov = e.fov, t.aspect = e.aspect * this.aspect, t.near = e.near, t.far = e.far, t.zoom = e.zoom, t.eyeSep = this.eyeSep, Zu.copy(e.projectionMatrix);
      const r = t.eyeSep / 2, o = r * t.near / t.focus, c = t.near * Math.tan(cc * t.fov * 0.5) / t.zoom;
      let f, p;
      mb.elements[12] = -r, pb.elements[12] = r, f = -c * t.aspect + o, p = c * t.aspect + o, Zu.elements[0] = 2 * t.near / (p - f), Zu.elements[8] = (p + f) / (p - f), this.cameraL.projectionMatrix.copy(Zu), f = -c * t.aspect - o, p = c * t.aspect - o, Zu.elements[0] = 2 * t.near / (p - f), Zu.elements[8] = (p + f) / (p - f), this.cameraR.projectionMatrix.copy(Zu);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(mb), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(pb);
  }
}
class QS {
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  start() {
    this.startTime = vb(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const t = vb();
      e = (t - this.oldTime) / 1e3, this.oldTime = t, this.elapsedTime += e;
    }
    return e;
  }
}
function vb() {
  return (typeof performance > "u" ? Date : performance).now();
}
const Ju = /* @__PURE__ */ new q(), gb = /* @__PURE__ */ new Kr(), wF = /* @__PURE__ */ new q(), Qu = /* @__PURE__ */ new q();
class AF extends xn {
  constructor() {
    super(), this.type = "AudioListener", this.context = JS.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new QS();
  }
  getInput() {
    return this.gain;
  }
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  getFilter() {
    return this.filter;
  }
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  getMasterVolume() {
    return this.gain.gain.value;
  }
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const t = this.context.listener, n = this.up;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Ju, gb, wF), Qu.set(0, 0, -1).applyQuaternion(gb), t.positionX) {
      const r = this.context.currentTime + this.timeDelta;
      t.positionX.linearRampToValueAtTime(Ju.x, r), t.positionY.linearRampToValueAtTime(Ju.y, r), t.positionZ.linearRampToValueAtTime(Ju.z, r), t.forwardX.linearRampToValueAtTime(Qu.x, r), t.forwardY.linearRampToValueAtTime(Qu.y, r), t.forwardZ.linearRampToValueAtTime(Qu.z, r), t.upX.linearRampToValueAtTime(n.x, r), t.upY.linearRampToValueAtTime(n.y, r), t.upZ.linearRampToValueAtTime(n.z, r);
    } else
      t.setPosition(Ju.x, Ju.y, Ju.z), t.setOrientation(Qu.x, Qu.y, Qu.z, n.x, n.y, n.z);
  }
}
class fR extends xn {
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  getOutput() {
    return this.gain;
  }
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const t = this.context.createBufferSource();
    return t.buffer = this.buffer, t.loop = this.loop, t.loopStart = this.loopStart, t.loopEnd = this.loopEnd, t.onended = this.onEnded.bind(this), t.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = t, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  stop() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(), this.source.onended = null), this.isPlaying = !1, this;
  }
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, t = this.filters.length; e < t; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, t = this.filters.length; e < t; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  getFilters() {
    return this.filters;
  }
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  setDetune(e) {
    return this.detune = e, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  getDetune() {
    return this.detune;
  }
  getFilter() {
    return this.getFilters()[0];
  }
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  getPlaybackRate() {
    return this.playbackRate;
  }
  onEnded() {
    this.isPlaying = !1;
  }
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  getVolume() {
    return this.gain.gain.value;
  }
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
}
const Ku = /* @__PURE__ */ new q(), yb = /* @__PURE__ */ new Kr(), RF = /* @__PURE__ */ new q(), $u = /* @__PURE__ */ new q();
class CF extends fR {
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    super.connect(), this.panner.connect(this.gain);
  }
  disconnect() {
    super.disconnect(), this.panner.disconnect(this.gain);
  }
  getOutput() {
    return this.panner;
  }
  getRefDistance() {
    return this.panner.refDistance;
  }
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  setDirectionalCone(e, t, n) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = t, this.panner.coneOuterGain = n, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1)
      return;
    this.matrixWorld.decompose(Ku, yb, RF), $u.set(0, 0, 1).applyQuaternion(yb);
    const t = this.panner;
    if (t.positionX) {
      const n = this.context.currentTime + this.listener.timeDelta;
      t.positionX.linearRampToValueAtTime(Ku.x, n), t.positionY.linearRampToValueAtTime(Ku.y, n), t.positionZ.linearRampToValueAtTime(Ku.z, n), t.orientationX.linearRampToValueAtTime($u.x, n), t.orientationY.linearRampToValueAtTime($u.y, n), t.orientationZ.linearRampToValueAtTime($u.z, n);
    } else
      t.setPosition(Ku.x, Ku.y, Ku.z), t.setOrientation($u.x, $u.y, $u.z);
  }
}
class LF {
  constructor(e, t = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = t, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  getAverageFrequency() {
    let e = 0;
    const t = this.getFrequencyData();
    for (let n = 0; n < t.length; n++)
      e += t[n];
    return e / t.length;
  }
}
class dR {
  constructor(e, t, n) {
    this.binding = e, this.valueSize = n;
    let r, o, c;
    switch (t) {
      case "quaternion":
        r = this._slerp, o = this._slerpAdditive, c = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(n * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        r = this._select, o = this._select, c = this._setAdditiveIdentityOther, this.buffer = new Array(n * 5);
        break;
      default:
        r = this._lerp, o = this._lerpAdditive, c = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(n * 5);
    }
    this._mixBufferRegion = r, this._mixBufferRegionAdditive = o, this._setIdentity = c, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  // accumulate data in the 'incoming' region into 'accu<i>'
  accumulate(e, t) {
    const n = this.buffer, r = this.valueSize, o = e * r + r;
    let c = this.cumulativeWeight;
    if (c === 0) {
      for (let f = 0; f !== r; ++f)
        n[o + f] = n[f];
      c = t;
    } else {
      c += t;
      const f = t / c;
      this._mixBufferRegion(n, o, 0, f, r);
    }
    this.cumulativeWeight = c;
  }
  // accumulate data in the 'incoming' region into 'add'
  accumulateAdditive(e) {
    const t = this.buffer, n = this.valueSize, r = n * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(t, r, 0, e, n), this.cumulativeWeightAdditive += e;
  }
  // apply the state of 'accu<i>' to the binding when accus differ
  apply(e) {
    const t = this.valueSize, n = this.buffer, r = e * t + t, o = this.cumulativeWeight, c = this.cumulativeWeightAdditive, f = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, o < 1) {
      const p = t * this._origIndex;
      this._mixBufferRegion(
        n,
        r,
        p,
        1 - o,
        t
      );
    }
    c > 0 && this._mixBufferRegionAdditive(n, r, this._addIndex * t, 1, t);
    for (let p = t, h = t + t; p !== h; ++p)
      if (n[p] !== n[p + t]) {
        f.setValue(n, r);
        break;
      }
  }
  // remember the state of the bound property and copy it to both accus
  saveOriginalState() {
    const e = this.binding, t = this.buffer, n = this.valueSize, r = n * this._origIndex;
    e.getValue(t, r);
    for (let o = n, c = r; o !== c; ++o)
      t[o] = t[r + o % n];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  // apply the state previously taken via 'saveOriginalState' to the binding
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, t = e + this.valueSize;
    for (let n = e; n < t; n++)
      this.buffer[n] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, t = this._addIndex * this.valueSize;
    for (let n = 0; n < this.valueSize; n++)
      this.buffer[t + n] = this.buffer[e + n];
  }
  // mix functions
  _select(e, t, n, r, o) {
    if (r >= 0.5)
      for (let c = 0; c !== o; ++c)
        e[t + c] = e[n + c];
  }
  _slerp(e, t, n, r) {
    Kr.slerpFlat(e, t, e, t, e, n, r);
  }
  _slerpAdditive(e, t, n, r, o) {
    const c = this._workIndex * o;
    Kr.multiplyQuaternionsFlat(e, c, e, t, e, n), Kr.slerpFlat(e, t, e, t, e, c, r);
  }
  _lerp(e, t, n, r, o) {
    const c = 1 - r;
    for (let f = 0; f !== o; ++f) {
      const p = t + f;
      e[p] = e[p] * c + e[n + f] * r;
    }
  }
  _lerpAdditive(e, t, n, r, o) {
    for (let c = 0; c !== o; ++c) {
      const f = t + c;
      e[f] = e[f] + e[n + c] * r;
    }
  }
}
const KS = "\\[\\]\\.:\\/", PF = new RegExp("[" + KS + "]", "g"), $S = "[^" + KS + "]", DF = "[^" + KS.replace("\\.", "") + "]", NF = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", $S), UF = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", DF), IF = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", $S), OF = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", $S), FF = new RegExp(
  "^" + NF + UF + IF + OF + "$"
), zF = ["material", "materials", "bones", "map"];
class BF {
  constructor(e, t, n) {
    const r = n || vn.parseTrackName(t);
    this._targetGroup = e, this._bindings = e.subscribe_(t, r);
  }
  getValue(e, t) {
    this.bind();
    const n = this._targetGroup.nCachedObjects_, r = this._bindings[n];
    r !== void 0 && r.getValue(e, t);
  }
  setValue(e, t) {
    const n = this._bindings;
    for (let r = this._targetGroup.nCachedObjects_, o = n.length; r !== o; ++r)
      n[r].setValue(e, t);
  }
  bind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let t = this._targetGroup.nCachedObjects_, n = e.length; t !== n; ++t)
      e[t].unbind();
  }
}
class vn {
  constructor(e, t, n) {
    this.path = t, this.parsedPath = n || vn.parseTrackName(t), this.node = vn.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  static create(e, t, n) {
    return e && e.isAnimationObjectGroup ? new vn.Composite(e, t, n) : new vn(e, t, n);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(PF, "");
  }
  static parseTrackName(e) {
    const t = FF.exec(e);
    if (t === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const n = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: t[2],
      objectName: t[3],
      objectIndex: t[4],
      propertyName: t[5],
      // required
      propertyIndex: t[6]
    }, r = n.nodeName && n.nodeName.lastIndexOf(".");
    if (r !== void 0 && r !== -1) {
      const o = n.nodeName.substring(r + 1);
      zF.indexOf(o) !== -1 && (n.nodeName = n.nodeName.substring(0, r), n.objectName = o);
    }
    if (n.propertyName === null || n.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return n;
  }
  static findNode(e, t) {
    if (t === void 0 || t === "" || t === "." || t === -1 || t === e.name || t === e.uuid)
      return e;
    if (e.skeleton) {
      const n = e.skeleton.getBoneByName(t);
      if (n !== void 0)
        return n;
    }
    if (e.children) {
      const n = function(o) {
        for (let c = 0; c < o.length; c++) {
          const f = o[c];
          if (f.name === t || f.uuid === t)
            return f;
          const p = n(f.children);
          if (p)
            return p;
        }
        return null;
      }, r = n(e.children);
      if (r)
        return r;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, t) {
    e[t] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      e[t++] = n[r];
  }
  _getValue_arrayElement(e, t) {
    e[t] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, t) {
    this.resolvedProperty.toArray(e, t);
  }
  // Direct
  _setValue_direct(e, t) {
    this.targetObject[this.propertyName] = e[t];
  }
  _setValue_direct_setNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, t) {
    this.targetObject[this.propertyName] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
  }
  _setValue_array_setNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, t) {
    const n = this.resolvedProperty;
    for (let r = 0, o = n.length; r !== o; ++r)
      n[r] = e[t++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t];
  }
  _setValue_arrayElement_setNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty[this.propertyIndex] = e[t], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, t) {
    this.resolvedProperty.fromArray(e, t);
  }
  _setValue_fromArray_setNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, t) {
    this.resolvedProperty.fromArray(e, t), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, t) {
    this.bind(), this.getValue(e, t);
  }
  _setValue_unbound(e, t) {
    this.bind(), this.setValue(e, t);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let e = this.node;
    const t = this.parsedPath, n = t.objectName, r = t.propertyName;
    let o = t.propertyIndex;
    if (e || (e = vn.findNode(this.rootNode, t.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (n) {
      let h = t.objectIndex;
      switch (n) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let g = 0; g < e.length; g++)
            if (e[g].name === h) {
              h = g;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[n] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[n];
      }
      if (h !== void 0) {
        if (e[h] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[h];
      }
    }
    const c = e[r];
    if (c === void 0) {
      const h = t.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + h + "." + r + " but it wasn't found.", e);
      return;
    }
    let f = this.Versioning.None;
    this.targetObject = e, e.needsUpdate !== void 0 ? f = this.Versioning.NeedsUpdate : e.matrixWorldNeedsUpdate !== void 0 && (f = this.Versioning.MatrixWorldNeedsUpdate);
    let p = this.BindingType.Direct;
    if (o !== void 0) {
      if (r === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[o] !== void 0 && (o = e.morphTargetDictionary[o]);
      }
      p = this.BindingType.ArrayElement, this.resolvedProperty = c, this.propertyIndex = o;
    } else
      c.fromArray !== void 0 && c.toArray !== void 0 ? (p = this.BindingType.HasFromToArray, this.resolvedProperty = c) : Array.isArray(c) ? (p = this.BindingType.EntireArray, this.resolvedProperty = c) : this.propertyName = r;
    this.getValue = this.GetterByBindingType[p], this.setValue = this.SetterByBindingTypeAndVersioning[p][f];
  }
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
vn.Composite = BF;
vn.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
vn.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
vn.prototype.GetterByBindingType = [
  vn.prototype._getValue_direct,
  vn.prototype._getValue_array,
  vn.prototype._getValue_arrayElement,
  vn.prototype._getValue_toArray
];
vn.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    vn.prototype._setValue_direct,
    vn.prototype._setValue_direct_setNeedsUpdate,
    vn.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    vn.prototype._setValue_array,
    vn.prototype._setValue_array_setNeedsUpdate,
    vn.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    vn.prototype._setValue_arrayElement,
    vn.prototype._setValue_arrayElement_setNeedsUpdate,
    vn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    vn.prototype._setValue_fromArray,
    vn.prototype._setValue_fromArray_setNeedsUpdate,
    vn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class HF {
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = ya(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let n = 0, r = arguments.length; n !== r; ++n)
      e[arguments[n].uuid] = n;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const t = this;
    this.stats = {
      objects: {
        get total() {
          return t._objects.length;
        },
        get inUse() {
          return this.total - t.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return t._bindings.length;
      }
    };
  }
  add() {
    const e = this._objects, t = this._indicesByUUID, n = this._paths, r = this._parsedPaths, o = this._bindings, c = o.length;
    let f, p = e.length, h = this.nCachedObjects_;
    for (let g = 0, _ = arguments.length; g !== _; ++g) {
      const x = arguments[g], M = x.uuid;
      let T = t[M];
      if (T === void 0) {
        T = p++, t[M] = T, e.push(x);
        for (let R = 0, b = c; R !== b; ++R)
          o[R].push(new vn(x, n[R], r[R]));
      } else if (T < h) {
        f = e[T];
        const R = --h, b = e[R];
        t[b.uuid] = T, e[T] = b, t[M] = R, e[R] = x;
        for (let E = 0, L = c; E !== L; ++E) {
          const C = o[E], U = C[R];
          let Y = C[T];
          C[T] = U, Y === void 0 && (Y = new vn(x, n[E], r[E])), C[R] = Y;
        }
      } else
        e[T] !== f && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = h;
  }
  remove() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, r = n.length;
    let o = this.nCachedObjects_;
    for (let c = 0, f = arguments.length; c !== f; ++c) {
      const p = arguments[c], h = p.uuid, g = t[h];
      if (g !== void 0 && g >= o) {
        const _ = o++, x = e[_];
        t[x.uuid] = g, e[g] = x, t[h] = _, e[_] = p;
        for (let M = 0, T = r; M !== T; ++M) {
          const R = n[M], b = R[_], E = R[g];
          R[g] = b, R[_] = E;
        }
      }
    }
    this.nCachedObjects_ = o;
  }
  // remove & forget
  uncache() {
    const e = this._objects, t = this._indicesByUUID, n = this._bindings, r = n.length;
    let o = this.nCachedObjects_, c = e.length;
    for (let f = 0, p = arguments.length; f !== p; ++f) {
      const h = arguments[f], g = h.uuid, _ = t[g];
      if (_ !== void 0)
        if (delete t[g], _ < o) {
          const x = --o, M = e[x], T = --c, R = e[T];
          t[M.uuid] = _, e[_] = M, t[R.uuid] = x, e[x] = R, e.pop();
          for (let b = 0, E = r; b !== E; ++b) {
            const L = n[b], C = L[x], U = L[T];
            L[_] = C, L[x] = U, L.pop();
          }
        } else {
          const x = --c, M = e[x];
          x > 0 && (t[M.uuid] = _), e[_] = M, e.pop();
          for (let T = 0, R = r; T !== R; ++T) {
            const b = n[T];
            b[_] = b[x], b.pop();
          }
        }
    }
    this.nCachedObjects_ = o;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, t) {
    const n = this._bindingsIndicesByPath;
    let r = n[e];
    const o = this._bindings;
    if (r !== void 0)
      return o[r];
    const c = this._paths, f = this._parsedPaths, p = this._objects, h = p.length, g = this.nCachedObjects_, _ = new Array(h);
    r = o.length, n[e] = r, c.push(e), f.push(t), o.push(_);
    for (let x = g, M = p.length; x !== M; ++x) {
      const T = p[x];
      _[x] = new vn(T, e, t);
    }
    return _;
  }
  unsubscribe_(e) {
    const t = this._bindingsIndicesByPath, n = t[e];
    if (n !== void 0) {
      const r = this._paths, o = this._parsedPaths, c = this._bindings, f = c.length - 1, p = c[f], h = e[f];
      t[h] = n, c[n] = p, c.pop(), o[n] = o[f], o.pop(), r[n] = r[f], r.pop();
    }
  }
}
class hR {
  constructor(e, t, n = null, r = t.blendMode) {
    this._mixer = e, this._clip = t, this._localRoot = n, this.blendMode = r;
    const o = t.tracks, c = o.length, f = new Array(c), p = {
      endingStart: rc,
      endingEnd: rc
    };
    for (let h = 0; h !== c; ++h) {
      const g = o[h].createInterpolant(null);
      f[h] = g, g.settings = p;
    }
    this._interpolantSettings = p, this._interpolants = f, this._propertyBindings = new Array(c), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = Xw, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  // State & Scheduling
  play() {
    return this._mixer._activateAction(this), this;
  }
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  // return true when play has been called
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  startAt(e) {
    return this._startTime = e, this;
  }
  setLoop(e, t) {
    return this.loop = e, this.repetitions = t, this;
  }
  // Weight
  // set the weight stopping any scheduled fading
  // although .enabled = false yields an effective weight of zero, this
  // method does *not* change .enabled, because it would be confusing
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  // return the weight considering fading and .enabled
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  crossFadeFrom(e, t, n) {
    if (e.fadeOut(t), this.fadeIn(t), n) {
      const r = this._clip.duration, o = e._clip.duration, c = o / r, f = r / o;
      e.warp(1, c, t), this.warp(f, 1, t);
    }
    return this;
  }
  crossFadeTo(e, t, n) {
    return e.crossFadeFrom(this, t, n);
  }
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Time Scale Control
  // set the time scale stopping any scheduled warping
  // although .paused = true yields an effective time scale of zero, this
  // method does *not* change .paused, because it would be confusing
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  // return the time scale considering warping and .paused
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  warp(e, t, n) {
    const r = this._mixer, o = r.time, c = this.timeScale;
    let f = this._timeScaleInterpolant;
    f === null && (f = r._lendControlInterpolant(), this._timeScaleInterpolant = f);
    const p = f.parameterPositions, h = f.sampleValues;
    return p[0] = o, p[1] = o + n, h[0] = e / c, h[1] = t / c, this;
  }
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  // Object Accessors
  getMixer() {
    return this._mixer;
  }
  getClip() {
    return this._clip;
  }
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, t, n, r) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const o = this._startTime;
    if (o !== null) {
      const p = (e - o) * n;
      p < 0 || n === 0 ? t = 0 : (this._startTime = null, t = n * p);
    }
    t *= this._updateTimeScale(e);
    const c = this._updateTime(t), f = this._updateWeight(e);
    if (f > 0) {
      const p = this._interpolants, h = this._propertyBindings;
      switch (this.blendMode) {
        case bS:
          for (let g = 0, _ = p.length; g !== _; ++g)
            p[g].evaluate(c), h[g].accumulateAdditive(f);
          break;
        case Bg:
        default:
          for (let g = 0, _ = p.length; g !== _; ++g)
            p[g].evaluate(c), h[g].accumulate(r, f);
      }
    }
  }
  _updateWeight(e) {
    let t = 0;
    if (this.enabled) {
      t = this.weight;
      const n = this._weightInterpolant;
      if (n !== null) {
        const r = n.evaluate(e)[0];
        t *= r, e > n.parameterPositions[1] && (this.stopFading(), r === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = t, t;
  }
  _updateTimeScale(e) {
    let t = 0;
    if (!this.paused) {
      t = this.timeScale;
      const n = this._timeScaleInterpolant;
      if (n !== null) {
        const r = n.evaluate(e)[0];
        t *= r, e > n.parameterPositions[1] && (this.stopWarping(), t === 0 ? this.paused = !0 : this.timeScale = t);
      }
    }
    return this._effectiveTimeScale = t, t;
  }
  _updateTime(e) {
    const t = this._clip.duration, n = this.loop;
    let r = this.time + e, o = this._loopCount;
    const c = n === qw;
    if (e === 0)
      return o === -1 ? r : c && (o & 1) === 1 ? t - r : r;
    if (n === Ww) {
      o === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (r >= t)
          r = t;
        else if (r < 0)
          r = 0;
        else {
          this.time = r;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = r, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (o === -1 && (e >= 0 ? (o = 0, this._setEndings(!0, this.repetitions === 0, c)) : this._setEndings(this.repetitions === 0, !0, c)), r >= t || r < 0) {
        const f = Math.floor(r / t);
        r -= t * f, o += Math.abs(f);
        const p = this.repetitions - o;
        if (p <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, r = e > 0 ? t : 0, this.time = r, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (p === 1) {
            const h = e < 0;
            this._setEndings(h, !h, c);
          } else
            this._setEndings(!1, !1, c);
          this._loopCount = o, this.time = r, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: f
          });
        }
      } else
        this.time = r;
      if (c && (o & 1) === 1)
        return t - r;
    }
    return r;
  }
  _setEndings(e, t, n) {
    const r = this._interpolantSettings;
    n ? (r.endingStart = ac, r.endingEnd = ac) : (e ? r.endingStart = this.zeroSlopeAtStart ? ac : rc : r.endingStart = yp, t ? r.endingEnd = this.zeroSlopeAtEnd ? ac : rc : r.endingEnd = yp);
  }
  _scheduleFading(e, t, n) {
    const r = this._mixer, o = r.time;
    let c = this._weightInterpolant;
    c === null && (c = r._lendControlInterpolant(), this._weightInterpolant = c);
    const f = c.parameterPositions, p = c.sampleValues;
    return f[0] = o, p[0] = t, f[1] = o + e, p[1] = n, this;
  }
}
const VF = new Float32Array(1);
class kF extends Ho {
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, t) {
    const n = e._localRoot || this._root, r = e._clip.tracks, o = r.length, c = e._propertyBindings, f = e._interpolants, p = n.uuid, h = this._bindingsByRootAndName;
    let g = h[p];
    g === void 0 && (g = {}, h[p] = g);
    for (let _ = 0; _ !== o; ++_) {
      const x = r[_], M = x.name;
      let T = g[M];
      if (T !== void 0)
        ++T.referenceCount, c[_] = T;
      else {
        if (T = c[_], T !== void 0) {
          T._cacheIndex === null && (++T.referenceCount, this._addInactiveBinding(T, p, M));
          continue;
        }
        const R = t && t._propertyBindings[_].binding.parsedPath;
        T = new dR(
          vn.create(n, M, R),
          x.ValueTypeName,
          x.getValueSize()
        ), ++T.referenceCount, this._addInactiveBinding(T, p, M), c[_] = T;
      }
      f[_].resultBuffer = T.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const n = (e._localRoot || this._root).uuid, r = e._clip.uuid, o = this._actionsByClip[r];
        this._bindAction(
          e,
          o && o.knownActions[0]
        ), this._addInactiveAction(e, r, n);
      }
      const t = e._propertyBindings;
      for (let n = 0, r = t.length; n !== r; ++n) {
        const o = t[n];
        o.useCount++ === 0 && (this._lendBinding(o), o.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const t = e._propertyBindings;
      for (let n = 0, r = t.length; n !== r; ++n) {
        const o = t[n];
        --o.useCount === 0 && (o.restoreOriginalState(), this._takeBackBinding(o));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const t = e._cacheIndex;
    return t !== null && t < this._nActiveActions;
  }
  _addInactiveAction(e, t, n) {
    const r = this._actions, o = this._actionsByClip;
    let c = o[t];
    if (c === void 0)
      c = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, o[t] = c;
    else {
      const f = c.knownActions;
      e._byClipCacheIndex = f.length, f.push(e);
    }
    e._cacheIndex = r.length, r.push(e), c.actionByRoot[n] = e;
  }
  _removeInactiveAction(e) {
    const t = this._actions, n = t[t.length - 1], r = e._cacheIndex;
    n._cacheIndex = r, t[r] = n, t.pop(), e._cacheIndex = null;
    const o = e._clip.uuid, c = this._actionsByClip, f = c[o], p = f.knownActions, h = p[p.length - 1], g = e._byClipCacheIndex;
    h._byClipCacheIndex = g, p[g] = h, p.pop(), e._byClipCacheIndex = null;
    const _ = f.actionByRoot, x = (e._localRoot || this._root).uuid;
    delete _[x], p.length === 0 && delete c[o], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const t = e._propertyBindings;
    for (let n = 0, r = t.length; n !== r; ++n) {
      const o = t[n];
      --o.referenceCount === 0 && this._removeInactiveBinding(o);
    }
  }
  _lendAction(e) {
    const t = this._actions, n = e._cacheIndex, r = this._nActiveActions++, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackAction(e) {
    const t = this._actions, n = e._cacheIndex, r = --this._nActiveActions, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, t, n) {
    const r = this._bindingsByRootAndName, o = this._bindings;
    let c = r[t];
    c === void 0 && (c = {}, r[t] = c), c[n] = e, e._cacheIndex = o.length, o.push(e);
  }
  _removeInactiveBinding(e) {
    const t = this._bindings, n = e.binding, r = n.rootNode.uuid, o = n.path, c = this._bindingsByRootAndName, f = c[r], p = t[t.length - 1], h = e._cacheIndex;
    p._cacheIndex = h, t[h] = p, t.pop(), delete f[o], Object.keys(f).length === 0 && delete c[r];
  }
  _lendBinding(e) {
    const t = this._bindings, n = e._cacheIndex, r = this._nActiveBindings++, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  _takeBackBinding(e) {
    const t = this._bindings, n = e._cacheIndex, r = --this._nActiveBindings, o = t[r];
    e._cacheIndex = r, t[r] = e, o._cacheIndex = n, t[n] = o;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, t = this._nActiveControlInterpolants++;
    let n = e[t];
    return n === void 0 && (n = new qS(
      new Float32Array(2),
      new Float32Array(2),
      1,
      VF
    ), n.__cacheIndex = t, e[t] = n), n;
  }
  _takeBackControlInterpolant(e) {
    const t = this._controlInterpolants, n = e.__cacheIndex, r = --this._nActiveControlInterpolants, o = t[r];
    e.__cacheIndex = r, t[r] = e, o.__cacheIndex = n, t[n] = o;
  }
  // return an action for a clip optionally using a custom root target
  // object (this method allocates a lot of dynamic memory in case a
  // previously unknown clip/root combination is specified)
  clipAction(e, t, n) {
    const r = t || this._root, o = r.uuid;
    let c = typeof e == "string" ? Pp.findByName(r, e) : e;
    const f = c !== null ? c.uuid : e, p = this._actionsByClip[f];
    let h = null;
    if (n === void 0 && (c !== null ? n = c.blendMode : n = Bg), p !== void 0) {
      const _ = p.actionByRoot[o];
      if (_ !== void 0 && _.blendMode === n)
        return _;
      h = p.knownActions[0], c === null && (c = h._clip);
    }
    if (c === null)
      return null;
    const g = new hR(this, c, t, n);
    return this._bindAction(g, h), this._addInactiveAction(g, f, o), g;
  }
  // get an existing action
  existingAction(e, t) {
    const n = t || this._root, r = n.uuid, o = typeof e == "string" ? Pp.findByName(n, e) : e, c = o ? o.uuid : e, f = this._actionsByClip[c];
    return f !== void 0 && f.actionByRoot[r] || null;
  }
  // deactivates all previously scheduled actions
  stopAllAction() {
    const e = this._actions, t = this._nActiveActions;
    for (let n = t - 1; n >= 0; --n)
      e[n].stop();
    return this;
  }
  // advance the time and update apply the animation
  update(e) {
    e *= this.timeScale;
    const t = this._actions, n = this._nActiveActions, r = this.time += e, o = Math.sign(e), c = this._accuIndex ^= 1;
    for (let h = 0; h !== n; ++h)
      t[h]._update(r, e, o, c);
    const f = this._bindings, p = this._nActiveBindings;
    for (let h = 0; h !== p; ++h)
      f[h].apply(c);
    return this;
  }
  // Allows you to seek to a specific time in an animation.
  setTime(e) {
    this.time = 0;
    for (let t = 0; t < this._actions.length; t++)
      this._actions[t].time = 0;
    return this.update(e);
  }
  // return this mixer's root target object
  getRoot() {
    return this._root;
  }
  // free all resources specific to a particular clip
  uncacheClip(e) {
    const t = this._actions, n = e.uuid, r = this._actionsByClip, o = r[n];
    if (o !== void 0) {
      const c = o.knownActions;
      for (let f = 0, p = c.length; f !== p; ++f) {
        const h = c[f];
        this._deactivateAction(h);
        const g = h._cacheIndex, _ = t[t.length - 1];
        h._cacheIndex = null, h._byClipCacheIndex = null, _._cacheIndex = g, t[g] = _, t.pop(), this._removeInactiveBindingsForAction(h);
      }
      delete r[n];
    }
  }
  // free all resources specific to a particular root target object
  uncacheRoot(e) {
    const t = e.uuid, n = this._actionsByClip;
    for (const c in n) {
      const f = n[c].actionByRoot, p = f[t];
      p !== void 0 && (this._deactivateAction(p), this._removeInactiveAction(p));
    }
    const r = this._bindingsByRootAndName, o = r[t];
    if (o !== void 0)
      for (const c in o) {
        const f = o[c];
        f.restoreOriginalState(), this._removeInactiveBinding(f);
      }
  }
  // remove a targeted clip from the cache
  uncacheAction(e, t) {
    const n = this.existingAction(e, t);
    n !== null && (this._deactivateAction(n), this._removeInactiveAction(n));
  }
}
class eM {
  constructor(e) {
    this.value = e;
  }
  clone() {
    return new eM(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let GF = 0;
class WF extends Ho {
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: GF++ }), this.name = "", this.usage = Mp, this.uniforms = [];
  }
  add(e) {
    return this.uniforms.push(e), this;
  }
  remove(e) {
    const t = this.uniforms.indexOf(e);
    return t !== -1 && this.uniforms.splice(t, 1), this;
  }
  setName(e) {
    return this.name = e, this;
  }
  setUsage(e) {
    return this.usage = e, this;
  }
  dispose() {
    return this.dispatchEvent({ type: "dispose" }), this;
  }
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const t = e.uniforms;
    this.uniforms.length = 0;
    for (let n = 0, r = t.length; n < r; n++) {
      const o = Array.isArray(t[n]) ? t[n] : [t[n]];
      for (let c = 0; c < o.length; c++)
        this.uniforms.push(o[c].clone());
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class XF extends Xg {
  constructor(e, t, n = 1) {
    super(e, t), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = n;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const t = super.clone(e);
    return t.meshPerAttribute = this.meshPerAttribute, t;
  }
  toJSON(e) {
    const t = super.toJSON(e);
    return t.isInstancedInterleavedBuffer = !0, t.meshPerAttribute = this.meshPerAttribute, t;
  }
}
class qF {
  constructor(e, t, n, r, o) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = t, this.itemSize = n, this.elementSize = r, this.count = o, this.version = 0;
  }
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  setBuffer(e) {
    return this.buffer = e, this;
  }
  setType(e, t) {
    return this.type = e, this.elementSize = t, this;
  }
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  setCount(e) {
    return this.count = e, this;
  }
}
const _b = /* @__PURE__ */ new Ht();
class pR {
  constructor(e, t, n = 0, r = 1 / 0) {
    this.ray = new _d(e, t), this.near = n, this.far = r, this.camera = null, this.layers = new fc(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(e, t) {
    this.ray.set(e, t);
  }
  setFromCamera(e, t) {
    t.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(t.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(t).sub(this.ray.origin).normalize(), this.camera = t) : t.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (t.near + t.far) / (t.near - t.far)).unproject(t), this.ray.direction.set(0, 0, -1).transformDirection(t.matrixWorld), this.camera = t) : console.error("THREE.Raycaster: Unsupported camera type: " + t.type);
  }
  setFromXRController(e) {
    return _b.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(_b), this;
  }
  intersectObject(e, t = !0, n = []) {
    return oS(e, this, n, t), n.sort(xb), n;
  }
  intersectObjects(e, t = !0, n = []) {
    for (let r = 0, o = e.length; r < o; r++)
      oS(e[r], this, n, t);
    return n.sort(xb), n;
  }
}
function xb(s, e) {
  return s.distance - e.distance;
}
function oS(s, e, t, n) {
  if (s.layers.test(e.layers) && s.raycast(e, t), n === !0) {
    const r = s.children;
    for (let o = 0, c = r.length; o < c; o++)
      oS(r[o], e, t, !0);
  }
}
class YF {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.phi = t, this.theta = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    return this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi)), this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + t * t + n * n), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, n), this.phi = Math.acos(ci(t / this.radius, -1, 1))), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
class jF {
  constructor(e = 1, t = 0, n = 0) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  set(e, t, n) {
    return this.radius = e, this.theta = t, this.y = n, this;
  }
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  setFromCartesianCoords(e, t, n) {
    return this.radius = Math.sqrt(e * e + n * n), this.theta = Math.atan2(e, n), this.y = t, this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Sb = /* @__PURE__ */ new De();
class ZF {
  constructor(e = new De(1 / 0, 1 / 0), t = new De(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = t;
  }
  set(e, t) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  setFromPoints(e) {
    this.makeEmpty();
    for (let t = 0, n = e.length; t < n; t++)
      this.expandByPoint(e[t]);
    return this;
  }
  setFromCenterAndSize(e, t) {
    const n = Sb.copy(t).multiplyScalar(0.5);
    return this.min.copy(e).sub(n), this.max.copy(e).add(n), this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  containsPoint(e) {
    return !(e.x < this.min.x || e.x > this.max.x || e.y < this.min.y || e.y > this.max.y);
  }
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  getParameter(e, t) {
    return t.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  intersectsBox(e) {
    return !(e.max.x < this.min.x || e.min.x > this.max.x || e.max.y < this.min.y || e.min.y > this.max.y);
  }
  clampPoint(e, t) {
    return t.copy(e).clamp(this.min, this.max);
  }
  distanceToPoint(e) {
    return this.clampPoint(e, Sb).distanceTo(e);
  }
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const Mb = /* @__PURE__ */ new q(), hg = /* @__PURE__ */ new q();
class JF {
  constructor(e = new q(), t = new q()) {
    this.start = e, this.end = t;
  }
  set(e, t) {
    return this.start.copy(e), this.end.copy(t), this;
  }
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(e, t) {
    return this.delta(t).multiplyScalar(e).add(this.start);
  }
  closestPointToPointParameter(e, t) {
    Mb.subVectors(e, this.start), hg.subVectors(this.end, this.start);
    const n = hg.dot(hg);
    let o = hg.dot(Mb) / n;
    return t && (o = ci(o, 0, 1)), o;
  }
  closestPointToPoint(e, t, n) {
    const r = this.closestPointToPointParameter(e, t);
    return this.delta(n).multiplyScalar(r).add(this.start);
  }
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Eb = /* @__PURE__ */ new q();
class QF extends xn {
  constructor(e, t) {
    super(), this.light = e, this.matrixAutoUpdate = !1, this.color = t, this.type = "SpotLightHelper";
    const n = new $t(), r = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let c = 0, f = 1, p = 32; c < p; c++, f++) {
      const h = c / p * Math.PI * 2, g = f / p * Math.PI * 2;
      r.push(
        Math.cos(h),
        Math.sin(h),
        1,
        Math.cos(g),
        Math.sin(g),
        1
      );
    }
    n.setAttribute("position", new Mt(r, 3));
    const o = new Ur({ fog: !1, toneMapped: !1 });
    this.cone = new js(n, o), this.add(this.cone), this.update();
  }
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld);
    const e = this.light.distance ? this.light.distance : 1e3, t = e * Math.tan(this.light.angle);
    this.cone.scale.set(t, t, e), Eb.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(Eb), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const Hl = /* @__PURE__ */ new q(), pg = /* @__PURE__ */ new Ht(), ox = /* @__PURE__ */ new Ht();
class KF extends js {
  constructor(e) {
    const t = mR(e), n = new $t(), r = [], o = [], c = new mt(0, 0, 1), f = new mt(0, 1, 0);
    for (let h = 0; h < t.length; h++) {
      const g = t[h];
      g.parent && g.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), o.push(c.r, c.g, c.b), o.push(f.r, f.g, f.b));
    }
    n.setAttribute("position", new Mt(r, 3)), n.setAttribute("color", new Mt(o, 3));
    const p = new Ur({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(n, p), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = t, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
  }
  updateMatrixWorld(e) {
    const t = this.bones, n = this.geometry, r = n.getAttribute("position");
    ox.copy(this.root.matrixWorld).invert();
    for (let o = 0, c = 0; o < t.length; o++) {
      const f = t[o];
      f.parent && f.parent.isBone && (pg.multiplyMatrices(ox, f.matrixWorld), Hl.setFromMatrixPosition(pg), r.setXYZ(c, Hl.x, Hl.y, Hl.z), pg.multiplyMatrices(ox, f.parent.matrixWorld), Hl.setFromMatrixPosition(pg), r.setXYZ(c + 1, Hl.x, Hl.y, Hl.z), c += 2);
    }
    n.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function mR(s) {
  const e = [];
  s.isBone === !0 && e.push(s);
  for (let t = 0; t < s.children.length; t++)
    e.push.apply(e, mR(s.children[t]));
  return e;
}
class $F extends Ti {
  constructor(e, t, n) {
    const r = new Vp(t, 4, 2), o = new Zl({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(r, o), this.light = e, this.color = n, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const ez = /* @__PURE__ */ new q(), Tb = /* @__PURE__ */ new mt(), bb = /* @__PURE__ */ new mt();
class tz extends xn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "HemisphereLightHelper";
    const r = new Hp(t);
    r.rotateY(Math.PI * 0.5), this.material = new Zl({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const o = r.getAttribute("position"), c = new Float32Array(o.count * 3);
    r.setAttribute("color", new Dn(c, 3)), this.add(new Ti(r, this.material)), this.update();
  }
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const t = e.geometry.getAttribute("color");
      Tb.copy(this.light.color), bb.copy(this.light.groundColor);
      for (let n = 0, r = t.count; n < r; n++) {
        const o = n < r / 2 ? Tb : bb;
        t.setXYZ(n, o.r, o.g, o.b);
      }
      t.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(ez.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class nz extends js {
  constructor(e = 10, t = 10, n = 4473924, r = 8947848) {
    n = new mt(n), r = new mt(r);
    const o = t / 2, c = e / t, f = e / 2, p = [], h = [];
    for (let x = 0, M = 0, T = -f; x <= t; x++, T += c) {
      p.push(-f, 0, T, f, 0, T), p.push(T, 0, -f, T, 0, f);
      const R = x === o ? n : r;
      R.toArray(h, M), M += 3, R.toArray(h, M), M += 3, R.toArray(h, M), M += 3, R.toArray(h, M), M += 3;
    }
    const g = new $t();
    g.setAttribute("position", new Mt(p, 3)), g.setAttribute("color", new Mt(h, 3));
    const _ = new Ur({ vertexColors: !0, toneMapped: !1 });
    super(g, _), this.type = "GridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class iz extends js {
  constructor(e = 10, t = 16, n = 8, r = 64, o = 4473924, c = 8947848) {
    o = new mt(o), c = new mt(c);
    const f = [], p = [];
    if (t > 1)
      for (let _ = 0; _ < t; _++) {
        const x = _ / t * (Math.PI * 2), M = Math.sin(x) * e, T = Math.cos(x) * e;
        f.push(0, 0, 0), f.push(M, 0, T);
        const R = _ & 1 ? o : c;
        p.push(R.r, R.g, R.b), p.push(R.r, R.g, R.b);
      }
    for (let _ = 0; _ < n; _++) {
      const x = _ & 1 ? o : c, M = e - e / n * _;
      for (let T = 0; T < r; T++) {
        let R = T / r * (Math.PI * 2), b = Math.sin(R) * M, E = Math.cos(R) * M;
        f.push(b, 0, E), p.push(x.r, x.g, x.b), R = (T + 1) / r * (Math.PI * 2), b = Math.sin(R) * M, E = Math.cos(R) * M, f.push(b, 0, E), p.push(x.r, x.g, x.b);
      }
    }
    const h = new $t();
    h.setAttribute("position", new Mt(f, 3)), h.setAttribute("color", new Mt(p, 3));
    const g = new Ur({ vertexColors: !0, toneMapped: !1 });
    super(h, g), this.type = "PolarGridHelper";
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const wb = /* @__PURE__ */ new q(), mg = /* @__PURE__ */ new q(), Ab = /* @__PURE__ */ new q();
class rz extends xn {
  constructor(e, t, n) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = n, this.type = "DirectionalLightHelper", t === void 0 && (t = 1);
    let r = new $t();
    r.setAttribute("position", new Mt([
      -t,
      t,
      0,
      t,
      t,
      0,
      t,
      -t,
      0,
      -t,
      -t,
      0,
      -t,
      t,
      0
    ], 3));
    const o = new Ur({ fog: !1, toneMapped: !1 });
    this.lightPlane = new Yl(r, o), this.add(this.lightPlane), r = new $t(), r.setAttribute("position", new Mt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Yl(r, o), this.add(this.targetLine), this.update();
  }
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), wb.setFromMatrixPosition(this.light.matrixWorld), mg.setFromMatrixPosition(this.light.target.matrixWorld), Ab.subVectors(mg, wb), this.lightPlane.lookAt(mg), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(mg), this.targetLine.scale.z = Ab.length();
  }
}
const vg = /* @__PURE__ */ new q(), ui = /* @__PURE__ */ new Ip();
class az extends js {
  constructor(e) {
    const t = new $t(), n = new Ur({ color: 16777215, vertexColors: !0, toneMapped: !1 }), r = [], o = [], c = {};
    f("n1", "n2"), f("n2", "n4"), f("n4", "n3"), f("n3", "n1"), f("f1", "f2"), f("f2", "f4"), f("f4", "f3"), f("f3", "f1"), f("n1", "f1"), f("n2", "f2"), f("n3", "f3"), f("n4", "f4"), f("p", "n1"), f("p", "n2"), f("p", "n3"), f("p", "n4"), f("u1", "u2"), f("u2", "u3"), f("u3", "u1"), f("c", "t"), f("p", "c"), f("cn1", "cn2"), f("cn3", "cn4"), f("cf1", "cf2"), f("cf3", "cf4");
    function f(T, R) {
      p(T), p(R);
    }
    function p(T) {
      r.push(0, 0, 0), o.push(0, 0, 0), c[T] === void 0 && (c[T] = []), c[T].push(r.length / 3 - 1);
    }
    t.setAttribute("position", new Mt(r, 3)), t.setAttribute("color", new Mt(o, 3)), super(t, n), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = c, this.update();
    const h = new mt(16755200), g = new mt(16711680), _ = new mt(43775), x = new mt(16777215), M = new mt(3355443);
    this.setColors(h, g, _, x, M);
  }
  setColors(e, t, n, r, o) {
    const f = this.geometry.getAttribute("color");
    f.setXYZ(0, e.r, e.g, e.b), f.setXYZ(1, e.r, e.g, e.b), f.setXYZ(2, e.r, e.g, e.b), f.setXYZ(3, e.r, e.g, e.b), f.setXYZ(4, e.r, e.g, e.b), f.setXYZ(5, e.r, e.g, e.b), f.setXYZ(6, e.r, e.g, e.b), f.setXYZ(7, e.r, e.g, e.b), f.setXYZ(8, e.r, e.g, e.b), f.setXYZ(9, e.r, e.g, e.b), f.setXYZ(10, e.r, e.g, e.b), f.setXYZ(11, e.r, e.g, e.b), f.setXYZ(12, e.r, e.g, e.b), f.setXYZ(13, e.r, e.g, e.b), f.setXYZ(14, e.r, e.g, e.b), f.setXYZ(15, e.r, e.g, e.b), f.setXYZ(16, e.r, e.g, e.b), f.setXYZ(17, e.r, e.g, e.b), f.setXYZ(18, e.r, e.g, e.b), f.setXYZ(19, e.r, e.g, e.b), f.setXYZ(20, e.r, e.g, e.b), f.setXYZ(21, e.r, e.g, e.b), f.setXYZ(22, e.r, e.g, e.b), f.setXYZ(23, e.r, e.g, e.b), f.setXYZ(24, t.r, t.g, t.b), f.setXYZ(25, t.r, t.g, t.b), f.setXYZ(26, t.r, t.g, t.b), f.setXYZ(27, t.r, t.g, t.b), f.setXYZ(28, t.r, t.g, t.b), f.setXYZ(29, t.r, t.g, t.b), f.setXYZ(30, t.r, t.g, t.b), f.setXYZ(31, t.r, t.g, t.b), f.setXYZ(32, n.r, n.g, n.b), f.setXYZ(33, n.r, n.g, n.b), f.setXYZ(34, n.r, n.g, n.b), f.setXYZ(35, n.r, n.g, n.b), f.setXYZ(36, n.r, n.g, n.b), f.setXYZ(37, n.r, n.g, n.b), f.setXYZ(38, r.r, r.g, r.b), f.setXYZ(39, r.r, r.g, r.b), f.setXYZ(40, o.r, o.g, o.b), f.setXYZ(41, o.r, o.g, o.b), f.setXYZ(42, o.r, o.g, o.b), f.setXYZ(43, o.r, o.g, o.b), f.setXYZ(44, o.r, o.g, o.b), f.setXYZ(45, o.r, o.g, o.b), f.setXYZ(46, o.r, o.g, o.b), f.setXYZ(47, o.r, o.g, o.b), f.setXYZ(48, o.r, o.g, o.b), f.setXYZ(49, o.r, o.g, o.b), f.needsUpdate = !0;
  }
  update() {
    const e = this.geometry, t = this.pointMap, n = 1, r = 1;
    ui.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), _i("c", t, e, ui, 0, 0, -1), _i("t", t, e, ui, 0, 0, 1), _i("n1", t, e, ui, -n, -r, -1), _i("n2", t, e, ui, n, -r, -1), _i("n3", t, e, ui, -n, r, -1), _i("n4", t, e, ui, n, r, -1), _i("f1", t, e, ui, -n, -r, 1), _i("f2", t, e, ui, n, -r, 1), _i("f3", t, e, ui, -n, r, 1), _i("f4", t, e, ui, n, r, 1), _i("u1", t, e, ui, n * 0.7, r * 1.1, -1), _i("u2", t, e, ui, -n * 0.7, r * 1.1, -1), _i("u3", t, e, ui, 0, r * 2, -1), _i("cf1", t, e, ui, -n, 0, 1), _i("cf2", t, e, ui, n, 0, 1), _i("cf3", t, e, ui, 0, -r, 1), _i("cf4", t, e, ui, 0, r, 1), _i("cn1", t, e, ui, -n, 0, -1), _i("cn2", t, e, ui, n, 0, -1), _i("cn3", t, e, ui, 0, -r, -1), _i("cn4", t, e, ui, 0, r, -1), e.getAttribute("position").needsUpdate = !0;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function _i(s, e, t, n, r, o, c) {
  vg.set(r, o, c).unproject(n);
  const f = e[s];
  if (f !== void 0) {
    const p = t.getAttribute("position");
    for (let h = 0, g = f.length; h < g; h++)
      p.setXYZ(f[h], vg.x, vg.y, vg.z);
  }
}
const gg = /* @__PURE__ */ new Nr();
class sz extends js {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = new Float32Array(8 * 3), o = new $t();
    o.setIndex(new Dn(n, 1)), o.setAttribute("position", new Dn(r, 3)), super(o, new Ur({ color: t, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  update(e) {
    if (e !== void 0 && console.warn("THREE.BoxHelper: .update() has no longer arguments."), this.object !== void 0 && gg.setFromObject(this.object), gg.isEmpty())
      return;
    const t = gg.min, n = gg.max, r = this.geometry.attributes.position, o = r.array;
    o[0] = n.x, o[1] = n.y, o[2] = n.z, o[3] = t.x, o[4] = n.y, o[5] = n.z, o[6] = t.x, o[7] = t.y, o[8] = n.z, o[9] = n.x, o[10] = t.y, o[11] = n.z, o[12] = n.x, o[13] = n.y, o[14] = t.z, o[15] = t.x, o[16] = n.y, o[17] = t.z, o[18] = t.x, o[19] = t.y, o[20] = t.z, o[21] = n.x, o[22] = t.y, o[23] = t.z, r.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, t) {
    return super.copy(e, t), this.object = e.object, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class oz extends js {
  constructor(e, t = 16776960) {
    const n = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], o = new $t();
    o.setIndex(new Dn(n, 1)), o.setAttribute("position", new Mt(r, 3)), super(o, new Ur({ color: t, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const t = this.box;
    t.isEmpty() || (t.getCenter(this.position), t.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class lz extends Yl {
  constructor(e, t = 1, n = 16776960) {
    const r = n, o = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], c = new $t();
    c.setAttribute("position", new Mt(o, 3)), c.computeBoundingSphere(), super(c, new Ur({ color: r, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = t;
    const f = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], p = new $t();
    p.setAttribute("position", new Mt(f, 3)), p.computeBoundingSphere(), this.add(new Ti(p, new Zl({ color: r, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const Rb = /* @__PURE__ */ new q();
let yg, lx;
class uz extends xn {
  // dir is assumed to be normalized
  constructor(e = new q(0, 0, 1), t = new q(0, 0, 0), n = 1, r = 16776960, o = n * 0.2, c = o * 0.2) {
    super(), this.type = "ArrowHelper", yg === void 0 && (yg = new $t(), yg.setAttribute("position", new Mt([0, 0, 0, 0, 1, 0], 3)), lx = new Md(0, 0.5, 1, 5, 1), lx.translate(0, -0.5, 0)), this.position.copy(t), this.line = new Yl(yg, new Ur({ color: r, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Ti(lx, new Zl({ color: r, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(n, o, c);
  }
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      Rb.set(e.z, 0, -e.x).normalize();
      const t = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(Rb, t);
    }
  }
  setLength(e, t = e * 0.2, n = t * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - t), 1), this.line.updateMatrix(), this.cone.scale.set(n, t, n), this.cone.position.y = e, this.cone.updateMatrix();
  }
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class cz extends js {
  constructor(e = 1) {
    const t = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], n = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], r = new $t();
    r.setAttribute("position", new Mt(t, 3)), r.setAttribute("color", new Mt(n, 3));
    const o = new Ur({ vertexColors: !0, toneMapped: !1 });
    super(r, o), this.type = "AxesHelper";
  }
  setColors(e, t, n) {
    const r = new mt(), o = this.geometry.attributes.color.array;
    return r.set(e), r.toArray(o, 0), r.toArray(o, 3), r.set(t), r.toArray(o, 6), r.toArray(o, 9), r.set(n), r.toArray(o, 12), r.toArray(o, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class fz {
  constructor() {
    this.type = "ShapePath", this.color = new mt(), this.subPaths = [], this.currentPath = null;
  }
  moveTo(e, t) {
    return this.currentPath = new bp(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, t), this;
  }
  lineTo(e, t) {
    return this.currentPath.lineTo(e, t), this;
  }
  quadraticCurveTo(e, t, n, r) {
    return this.currentPath.quadraticCurveTo(e, t, n, r), this;
  }
  bezierCurveTo(e, t, n, r, o, c) {
    return this.currentPath.bezierCurveTo(e, t, n, r, o, c), this;
  }
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  toShapes(e) {
    function t(E) {
      const L = [];
      for (let C = 0, U = E.length; C < U; C++) {
        const Y = E[C], B = new dc();
        B.curves = Y.curves, L.push(B);
      }
      return L;
    }
    function n(E, L) {
      const C = L.length;
      let U = !1;
      for (let Y = C - 1, B = 0; B < C; Y = B++) {
        let H = L[Y], k = L[B], F = k.x - H.x, N = k.y - H.y;
        if (Math.abs(N) > Number.EPSILON) {
          if (N < 0 && (H = L[B], F = -F, k = L[Y], N = -N), E.y < H.y || E.y > k.y)
            continue;
          if (E.y === H.y) {
            if (E.x === H.x)
              return !0;
          } else {
            const X = N * (E.x - H.x) - F * (E.y - H.y);
            if (X === 0)
              return !0;
            if (X < 0)
              continue;
            U = !U;
          }
        } else {
          if (E.y !== H.y)
            continue;
          if (k.x <= E.x && E.x <= H.x || H.x <= E.x && E.x <= k.x)
            return !0;
        }
      }
      return U;
    }
    const r = Ys.isClockWise, o = this.subPaths;
    if (o.length === 0)
      return [];
    let c, f, p;
    const h = [];
    if (o.length === 1)
      return f = o[0], p = new dc(), p.curves = f.curves, h.push(p), h;
    let g = !r(o[0].getPoints());
    g = e ? !g : g;
    const _ = [], x = [];
    let M = [], T = 0, R;
    x[T] = void 0, M[T] = [];
    for (let E = 0, L = o.length; E < L; E++)
      f = o[E], R = f.getPoints(), c = r(R), c = e ? !c : c, c ? (!g && x[T] && T++, x[T] = { s: new dc(), p: R }, x[T].s.curves = f.curves, g && T++, M[T] = []) : M[T].push({ h: f, p: R[0] });
    if (!x[0])
      return t(o);
    if (x.length > 1) {
      let E = !1, L = 0;
      for (let C = 0, U = x.length; C < U; C++)
        _[C] = [];
      for (let C = 0, U = x.length; C < U; C++) {
        const Y = M[C];
        for (let B = 0; B < Y.length; B++) {
          const H = Y[B];
          let k = !0;
          for (let F = 0; F < x.length; F++)
            n(H.p, x[F].p) && (C !== F && L++, k ? (k = !1, _[F].push(H)) : E = !0);
          k && _[C].push(H);
        }
      }
      L > 0 && E === !1 && (M = _);
    }
    let b;
    for (let E = 0, L = x.length; E < L; E++) {
      p = x[E].s, h.push(p), b = M[E];
      for (let C = 0, U = b.length; C < U; C++)
        p.holes.push(b[C].h);
    }
    return h;
  }
}
class dz extends vs {
  // @deprecated, r162
  constructor(e = 1, t = 1, n = 1, r = {}) {
    console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'), super(e, t, { ...r, count: n }), this.isWebGLMultipleRenderTargets = !0;
  }
  get texture() {
    return this.textures;
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: Og
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = Og);
const hz = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: pS,
  AddEquation: Wl,
  AddOperation: Aw,
  AdditiveAnimationBlendMode: bS,
  AdditiveBlending: Ex,
  AgXToneMapping: Dw,
  AlphaFormat: zw,
  AlwaysCompare: nA,
  AlwaysDepth: xw,
  AlwaysStencilFunc: Kx,
  AmbientLight: aR,
  AnimationAction: hR,
  AnimationClip: Pp,
  AnimationLoader: hF,
  AnimationMixer: kF,
  AnimationObjectGroup: HF,
  AnimationUtils: uF,
  ArcCurve: LA,
  ArrayCamera: xA,
  ArrowHelper: uz,
  AttachedBindMode: wx,
  Audio: fR,
  AudioAnalyser: LF,
  AudioContext: JS,
  AudioListener: AF,
  AudioLoader: TF,
  AxesHelper: cz,
  BackSide: Dr,
  BasicDepthPacking: Yw,
  BasicShadowMap: ew,
  BatchedMesh: AA,
  Bone: OS,
  BooleanKeyframeTrack: gc,
  Box2: ZF,
  Box3: Nr,
  Box3Helper: oz,
  BoxGeometry: vc,
  BoxHelper: sz,
  BufferAttribute: Dn,
  BufferGeometry: $t,
  BufferGeometryLoader: cR,
  ByteType: Iw,
  Cache: Uo,
  Camera: Ip,
  CameraHelper: az,
  CanvasTexture: NO,
  CapsuleGeometry: Zg,
  CatmullRomCurve3: PA,
  CineonToneMapping: Lw,
  CircleGeometry: Jg,
  ClampToEdgeWrapping: Ya,
  Clock: QS,
  Color: mt,
  ColorKeyframeTrack: YS,
  ColorManagement: Ln,
  CompressedArrayTexture: PO,
  CompressedCubeTexture: DO,
  CompressedTexture: Yg,
  CompressedTextureLoader: pF,
  ConeGeometry: Qg,
  ConstantAlphaFactor: gw,
  ConstantColorFactor: mw,
  CubeCamera: fA,
  CubeReflectionMapping: Fo,
  CubeRefractionMapping: ql,
  CubeTexture: Op,
  CubeTextureLoader: mF,
  CubeUVReflectionMapping: gd,
  CubicBezierCurve: BS,
  CubicBezierCurve3: DA,
  CubicInterpolant: QA,
  CullFaceBack: Mx,
  CullFaceFront: $b,
  CullFaceFrontBack: _P,
  CullFaceNone: Kb,
  Curve: ys,
  CurvePath: UA,
  CustomBlending: tw,
  CustomToneMapping: Pw,
  CylinderGeometry: Md,
  Cylindrical: jF,
  Data3DTexture: RS,
  DataArrayTexture: Vg,
  DataTexture: Xl,
  DataTextureLoader: vF,
  DataUtils: RD,
  DecrementStencilOp: LP,
  DecrementWrapStencilOp: DP,
  DefaultLoadingManager: eR,
  DepthFormat: uc,
  DepthStencilFormat: dd,
  DepthTexture: DS,
  DetachedBindMode: Uw,
  DirectionalLight: rR,
  DirectionalLightHelper: rz,
  DiscreteInterpolant: KA,
  DisplayP3ColorSpace: Hg,
  DodecahedronGeometry: Kg,
  DoubleSide: ks,
  DstAlphaFactor: cw,
  DstColorFactor: dw,
  DynamicCopyUsage: YP,
  DynamicDrawUsage: VP,
  DynamicReadUsage: WP,
  EdgesGeometry: IA,
  EllipseCurve: jg,
  EqualCompare: Kw,
  EqualDepth: Mw,
  EqualStencilFunc: OP,
  EquirectangularReflectionMapping: fp,
  EquirectangularRefractionMapping: dp,
  Euler: _a,
  EventDispatcher: Ho,
  ExtrudeGeometry: ey,
  FileLoader: zo,
  Float16BufferAttribute: UD,
  Float32BufferAttribute: Mt,
  FloatType: ja,
  Fog: Wg,
  FogExp2: Gg,
  FramebufferTexture: LO,
  FrontSide: Oo,
  Frustum: Fp,
  GLBufferAttribute: qF,
  GLSL1: ZP,
  GLSL3: $x,
  GreaterCompare: $w,
  GreaterDepth: Tw,
  GreaterEqualCompare: tA,
  GreaterEqualDepth: Ew,
  GreaterEqualStencilFunc: HP,
  GreaterStencilFunc: zP,
  GridHelper: nz,
  Group: od,
  HalfFloatType: mp,
  HemisphereLight: tR,
  HemisphereLightHelper: tz,
  IcosahedronGeometry: ty,
  ImageBitmapLoader: EF,
  ImageLoader: Dp,
  ImageUtils: sA,
  IncrementStencilOp: CP,
  IncrementWrapStencilOp: PP,
  InstancedBufferAttribute: md,
  InstancedBufferGeometry: uR,
  InstancedInterleavedBuffer: XF,
  InstancedMesh: wA,
  Int16BufferAttribute: DD,
  Int32BufferAttribute: ND,
  Int8BufferAttribute: CD,
  IntType: gS,
  InterleavedBuffer: Xg,
  InterleavedBufferAttribute: pc,
  Interpolant: kp,
  InterpolateDiscrete: vp,
  InterpolateLinear: gp,
  InterpolateSmooth: wg,
  InvertStencilOp: NP,
  KeepStencilOp: ec,
  KeyframeTrack: _s,
  LOD: TA,
  LatheGeometry: Bp,
  Layers: fc,
  LessCompare: Qw,
  LessDepth: Sw,
  LessEqualCompare: wS,
  LessEqualDepth: cp,
  LessEqualStencilFunc: FP,
  LessStencilFunc: IP,
  Light: Ql,
  LightProbe: lR,
  Line: Yl,
  Line3: JF,
  LineBasicMaterial: Ur,
  LineCurve: HS,
  LineCurve3: NA,
  LineDashedMaterial: jA,
  LineLoop: RA,
  LineSegments: js,
  LinearDisplayP3ColorSpace: Up,
  LinearFilter: Ei,
  LinearInterpolant: qS,
  LinearMipMapLinearFilter: EP,
  LinearMipMapNearestFilter: MP,
  LinearMipmapLinearFilter: Gs,
  LinearMipmapNearestFilter: sp,
  LinearSRGBColorSpace: Bo,
  LinearToneMapping: Rw,
  LinearTransfer: _p,
  Loader: $r,
  LoaderUtils: sS,
  LoadingManager: jS,
  LoopOnce: Ww,
  LoopPingPong: qw,
  LoopRepeat: Xw,
  LuminanceAlphaFormat: Vw,
  LuminanceFormat: Hw,
  MOUSE: gP,
  Material: ir,
  MaterialLoader: ly,
  MathUtils: dD,
  Matrix3: Yt,
  Matrix4: Ht,
  MaxEquation: aw,
  Mesh: Ti,
  MeshBasicMaterial: Zl,
  MeshDepthMaterial: NS,
  MeshDistanceMaterial: US,
  MeshLambertMaterial: qA,
  MeshMatcapMaterial: YA,
  MeshNormalMaterial: XA,
  MeshPhongMaterial: GA,
  MeshPhysicalMaterial: kA,
  MeshStandardMaterial: WS,
  MeshToonMaterial: WA,
  MinEquation: rw,
  MirroredRepeatWrapping: pp,
  MixOperation: ww,
  MultiplyBlending: bx,
  MultiplyOperation: Np,
  NearestFilter: ki,
  NearestMipMapLinearFilter: SP,
  NearestMipMapNearestFilter: xP,
  NearestMipmapLinearFilter: rd,
  NearestMipmapNearestFilter: mS,
  NeutralToneMapping: Nw,
  NeverCompare: Jw,
  NeverDepth: _w,
  NeverStencilFunc: UP,
  NoBlending: Io,
  NoColorSpace: Do,
  NoToneMapping: Xs,
  NormalAnimationBlendMode: Bg,
  NormalBlending: lc,
  NotEqualCompare: eA,
  NotEqualDepth: bw,
  NotEqualStencilFunc: BP,
  NumberKeyframeTrack: Cp,
  Object3D: xn,
  ObjectLoader: SF,
  ObjectSpaceNormalMap: Zw,
  OctahedronGeometry: Hp,
  OneFactor: ow,
  OneMinusConstantAlphaFactor: yw,
  OneMinusConstantColorFactor: vw,
  OneMinusDstAlphaFactor: fw,
  OneMinusDstColorFactor: hw,
  OneMinusSrcAlphaFactor: Lg,
  OneMinusSrcColorFactor: uw,
  OrthographicCamera: zp,
  P3Primaries: Sp,
  PCFShadowMap: Fg,
  PCFSoftShadowMap: ap,
  PMREMGenerator: eS,
  Path: bp,
  PerspectiveCamera: Vi,
  Plane: Gl,
  PlaneGeometry: xd,
  PlaneHelper: lz,
  PointLight: iR,
  PointLightHelper: $F,
  Points: CA,
  PointsMaterial: FS,
  PolarGridHelper: iz,
  PolyhedronGeometry: Jl,
  PositionalAudio: CF,
  PropertyBinding: vn,
  PropertyMixer: dR,
  QuadraticBezierCurve: VS,
  QuadraticBezierCurve3: kS,
  Quaternion: Kr,
  QuaternionKeyframeTrack: Ed,
  QuaternionLinearInterpolant: $A,
  RED_GREEN_RGTC2_Format: Jx,
  RED_RGTC1_Format: Gw,
  REVISION: Og,
  RGBADepthPacking: jw,
  RGBAFormat: Qr,
  RGBAIntegerFormat: ES,
  RGBA_ASTC_10x10_Format: Wx,
  RGBA_ASTC_10x5_Format: Vx,
  RGBA_ASTC_10x6_Format: kx,
  RGBA_ASTC_10x8_Format: Gx,
  RGBA_ASTC_12x10_Format: Xx,
  RGBA_ASTC_12x12_Format: qx,
  RGBA_ASTC_4x4_Format: Nx,
  RGBA_ASTC_5x4_Format: Ux,
  RGBA_ASTC_5x5_Format: Ix,
  RGBA_ASTC_6x5_Format: Ox,
  RGBA_ASTC_6x6_Format: Fx,
  RGBA_ASTC_8x5_Format: zx,
  RGBA_ASTC_8x6_Format: Bx,
  RGBA_ASTC_8x8_Format: Hx,
  RGBA_BPTC_Format: bg,
  RGBA_ETC2_EAC_Format: Dx,
  RGBA_PVRTC_2BPPV1_Format: Lx,
  RGBA_PVRTC_4BPPV1_Format: Cx,
  RGBA_S3TC_DXT1_Format: Mg,
  RGBA_S3TC_DXT3_Format: Eg,
  RGBA_S3TC_DXT5_Format: Tg,
  RGBFormat: Bw,
  RGB_BPTC_SIGNED_Format: Yx,
  RGB_BPTC_UNSIGNED_Format: jx,
  RGB_ETC1_Format: TS,
  RGB_ETC2_Format: Px,
  RGB_PVRTC_2BPPV1_Format: Rx,
  RGB_PVRTC_4BPPV1_Format: Ax,
  RGB_S3TC_DXT1_Format: Sg,
  RGFormat: kw,
  RGIntegerFormat: MS,
  RawShaderMaterial: VA,
  Ray: _d,
  Raycaster: pR,
  Rec709Primaries: xp,
  RectAreaLight: sR,
  RedFormat: xS,
  RedIntegerFormat: SS,
  ReinhardToneMapping: Cw,
  RenderTarget: oA,
  RepeatWrapping: hp,
  ReplaceStencilOp: RP,
  ReverseSubtractEquation: iw,
  RingGeometry: ny,
  SIGNED_RED_GREEN_RGTC2_Format: Qx,
  SIGNED_RED_RGTC1_Format: Zx,
  SRGBColorSpace: qa,
  SRGBTransfer: Vn,
  Scene: Pg,
  ShaderChunk: Kt,
  ShaderLib: ms,
  ShaderMaterial: gs,
  ShadowMaterial: HA,
  Shape: dc,
  ShapeGeometry: iy,
  ShapePath: fz,
  ShapeUtils: Ys,
  ShortType: Ow,
  Skeleton: qg,
  SkeletonHelper: KF,
  SkinnedMesh: bA,
  Source: sc,
  Sphere: yr,
  SphereGeometry: Vp,
  Spherical: YF,
  SphericalHarmonics3: oR,
  SplineCurve: GS,
  SpotLight: nR,
  SpotLightHelper: QF,
  Sprite: EA,
  SpriteMaterial: IS,
  SrcAlphaFactor: Cg,
  SrcAlphaSaturateFactor: pw,
  SrcColorFactor: lw,
  StaticCopyUsage: qP,
  StaticDrawUsage: Mp,
  StaticReadUsage: GP,
  StereoCamera: bF,
  StreamCopyUsage: jP,
  StreamDrawUsage: kP,
  StreamReadUsage: XP,
  StringKeyframeTrack: yc,
  SubtractEquation: nw,
  SubtractiveBlending: Tx,
  TOUCH: yP,
  TangentSpaceNormalMap: jl,
  TetrahedronGeometry: ry,
  Texture: ai,
  TextureLoader: gF,
  TorusGeometry: ay,
  TorusKnotGeometry: sy,
  Triangle: ga,
  TriangleFanDrawMode: wP,
  TriangleStripDrawMode: bP,
  TrianglesDrawMode: TP,
  TubeGeometry: oy,
  UVMapping: zg,
  Uint16BufferAttribute: CS,
  Uint32BufferAttribute: LS,
  Uint8BufferAttribute: LD,
  Uint8ClampedBufferAttribute: PD,
  Uniform: eM,
  UniformsGroup: WF,
  UniformsLib: at,
  UniformsUtils: cA,
  UnsignedByteType: qs,
  UnsignedInt248Type: yd,
  UnsignedInt5999Type: Fw,
  UnsignedIntType: hc,
  UnsignedShort4444Type: yS,
  UnsignedShort5551Type: _S,
  UnsignedShortType: vS,
  VSMShadowMap: ps,
  Vector2: De,
  Vector3: q,
  Vector4: Pn,
  VectorKeyframeTrack: Lp,
  VideoTexture: CO,
  WebGL3DRenderTarget: yD,
  WebGLArrayRenderTarget: gD,
  WebGLCoordinateSystem: Ws,
  WebGLCubeRenderTarget: dA,
  WebGLMultipleRenderTargets: dz,
  WebGLRenderTarget: vs,
  WebGLRenderer: SA,
  WebGLUtils: _A,
  WebGPUCoordinateSystem: Ep,
  WireframeGeometry: BA,
  WrapAroundEnding: yp,
  ZeroCurvatureEnding: rc,
  ZeroFactor: sw,
  ZeroSlopeEnding: ac,
  ZeroStencilOp: AP,
  createCanvasElement: rA
}, Symbol.toStringTag, { value: "Module" }));
function vR(s) {
  return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
}
var lS = { exports: {} }, Vl = {};
/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Cb;
function pz() {
  return Cb || (Cb = 1, Vl.ConcurrentRoot = 1, Vl.ContinuousEventPriority = 4, Vl.DefaultEventPriority = 16, Vl.DiscreteEventPriority = 1, Vl.IdleEventPriority = 536870912, Vl.LegacyRoot = 0), Vl;
}
var kl = {};
/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Lb;
function mz() {
  return Lb || (Lb = 1, process.env.NODE_ENV !== "production" && function() {
    var s = (
      /*                        */
      1
    ), e = (
      /*            */
      4
    ), t = (
      /*                    */
      16
    ), n = (
      /*                       */
      536870912
    ), r = s, o = e, c = t, f = n, p = 0, h = 1;
    kl.ConcurrentRoot = h, kl.ContinuousEventPriority = o, kl.DefaultEventPriority = c, kl.DiscreteEventPriority = r, kl.IdleEventPriority = f, kl.LegacyRoot = p;
  }()), kl;
}
process.env.NODE_ENV === "production" ? lS.exports = pz() : lS.exports = mz();
var ud = lS.exports;
function vz(s) {
  let e;
  const t = /* @__PURE__ */ new Set(), n = (h, g) => {
    const _ = typeof h == "function" ? h(e) : h;
    if (_ !== e) {
      const x = e;
      e = g ? _ : Object.assign({}, e, _), t.forEach((M) => M(e, x));
    }
  }, r = () => e, o = (h, g = r, _ = Object.is) => {
    console.warn("[DEPRECATED] Please use `subscribeWithSelector` middleware");
    let x = g(e);
    function M() {
      const T = g(e);
      if (!_(x, T)) {
        const R = x;
        h(x = T, R);
      }
    }
    return t.add(M), () => t.delete(M);
  }, p = { setState: n, getState: r, subscribe: (h, g, _) => g || _ ? o(h, g, _) : (t.add(h), () => t.delete(h)), destroy: () => t.clear() };
  return e = s(n, r, p), p;
}
const gz = typeof window > "u" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent), Pb = gz ? cd : mP;
function yz(s) {
  const e = typeof s == "function" ? vz(s) : s, t = (n = e.getState, r = Object.is) => {
    const [, o] = hP((b) => b + 1, 0), c = e.getState(), f = Po(c), p = Po(n), h = Po(r), g = Po(!1), _ = Po();
    _.current === void 0 && (_.current = n(c));
    let x, M = !1;
    (f.current !== c || p.current !== n || h.current !== r || g.current) && (x = n(c), M = !r(_.current, x)), Pb(() => {
      M && (_.current = x), f.current = c, p.current = n, h.current = r, g.current = !1;
    });
    const T = Po(c);
    Pb(() => {
      const b = () => {
        try {
          const L = e.getState(), C = p.current(L);
          h.current(_.current, C) || (f.current = L, _.current = C, o());
        } catch {
          g.current = !0, o();
        }
      }, E = e.subscribe(b);
      return e.getState() !== T.current && b(), E;
    }, []);
    const R = M ? x : _.current;
    return pP(R), R;
  };
  return Object.assign(t, e), t[Symbol.iterator] = function() {
    console.warn("[useStore, api] = create() is deprecated and will be removed in v4");
    const n = [t, e];
    return {
      next() {
        const r = n.length <= 0;
        return { value: n.shift(), done: r };
      }
    };
  }, t;
}
var uS = { exports: {} }, cS = { exports: {} }, ux = {};
/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Db;
function _z() {
  return Db || (Db = 1, function(s) {
    function e(Q, ue) {
      var ne = Q.length;
      Q.push(ue);
      e:
        for (; 0 < ne; ) {
          var be = ne - 1 >>> 1, Oe = Q[be];
          if (0 < r(Oe, ue))
            Q[be] = ue, Q[ne] = Oe, ne = be;
          else
            break e;
        }
    }
    function t(Q) {
      return Q.length === 0 ? null : Q[0];
    }
    function n(Q) {
      if (Q.length === 0)
        return null;
      var ue = Q[0], ne = Q.pop();
      if (ne !== ue) {
        Q[0] = ne;
        e:
          for (var be = 0, Oe = Q.length, ht = Oe >>> 1; be < ht; ) {
            var ve = 2 * (be + 1) - 1, Ue = Q[ve], Ye = ve + 1, Ge = Q[Ye];
            if (0 > r(Ue, ne))
              Ye < Oe && 0 > r(Ge, Ue) ? (Q[be] = Ge, Q[Ye] = ne, be = Ye) : (Q[be] = Ue, Q[ve] = ne, be = ve);
            else if (Ye < Oe && 0 > r(Ge, ne))
              Q[be] = Ge, Q[Ye] = ne, be = Ye;
            else
              break e;
          }
      }
      return ue;
    }
    function r(Q, ue) {
      var ne = Q.sortIndex - ue.sortIndex;
      return ne !== 0 ? ne : Q.id - ue.id;
    }
    if (typeof performance == "object" && typeof performance.now == "function") {
      var o = performance;
      s.unstable_now = function() {
        return o.now();
      };
    } else {
      var c = Date, f = c.now();
      s.unstable_now = function() {
        return c.now() - f;
      };
    }
    var p = [], h = [], g = 1, _ = null, x = 3, M = !1, T = !1, R = !1, b = typeof setTimeout == "function" ? setTimeout : null, E = typeof clearTimeout == "function" ? clearTimeout : null, L = typeof setImmediate < "u" ? setImmediate : null;
    typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
    function C(Q) {
      for (var ue = t(h); ue !== null; ) {
        if (ue.callback === null)
          n(h);
        else if (ue.startTime <= Q)
          n(h), ue.sortIndex = ue.expirationTime, e(p, ue);
        else
          break;
        ue = t(h);
      }
    }
    function U(Q) {
      if (R = !1, C(Q), !T)
        if (t(p) !== null)
          T = !0, Me(Y);
        else {
          var ue = t(h);
          ue !== null && Fe(U, ue.startTime - Q);
        }
    }
    function Y(Q, ue) {
      T = !1, R && (R = !1, E(k), k = -1), M = !0;
      var ne = x;
      try {
        for (C(ue), _ = t(p); _ !== null && (!(_.expirationTime > ue) || Q && !X()); ) {
          var be = _.callback;
          if (typeof be == "function") {
            _.callback = null, x = _.priorityLevel;
            var Oe = be(_.expirationTime <= ue);
            ue = s.unstable_now(), typeof Oe == "function" ? _.callback = Oe : _ === t(p) && n(p), C(ue);
          } else
            n(p);
          _ = t(p);
        }
        if (_ !== null)
          var ht = !0;
        else {
          var ve = t(h);
          ve !== null && Fe(U, ve.startTime - ue), ht = !1;
        }
        return ht;
      } finally {
        _ = null, x = ne, M = !1;
      }
    }
    var B = !1, H = null, k = -1, F = 5, N = -1;
    function X() {
      return !(s.unstable_now() - N < F);
    }
    function K() {
      if (H !== null) {
        var Q = s.unstable_now();
        N = Q;
        var ue = !0;
        try {
          ue = H(!0, Q);
        } finally {
          ue ? J() : (B = !1, H = null);
        }
      } else
        B = !1;
    }
    var J;
    if (typeof L == "function")
      J = function() {
        L(K);
      };
    else if (typeof MessageChannel < "u") {
      var ae = new MessageChannel(), _e = ae.port2;
      ae.port1.onmessage = K, J = function() {
        _e.postMessage(null);
      };
    } else
      J = function() {
        b(K, 0);
      };
    function Me(Q) {
      H = Q, B || (B = !0, J());
    }
    function Fe(Q, ue) {
      k = b(function() {
        Q(s.unstable_now());
      }, ue);
    }
    s.unstable_IdlePriority = 5, s.unstable_ImmediatePriority = 1, s.unstable_LowPriority = 4, s.unstable_NormalPriority = 3, s.unstable_Profiling = null, s.unstable_UserBlockingPriority = 2, s.unstable_cancelCallback = function(Q) {
      Q.callback = null;
    }, s.unstable_continueExecution = function() {
      T || M || (T = !0, Me(Y));
    }, s.unstable_forceFrameRate = function(Q) {
      0 > Q || 125 < Q ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : F = 0 < Q ? Math.floor(1e3 / Q) : 5;
    }, s.unstable_getCurrentPriorityLevel = function() {
      return x;
    }, s.unstable_getFirstCallbackNode = function() {
      return t(p);
    }, s.unstable_next = function(Q) {
      switch (x) {
        case 1:
        case 2:
        case 3:
          var ue = 3;
          break;
        default:
          ue = x;
      }
      var ne = x;
      x = ue;
      try {
        return Q();
      } finally {
        x = ne;
      }
    }, s.unstable_pauseExecution = function() {
    }, s.unstable_requestPaint = function() {
    }, s.unstable_runWithPriority = function(Q, ue) {
      switch (Q) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          Q = 3;
      }
      var ne = x;
      x = Q;
      try {
        return ue();
      } finally {
        x = ne;
      }
    }, s.unstable_scheduleCallback = function(Q, ue, ne) {
      var be = s.unstable_now();
      switch (typeof ne == "object" && ne !== null ? (ne = ne.delay, ne = typeof ne == "number" && 0 < ne ? be + ne : be) : ne = be, Q) {
        case 1:
          var Oe = -1;
          break;
        case 2:
          Oe = 250;
          break;
        case 5:
          Oe = 1073741823;
          break;
        case 4:
          Oe = 1e4;
          break;
        default:
          Oe = 5e3;
      }
      return Oe = ne + Oe, Q = { id: g++, callback: ue, priorityLevel: Q, startTime: ne, expirationTime: Oe, sortIndex: -1 }, ne > be ? (Q.sortIndex = ne, e(h, Q), t(p) === null && Q === t(h) && (R ? (E(k), k = -1) : R = !0, Fe(U, ne - be))) : (Q.sortIndex = Oe, e(p, Q), T || M || (T = !0, Me(Y))), Q;
    }, s.unstable_shouldYield = X, s.unstable_wrapCallback = function(Q) {
      var ue = x;
      return function() {
        var ne = x;
        x = ue;
        try {
          return Q.apply(this, arguments);
        } finally {
          x = ne;
        }
      };
    };
  }(ux)), ux;
}
var cx = {};
/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Nb;
function xz() {
  return Nb || (Nb = 1, function(s) {
    process.env.NODE_ENV !== "production" && function() {
      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
      var e = !1, t = !1, n = 5;
      function r(Te, Xe) {
        var ut = Te.length;
        Te.push(Xe), f(Te, Xe, ut);
      }
      function o(Te) {
        return Te.length === 0 ? null : Te[0];
      }
      function c(Te) {
        if (Te.length === 0)
          return null;
        var Xe = Te[0], ut = Te.pop();
        return ut !== Xe && (Te[0] = ut, p(Te, ut, 0)), Xe;
      }
      function f(Te, Xe, ut) {
        for (var wt = ut; wt > 0; ) {
          var et = wt - 1 >>> 1, en = Te[et];
          if (h(en, Xe) > 0)
            Te[et] = Xe, Te[wt] = en, wt = et;
          else
            return;
        }
      }
      function p(Te, Xe, ut) {
        for (var wt = ut, et = Te.length, en = et >>> 1; wt < en; ) {
          var ot = (wt + 1) * 2 - 1, G = Te[ot], de = ot + 1, qe = Te[de];
          if (h(G, Xe) < 0)
            de < et && h(qe, G) < 0 ? (Te[wt] = qe, Te[de] = Xe, wt = de) : (Te[wt] = G, Te[ot] = Xe, wt = ot);
          else if (de < et && h(qe, Xe) < 0)
            Te[wt] = qe, Te[de] = Xe, wt = de;
          else
            return;
        }
      }
      function h(Te, Xe) {
        var ut = Te.sortIndex - Xe.sortIndex;
        return ut !== 0 ? ut : Te.id - Xe.id;
      }
      var g = 1, _ = 2, x = 3, M = 4, T = 5;
      function R(Te, Xe) {
      }
      var b = typeof performance == "object" && typeof performance.now == "function";
      if (b) {
        var E = performance;
        s.unstable_now = function() {
          return E.now();
        };
      } else {
        var L = Date, C = L.now();
        s.unstable_now = function() {
          return L.now() - C;
        };
      }
      var U = 1073741823, Y = -1, B = 250, H = 5e3, k = 1e4, F = U, N = [], X = [], K = 1, J = null, ae = x, _e = !1, Me = !1, Fe = !1, Q = typeof setTimeout == "function" ? setTimeout : null, ue = typeof clearTimeout == "function" ? clearTimeout : null, ne = typeof setImmediate < "u" ? setImmediate : null;
      typeof navigator < "u" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function be(Te) {
        for (var Xe = o(X); Xe !== null; ) {
          if (Xe.callback === null)
            c(X);
          else if (Xe.startTime <= Te)
            c(X), Xe.sortIndex = Xe.expirationTime, r(N, Xe);
          else
            return;
          Xe = o(X);
        }
      }
      function Oe(Te) {
        if (Fe = !1, be(Te), !Me)
          if (o(N) !== null)
            Me = !0, bt(ht);
          else {
            var Xe = o(X);
            Xe !== null && Je(Oe, Xe.startTime - Te);
          }
      }
      function ht(Te, Xe) {
        Me = !1, Fe && (Fe = !1, ft()), _e = !0;
        var ut = ae;
        try {
          var wt;
          if (!t)
            return ve(Te, Xe);
        } finally {
          J = null, ae = ut, _e = !1;
        }
      }
      function ve(Te, Xe) {
        var ut = Xe;
        for (be(ut), J = o(N); J !== null && !e && !(J.expirationTime > ut && (!Te || se())); ) {
          var wt = J.callback;
          if (typeof wt == "function") {
            J.callback = null, ae = J.priorityLevel;
            var et = J.expirationTime <= ut, en = wt(et);
            ut = s.unstable_now(), typeof en == "function" ? J.callback = en : J === o(N) && c(N), be(ut);
          } else
            c(N);
          J = o(N);
        }
        if (J !== null)
          return !0;
        var ot = o(X);
        return ot !== null && Je(Oe, ot.startTime - ut), !1;
      }
      function Ue(Te, Xe) {
        switch (Te) {
          case g:
          case _:
          case x:
          case M:
          case T:
            break;
          default:
            Te = x;
        }
        var ut = ae;
        ae = Te;
        try {
          return Xe();
        } finally {
          ae = ut;
        }
      }
      function Ye(Te) {
        var Xe;
        switch (ae) {
          case g:
          case _:
          case x:
            Xe = x;
            break;
          default:
            Xe = ae;
            break;
        }
        var ut = ae;
        ae = Xe;
        try {
          return Te();
        } finally {
          ae = ut;
        }
      }
      function Ge(Te) {
        var Xe = ae;
        return function() {
          var ut = ae;
          ae = Xe;
          try {
            return Te.apply(this, arguments);
          } finally {
            ae = ut;
          }
        };
      }
      function gt(Te, Xe, ut) {
        var wt = s.unstable_now(), et;
        if (typeof ut == "object" && ut !== null) {
          var en = ut.delay;
          typeof en == "number" && en > 0 ? et = wt + en : et = wt;
        } else
          et = wt;
        var ot;
        switch (Te) {
          case g:
            ot = Y;
            break;
          case _:
            ot = B;
            break;
          case T:
            ot = F;
            break;
          case M:
            ot = k;
            break;
          case x:
          default:
            ot = H;
            break;
        }
        var G = et + ot, de = {
          id: K++,
          callback: Xe,
          priorityLevel: Te,
          startTime: et,
          expirationTime: G,
          sortIndex: -1
        };
        return et > wt ? (de.sortIndex = et, r(X, de), o(N) === null && de === o(X) && (Fe ? ft() : Fe = !0, Je(Oe, et - wt))) : (de.sortIndex = G, r(N, de), !Me && !_e && (Me = !0, bt(ht))), de;
      }
      function Pt() {
      }
      function Dt() {
        !Me && !_e && (Me = !0, bt(ht));
      }
      function ie() {
        return o(N);
      }
      function Re(Te) {
        Te.callback = null;
      }
      function Se() {
        return ae;
      }
      var He = !1, Be = null, Ve = -1, W = n, O = -1;
      function se() {
        var Te = s.unstable_now() - O;
        return !(Te < W);
      }
      function xe() {
      }
      function Ae(Te) {
        if (Te < 0 || Te > 125) {
          console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
          return;
        }
        Te > 0 ? W = Math.floor(1e3 / Te) : W = n;
      }
      var Pe = function() {
        if (Be !== null) {
          var Te = s.unstable_now();
          O = Te;
          var Xe = !0, ut = !0;
          try {
            ut = Be(Xe, Te);
          } finally {
            ut ? st() : (He = !1, Be = null);
          }
        } else
          He = !1;
      }, st;
      if (typeof ne == "function")
        st = function() {
          ne(Pe);
        };
      else if (typeof MessageChannel < "u") {
        var Ne = new MessageChannel(), St = Ne.port2;
        Ne.port1.onmessage = Pe, st = function() {
          St.postMessage(null);
        };
      } else
        st = function() {
          Q(Pe, 0);
        };
      function bt(Te) {
        Be = Te, He || (He = !0, st());
      }
      function Je(Te, Xe) {
        Ve = Q(function() {
          Te(s.unstable_now());
        }, Xe);
      }
      function ft() {
        ue(Ve), Ve = -1;
      }
      var Ft = xe, vt = null;
      s.unstable_IdlePriority = T, s.unstable_ImmediatePriority = g, s.unstable_LowPriority = M, s.unstable_NormalPriority = x, s.unstable_Profiling = vt, s.unstable_UserBlockingPriority = _, s.unstable_cancelCallback = Re, s.unstable_continueExecution = Dt, s.unstable_forceFrameRate = Ae, s.unstable_getCurrentPriorityLevel = Se, s.unstable_getFirstCallbackNode = ie, s.unstable_next = Ye, s.unstable_pauseExecution = Pt, s.unstable_requestPaint = Ft, s.unstable_runWithPriority = Ue, s.unstable_scheduleCallback = gt, s.unstable_shouldYield = se, s.unstable_wrapCallback = Ge, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }();
  }(cx)), cx;
}
process.env.NODE_ENV === "production" ? cS.exports = _z() : cS.exports = xz();
var Ng = cS.exports;
/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fx, Ub;
function Sz() {
  return Ub || (Ub = 1, fx = function(e) {
    var t = {}, n = Qb, r = Ng, o = Object.assign;
    function c(l) {
      for (var u = "https://reactjs.org/docs/error-decoder.html?invariant=" + l, v = 1; v < arguments.length; v++)
        u += "&args[]=" + encodeURIComponent(arguments[v]);
      return "Minified React error #" + l + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
    }
    var f = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, p = Symbol.for("react.element"), h = Symbol.for("react.portal"), g = Symbol.for("react.fragment"), _ = Symbol.for("react.strict_mode"), x = Symbol.for("react.profiler"), M = Symbol.for("react.provider"), T = Symbol.for("react.context"), R = Symbol.for("react.forward_ref"), b = Symbol.for("react.suspense"), E = Symbol.for("react.suspense_list"), L = Symbol.for("react.memo"), C = Symbol.for("react.lazy"), U = Symbol.for("react.offscreen"), Y = Symbol.iterator;
    function B(l) {
      return l === null || typeof l != "object" ? null : (l = Y && l[Y] || l["@@iterator"], typeof l == "function" ? l : null);
    }
    function H(l) {
      if (l == null)
        return null;
      if (typeof l == "function")
        return l.displayName || l.name || null;
      if (typeof l == "string")
        return l;
      switch (l) {
        case g:
          return "Fragment";
        case h:
          return "Portal";
        case x:
          return "Profiler";
        case _:
          return "StrictMode";
        case b:
          return "Suspense";
        case E:
          return "SuspenseList";
      }
      if (typeof l == "object")
        switch (l.$$typeof) {
          case T:
            return (l.displayName || "Context") + ".Consumer";
          case M:
            return (l._context.displayName || "Context") + ".Provider";
          case R:
            var u = l.render;
            return l = l.displayName, l || (l = u.displayName || u.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l;
          case L:
            return u = l.displayName || null, u !== null ? u : H(l.type) || "Memo";
          case C:
            u = l._payload, l = l._init;
            try {
              return H(l(u));
            } catch {
            }
        }
      return null;
    }
    function k(l) {
      var u = l.type;
      switch (l.tag) {
        case 24:
          return "Cache";
        case 9:
          return (u.displayName || "Context") + ".Consumer";
        case 10:
          return (u._context.displayName || "Context") + ".Provider";
        case 18:
          return "DehydratedFragment";
        case 11:
          return l = u.render, l = l.displayName || l.name || "", u.displayName || (l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef");
        case 7:
          return "Fragment";
        case 5:
          return u;
        case 4:
          return "Portal";
        case 3:
          return "Root";
        case 6:
          return "Text";
        case 16:
          return H(u);
        case 8:
          return u === _ ? "StrictMode" : "Mode";
        case 22:
          return "Offscreen";
        case 12:
          return "Profiler";
        case 21:
          return "Scope";
        case 13:
          return "Suspense";
        case 19:
          return "SuspenseList";
        case 25:
          return "TracingMarker";
        case 1:
        case 0:
        case 17:
        case 2:
        case 14:
        case 15:
          if (typeof u == "function")
            return u.displayName || u.name || null;
          if (typeof u == "string")
            return u;
      }
      return null;
    }
    function F(l) {
      var u = l, v = l;
      if (l.alternate)
        for (; u.return; )
          u = u.return;
      else {
        l = u;
        do
          u = l, u.flags & 4098 && (v = u.return), l = u.return;
        while (l);
      }
      return u.tag === 3 ? v : null;
    }
    function N(l) {
      if (F(l) !== l)
        throw Error(c(188));
    }
    function X(l) {
      var u = l.alternate;
      if (!u) {
        if (u = F(l), u === null)
          throw Error(c(188));
        return u !== l ? null : l;
      }
      for (var v = l, S = u; ; ) {
        var A = v.return;
        if (A === null)
          break;
        var D = A.alternate;
        if (D === null) {
          if (S = A.return, S !== null) {
            v = S;
            continue;
          }
          break;
        }
        if (A.child === D.child) {
          for (D = A.child; D; ) {
            if (D === v)
              return N(A), l;
            if (D === S)
              return N(A), u;
            D = D.sibling;
          }
          throw Error(c(188));
        }
        if (v.return !== S.return)
          v = A, S = D;
        else {
          for (var j = !1, ee = A.child; ee; ) {
            if (ee === v) {
              j = !0, v = A, S = D;
              break;
            }
            if (ee === S) {
              j = !0, S = A, v = D;
              break;
            }
            ee = ee.sibling;
          }
          if (!j) {
            for (ee = D.child; ee; ) {
              if (ee === v) {
                j = !0, v = D, S = A;
                break;
              }
              if (ee === S) {
                j = !0, S = D, v = A;
                break;
              }
              ee = ee.sibling;
            }
            if (!j)
              throw Error(c(189));
          }
        }
        if (v.alternate !== S)
          throw Error(c(190));
      }
      if (v.tag !== 3)
        throw Error(c(188));
      return v.stateNode.current === v ? l : u;
    }
    function K(l) {
      return l = X(l), l !== null ? J(l) : null;
    }
    function J(l) {
      if (l.tag === 5 || l.tag === 6)
        return l;
      for (l = l.child; l !== null; ) {
        var u = J(l);
        if (u !== null)
          return u;
        l = l.sibling;
      }
      return null;
    }
    function ae(l) {
      if (l.tag === 5 || l.tag === 6)
        return l;
      for (l = l.child; l !== null; ) {
        if (l.tag !== 4) {
          var u = ae(l);
          if (u !== null)
            return u;
        }
        l = l.sibling;
      }
      return null;
    }
    var _e = Array.isArray, Me = e.getPublicInstance, Fe = e.getRootHostContext, Q = e.getChildHostContext, ue = e.prepareForCommit, ne = e.resetAfterCommit, be = e.createInstance, Oe = e.appendInitialChild, ht = e.finalizeInitialChildren, ve = e.prepareUpdate, Ue = e.shouldSetTextContent, Ye = e.createTextInstance, Ge = e.scheduleTimeout, gt = e.cancelTimeout, Pt = e.noTimeout, Dt = e.isPrimaryRenderer, ie = e.supportsMutation, Re = e.supportsPersistence, Se = e.supportsHydration, He = e.getInstanceFromNode, Be = e.preparePortalMount, Ve = e.getCurrentEventPriority, W = e.detachDeletedInstance, O = e.supportsMicrotasks, se = e.scheduleMicrotask, xe = e.supportsTestSelectors, Ae = e.findFiberRoot, Pe = e.getBoundingRect, st = e.getTextContent, Ne = e.isHiddenSubtree, St = e.matchAccessibilityRole, bt = e.setFocusIfFocusable, Je = e.setupIntersectionObserver, ft = e.appendChild, Ft = e.appendChildToContainer, vt = e.commitTextUpdate, Te = e.commitMount, Xe = e.commitUpdate, ut = e.insertBefore, wt = e.insertInContainerBefore, et = e.removeChild, en = e.removeChildFromContainer, ot = e.resetTextContent, G = e.hideInstance, de = e.hideTextInstance, qe = e.unhideInstance, Ke = e.unhideTextInstance, Ze = e.clearContainer, bn = e.cloneInstance, an = e.createContainerChildSet, gn = e.appendChildToContainerChildSet, si = e.finalizeContainerChildren, _t = e.replaceContainerChildren, Yn = e.cloneHiddenInstance, fi = e.cloneHiddenTextInstance, Gi = e.canHydrateInstance, rr = e.canHydrateTextInstance, Wi = e.canHydrateSuspenseInstance, _c = e.isSuspenseInstancePending, _r = e.isSuspenseInstanceFallback, Zs = e.registerSuspenseInstanceRetry, xa = e.getNextHydratableSibling, xc = e.getFirstHydratableChild, xs = e.getFirstHydratableChildWithinContainer, Oi = e.getFirstHydratableChildWithinSuspenseInstance, Kl = e.hydrateInstance, Sc = e.hydrateTextInstance, V = e.hydrateSuspenseInstance, re = e.getNextHydratableInstanceAfterSuspenseInstance, me = e.commitHydratedContainer, pe = e.commitHydratedSuspenseInstance, he = e.clearSuspenseBoundary, tt = e.clearSuspenseBoundaryFromContainer, yt = e.shouldDeleteUnhydratedTailInstances, At = e.didNotMatchHydratedContainerTextInstance, Nt = e.didNotMatchHydratedTextInstance, Ct;
    function zt(l) {
      if (Ct === void 0)
        try {
          throw Error();
        } catch (v) {
          var u = v.stack.trim().match(/\n( *(at )?)/);
          Ct = u && u[1] || "";
        }
      return `
` + Ct + l;
    }
    var Bt = !1;
    function In(l, u) {
      if (!l || Bt)
        return "";
      Bt = !0;
      var v = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      try {
        if (u)
          if (u = function() {
            throw Error();
          }, Object.defineProperty(u.prototype, "props", { set: function() {
            throw Error();
          } }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(u, []);
            } catch (ke) {
              var S = ke;
            }
            Reflect.construct(l, [], u);
          } else {
            try {
              u.call();
            } catch (ke) {
              S = ke;
            }
            l.call(u.prototype);
          }
        else {
          try {
            throw Error();
          } catch (ke) {
            S = ke;
          }
          l();
        }
      } catch (ke) {
        if (ke && S && typeof ke.stack == "string") {
          for (var A = ke.stack.split(`
`), D = S.stack.split(`
`), j = A.length - 1, ee = D.length - 1; 1 <= j && 0 <= ee && A[j] !== D[ee]; )
            ee--;
          for (; 1 <= j && 0 <= ee; j--, ee--)
            if (A[j] !== D[ee]) {
              if (j !== 1 || ee !== 1)
                do
                  if (j--, ee--, 0 > ee || A[j] !== D[ee]) {
                    var Ee = `
` + A[j].replace(" at new ", " at ");
                    return l.displayName && Ee.includes("<anonymous>") && (Ee = Ee.replace("<anonymous>", l.displayName)), Ee;
                  }
                while (1 <= j && 0 <= ee);
              break;
            }
        }
      } finally {
        Bt = !1, Error.prepareStackTrace = v;
      }
      return (l = l ? l.displayName || l.name : "") ? zt(l) : "";
    }
    var Xi = Object.prototype.hasOwnProperty, kn = [], bi = -1;
    function sn(l) {
      return { current: l };
    }
    function pt(l) {
      0 > bi || (l.current = kn[bi], kn[bi] = null, bi--);
    }
    function yn(l, u) {
      bi++, kn[bi] = l.current, l.current = u;
    }
    var on = {}, Bn = sn(on), Sn = sn(!1), qi = on;
    function Sa(l, u) {
      var v = l.type.contextTypes;
      if (!v)
        return on;
      var S = l.stateNode;
      if (S && S.__reactInternalMemoizedUnmaskedChildContext === u)
        return S.__reactInternalMemoizedMaskedChildContext;
      var A = {}, D;
      for (D in v)
        A[D] = u[D];
      return S && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = u, l.__reactInternalMemoizedMaskedChildContext = A), A;
    }
    function hn(l) {
      return l = l.childContextTypes, l != null;
    }
    function xr() {
      pt(Sn), pt(Bn);
    }
    function Vo(l, u, v) {
      if (Bn.current !== on)
        throw Error(c(168));
      yn(Bn, u), yn(Sn, v);
    }
    function Yi(l, u, v) {
      var S = l.stateNode;
      if (u = u.childContextTypes, typeof S.getChildContext != "function")
        return v;
      S = S.getChildContext();
      for (var A in S)
        if (!(A in u))
          throw Error(c(108, k(l) || "Unknown", A));
      return o({}, v, S);
    }
    function Ma(l) {
      return l = (l = l.stateNode) && l.__reactInternalMemoizedMergedChildContext || on, qi = Bn.current, yn(Bn, l), yn(Sn, Sn.current), !0;
    }
    function $l(l, u, v) {
      var S = l.stateNode;
      if (!S)
        throw Error(c(169));
      v ? (l = Yi(l, u, qi), S.__reactInternalMemoizedMergedChildContext = l, pt(Sn), pt(Bn), yn(Bn, l)) : pt(Sn), yn(Sn, v);
    }
    var ji = Math.clz32 ? Math.clz32 : Xp, Td = Math.log, Wp = Math.LN2;
    function Xp(l) {
      return l >>>= 0, l === 0 ? 32 : 31 - (Td(l) / Wp | 0) | 0;
    }
    var Mc = 64, ko = 4194304;
    function Ss(l) {
      switch (l & -l) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 4:
          return 4;
        case 8:
          return 8;
        case 16:
          return 16;
        case 32:
          return 32;
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return l & 4194240;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return l & 130023424;
        case 134217728:
          return 134217728;
        case 268435456:
          return 268435456;
        case 536870912:
          return 536870912;
        case 1073741824:
          return 1073741824;
        default:
          return l;
      }
    }
    function Ec(l, u) {
      var v = l.pendingLanes;
      if (v === 0)
        return 0;
      var S = 0, A = l.suspendedLanes, D = l.pingedLanes, j = v & 268435455;
      if (j !== 0) {
        var ee = j & ~A;
        ee !== 0 ? S = Ss(ee) : (D &= j, D !== 0 && (S = Ss(D)));
      } else
        j = v & ~A, j !== 0 ? S = Ss(j) : D !== 0 && (S = Ss(D));
      if (S === 0)
        return 0;
      if (u !== 0 && u !== S && !(u & A) && (A = S & -S, D = u & -u, A >= D || A === 16 && (D & 4194240) !== 0))
        return u;
      if (S & 4 && (S |= v & 16), u = l.entangledLanes, u !== 0)
        for (l = l.entanglements, u &= S; 0 < u; )
          v = 31 - ji(u), A = 1 << v, S |= l[v], u &= ~A;
      return S;
    }
    function ea(l, u) {
      switch (l) {
        case 1:
        case 2:
        case 4:
          return u + 250;
        case 8:
        case 16:
        case 32:
        case 64:
        case 128:
        case 256:
        case 512:
        case 1024:
        case 2048:
        case 4096:
        case 8192:
        case 16384:
        case 32768:
        case 65536:
        case 131072:
        case 262144:
        case 524288:
        case 1048576:
        case 2097152:
          return u + 5e3;
        case 4194304:
        case 8388608:
        case 16777216:
        case 33554432:
        case 67108864:
          return -1;
        case 134217728:
        case 268435456:
        case 536870912:
        case 1073741824:
          return -1;
        default:
          return -1;
      }
    }
    function eu(l, u) {
      for (var v = l.suspendedLanes, S = l.pingedLanes, A = l.expirationTimes, D = l.pendingLanes; 0 < D; ) {
        var j = 31 - ji(D), ee = 1 << j, Ee = A[j];
        Ee === -1 ? (!(ee & v) || ee & S) && (A[j] = ea(ee, u)) : Ee <= u && (l.expiredLanes |= ee), D &= ~ee;
      }
    }
    function Zi(l) {
      return l = l.pendingLanes & -1073741825, l !== 0 ? l : l & 1073741824 ? 1073741824 : 0;
    }
    function bd(l) {
      for (var u = [], v = 0; 31 > v; v++)
        u.push(l);
      return u;
    }
    function tu(l, u, v) {
      l.pendingLanes |= u, u !== 536870912 && (l.suspendedLanes = 0, l.pingedLanes = 0), l = l.eventTimes, u = 31 - ji(u), l[u] = v;
    }
    function uy(l, u) {
      var v = l.pendingLanes & ~u;
      l.pendingLanes = u, l.suspendedLanes = 0, l.pingedLanes = 0, l.expiredLanes &= u, l.mutableReadLanes &= u, l.entangledLanes &= u, u = l.entanglements;
      var S = l.eventTimes;
      for (l = l.expirationTimes; 0 < v; ) {
        var A = 31 - ji(v), D = 1 << A;
        u[A] = 0, S[A] = -1, l[A] = -1, v &= ~D;
      }
    }
    function wd(l, u) {
      var v = l.entangledLanes |= u;
      for (l = l.entanglements; v; ) {
        var S = 31 - ji(v), A = 1 << S;
        A & u | l[S] & u && (l[S] |= u), v &= ~A;
      }
    }
    var dn = 0;
    function qp(l) {
      return l &= -l, 1 < l ? 4 < l ? l & 268435455 ? 16 : 536870912 : 4 : 1;
    }
    var Ms = r.unstable_scheduleCallback, Yp = r.unstable_cancelCallback, cy = r.unstable_shouldYield, fy = r.unstable_requestPaint, Xn = r.unstable_now, Ad = r.unstable_ImmediatePriority, dy = r.unstable_UserBlockingPriority, Rd = r.unstable_NormalPriority, hy = r.unstable_IdlePriority, Tc = null, Ea = null;
    function py(l) {
      if (Ea && typeof Ea.onCommitFiberRoot == "function")
        try {
          Ea.onCommitFiberRoot(Tc, l, void 0, (l.current.flags & 128) === 128);
        } catch {
        }
    }
    function my(l, u) {
      return l === u && (l !== 0 || 1 / l === 1 / u) || l !== l && u !== u;
    }
    var Ta = typeof Object.is == "function" ? Object.is : my, Za = null, bc = !1, Cd = !1;
    function Ld(l) {
      Za === null ? Za = [l] : Za.push(l);
    }
    function vy(l) {
      bc = !0, Ld(l);
    }
    function ba() {
      if (!Cd && Za !== null) {
        Cd = !0;
        var l = 0, u = dn;
        try {
          var v = Za;
          for (dn = 1; l < v.length; l++) {
            var S = v[l];
            do
              S = S(!0);
            while (S !== null);
          }
          Za = null, bc = !1;
        } catch (A) {
          throw Za !== null && (Za = Za.slice(l + 1)), Ms(Ad, ba), A;
        } finally {
          dn = u, Cd = !1;
        }
      }
      return null;
    }
    var gy = f.ReactCurrentBatchConfig;
    function wc(l, u) {
      if (Ta(l, u))
        return !0;
      if (typeof l != "object" || l === null || typeof u != "object" || u === null)
        return !1;
      var v = Object.keys(l), S = Object.keys(u);
      if (v.length !== S.length)
        return !1;
      for (S = 0; S < v.length; S++) {
        var A = v[S];
        if (!Xi.call(u, A) || !Ta(l[A], u[A]))
          return !1;
      }
      return !0;
    }
    function yy(l) {
      switch (l.tag) {
        case 5:
          return zt(l.type);
        case 16:
          return zt("Lazy");
        case 13:
          return zt("Suspense");
        case 19:
          return zt("SuspenseList");
        case 0:
        case 2:
        case 15:
          return l = In(l.type, !1), l;
        case 11:
          return l = In(l.type.render, !1), l;
        case 1:
          return l = In(l.type, !0), l;
        default:
          return "";
      }
    }
    function ta(l, u) {
      if (l && l.defaultProps) {
        u = o({}, u), l = l.defaultProps;
        for (var v in l)
          u[v] === void 0 && (u[v] = l[v]);
        return u;
      }
      return u;
    }
    var nu = sn(null), iu = null, Go = null, Ac = null;
    function Pd() {
      Ac = Go = iu = null;
    }
    function Dd(l, u, v) {
      Dt ? (yn(nu, u._currentValue), u._currentValue = v) : (yn(nu, u._currentValue2), u._currentValue2 = v);
    }
    function Rc(l) {
      var u = nu.current;
      pt(nu), Dt ? l._currentValue = u : l._currentValue2 = u;
    }
    function Nd(l, u, v) {
      for (; l !== null; ) {
        var S = l.alternate;
        if ((l.childLanes & u) !== u ? (l.childLanes |= u, S !== null && (S.childLanes |= u)) : S !== null && (S.childLanes & u) !== u && (S.childLanes |= u), l === v)
          break;
        l = l.return;
      }
    }
    function Wo(l, u) {
      iu = l, Ac = Go = null, l = l.dependencies, l !== null && l.firstContext !== null && (l.lanes & u && (Fi = !0), l.firstContext = null);
    }
    function Ir(l) {
      var u = Dt ? l._currentValue : l._currentValue2;
      if (Ac !== l)
        if (l = { context: l, memoizedValue: u, next: null }, Go === null) {
          if (iu === null)
            throw Error(c(308));
          Go = l, iu.dependencies = { lanes: 0, firstContext: l };
        } else
          Go = Go.next = l;
      return u;
    }
    var na = null, wa = !1;
    function Ud(l) {
      l.updateQueue = { baseState: l.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
    }
    function ru(l, u) {
      l = l.updateQueue, u.updateQueue === l && (u.updateQueue = { baseState: l.baseState, firstBaseUpdate: l.firstBaseUpdate, lastBaseUpdate: l.lastBaseUpdate, shared: l.shared, effects: l.effects });
    }
    function Ja(l, u) {
      return { eventTime: l, lane: u, tag: 0, payload: null, callback: null, next: null };
    }
    function Es(l, u) {
      var v = l.updateQueue;
      v !== null && (v = v.shared, oi !== null && l.mode & 1 && !(Zt & 2) ? (l = v.interleaved, l === null ? (u.next = u, na === null ? na = [v] : na.push(v)) : (u.next = l.next, l.next = u), v.interleaved = u) : (l = v.pending, l === null ? u.next = u : (u.next = l.next, l.next = u), v.pending = u));
    }
    function Cc(l, u, v) {
      if (u = u.updateQueue, u !== null && (u = u.shared, (v & 4194240) !== 0)) {
        var S = u.lanes;
        S &= l.pendingLanes, v |= S, u.lanes = v, wd(l, v);
      }
    }
    function jp(l, u) {
      var v = l.updateQueue, S = l.alternate;
      if (S !== null && (S = S.updateQueue, v === S)) {
        var A = null, D = null;
        if (v = v.firstBaseUpdate, v !== null) {
          do {
            var j = { eventTime: v.eventTime, lane: v.lane, tag: v.tag, payload: v.payload, callback: v.callback, next: null };
            D === null ? A = D = j : D = D.next = j, v = v.next;
          } while (v !== null);
          D === null ? A = D = u : D = D.next = u;
        } else
          A = D = u;
        v = { baseState: S.baseState, firstBaseUpdate: A, lastBaseUpdate: D, shared: S.shared, effects: S.effects }, l.updateQueue = v;
        return;
      }
      l = v.lastBaseUpdate, l === null ? v.firstBaseUpdate = u : l.next = u, v.lastBaseUpdate = u;
    }
    function Lc(l, u, v, S) {
      var A = l.updateQueue;
      wa = !1;
      var D = A.firstBaseUpdate, j = A.lastBaseUpdate, ee = A.shared.pending;
      if (ee !== null) {
        A.shared.pending = null;
        var Ee = ee, ke = Ee.next;
        Ee.next = null, j === null ? D = ke : j.next = ke, j = Ee;
        var Qe = l.alternate;
        Qe !== null && (Qe = Qe.updateQueue, ee = Qe.lastBaseUpdate, ee !== j && (ee === null ? Qe.firstBaseUpdate = ke : ee.next = ke, Qe.lastBaseUpdate = Ee));
      }
      if (D !== null) {
        var Ot = A.baseState;
        j = 0, Qe = ke = Ee = null, ee = D;
        do {
          var Lt = ee.lane, Cn = ee.eventTime;
          if ((S & Lt) === Lt) {
            Qe !== null && (Qe = Qe.next = {
              eventTime: Cn,
              lane: 0,
              tag: ee.tag,
              payload: ee.payload,
              callback: ee.callback,
              next: null
            });
            e: {
              var Et = l, Ci = ee;
              switch (Lt = u, Cn = v, Ci.tag) {
                case 1:
                  if (Et = Ci.payload, typeof Et == "function") {
                    Ot = Et.call(Cn, Ot, Lt);
                    break e;
                  }
                  Ot = Et;
                  break e;
                case 3:
                  Et.flags = Et.flags & -65537 | 128;
                case 0:
                  if (Et = Ci.payload, Lt = typeof Et == "function" ? Et.call(Cn, Ot, Lt) : Et, Lt == null)
                    break e;
                  Ot = o({}, Ot, Lt);
                  break e;
                case 2:
                  wa = !0;
              }
            }
            ee.callback !== null && ee.lane !== 0 && (l.flags |= 64, Lt = A.effects, Lt === null ? A.effects = [ee] : Lt.push(ee));
          } else
            Cn = { eventTime: Cn, lane: Lt, tag: ee.tag, payload: ee.payload, callback: ee.callback, next: null }, Qe === null ? (ke = Qe = Cn, Ee = Ot) : Qe = Qe.next = Cn, j |= Lt;
          if (ee = ee.next, ee === null) {
            if (ee = A.shared.pending, ee === null)
              break;
            Lt = ee, ee = Lt.next, Lt.next = null, A.lastBaseUpdate = Lt, A.shared.pending = null;
          }
        } while (!0);
        if (Qe === null && (Ee = Ot), A.baseState = Ee, A.firstBaseUpdate = ke, A.lastBaseUpdate = Qe, u = A.shared.interleaved, u !== null) {
          A = u;
          do
            j |= A.lane, A = A.next;
          while (A !== u);
        } else
          D === null && (A.shared.lanes = 0);
        Ua |= j, l.lanes = j, l.memoizedState = Ot;
      }
    }
    function Zp(l, u, v) {
      if (l = u.effects, u.effects = null, l !== null)
        for (u = 0; u < l.length; u++) {
          var S = l[u], A = S.callback;
          if (A !== null) {
            if (S.callback = null, S = v, typeof A != "function")
              throw Error(c(191, A));
            A.call(S);
          }
        }
    }
    var Jp = new n.Component().refs;
    function Pc(l, u, v, S) {
      u = l.memoizedState, v = v(S, u), v = v == null ? u : o({}, u, v), l.memoizedState = v, l.lanes === 0 && (l.updateQueue.baseState = v);
    }
    var Dc = { isMounted: function(l) {
      return (l = l._reactInternals) ? F(l) === l : !1;
    }, enqueueSetState: function(l, u, v) {
      l = l._reactInternals;
      var S = zi(), A = Ps(l), D = Ja(S, A);
      D.payload = u, v != null && (D.callback = v), Es(l, D), u = kr(l, A, S), u !== null && Cc(u, l, A);
    }, enqueueReplaceState: function(l, u, v) {
      l = l._reactInternals;
      var S = zi(), A = Ps(l), D = Ja(S, A);
      D.tag = 1, D.payload = u, v != null && (D.callback = v), Es(l, D), u = kr(l, A, S), u !== null && Cc(u, l, A);
    }, enqueueForceUpdate: function(l, u) {
      l = l._reactInternals;
      var v = zi(), S = Ps(l), A = Ja(
        v,
        S
      );
      A.tag = 2, u != null && (A.callback = u), Es(l, A), u = kr(l, S, v), u !== null && Cc(u, l, S);
    } };
    function Qp(l, u, v, S, A, D, j) {
      return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(S, D, j) : u.prototype && u.prototype.isPureReactComponent ? !wc(v, S) || !wc(A, D) : !0;
    }
    function Kp(l, u, v) {
      var S = !1, A = on, D = u.contextType;
      return typeof D == "object" && D !== null ? D = Ir(D) : (A = hn(u) ? qi : Bn.current, S = u.contextTypes, D = (S = S != null) ? Sa(l, A) : on), u = new u(v, D), l.memoizedState = u.state !== null && u.state !== void 0 ? u.state : null, u.updater = Dc, l.stateNode = u, u._reactInternals = l, S && (l = l.stateNode, l.__reactInternalMemoizedUnmaskedChildContext = A, l.__reactInternalMemoizedMaskedChildContext = D), u;
    }
    function $p(l, u, v, S) {
      l = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(v, S), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(v, S), u.state !== l && Dc.enqueueReplaceState(u, u.state, null);
    }
    function Id(l, u, v, S) {
      var A = l.stateNode;
      A.props = v, A.state = l.memoizedState, A.refs = Jp, Ud(l);
      var D = u.contextType;
      typeof D == "object" && D !== null ? A.context = Ir(D) : (D = hn(u) ? qi : Bn.current, A.context = Sa(l, D)), A.state = l.memoizedState, D = u.getDerivedStateFromProps, typeof D == "function" && (Pc(l, u, D, v), A.state = l.memoizedState), typeof u.getDerivedStateFromProps == "function" || typeof A.getSnapshotBeforeUpdate == "function" || typeof A.UNSAFE_componentWillMount != "function" && typeof A.componentWillMount != "function" || (u = A.state, typeof A.componentWillMount == "function" && A.componentWillMount(), typeof A.UNSAFE_componentWillMount == "function" && A.UNSAFE_componentWillMount(), u !== A.state && Dc.enqueueReplaceState(A, A.state, null), Lc(l, v, A, S), A.state = l.memoizedState), typeof A.componentDidMount == "function" && (l.flags |= 4194308);
    }
    var Xo = [], qo = 0, Nc = null, Uc = 0, Or = [], Fr = 0, Js = null, Qa = 1, Ka = "";
    function Qs(l, u) {
      Xo[qo++] = Uc, Xo[qo++] = Nc, Nc = l, Uc = u;
    }
    function em(l, u, v) {
      Or[Fr++] = Qa, Or[Fr++] = Ka, Or[Fr++] = Js, Js = l;
      var S = Qa;
      l = Ka;
      var A = 32 - ji(S) - 1;
      S &= ~(1 << A), v += 1;
      var D = 32 - ji(u) + A;
      if (30 < D) {
        var j = A - A % 5;
        D = (S & (1 << j) - 1).toString(32), S >>= j, A -= j, Qa = 1 << 32 - ji(u) + A | v << A | S, Ka = D + l;
      } else
        Qa = 1 << D | v << A | S, Ka = l;
    }
    function Od(l) {
      l.return !== null && (Qs(l, 1), em(l, 1, 0));
    }
    function Fd(l) {
      for (; l === Nc; )
        Nc = Xo[--qo], Xo[qo] = null, Uc = Xo[--qo], Xo[qo] = null;
      for (; l === Js; )
        Js = Or[--Fr], Or[Fr] = null, Ka = Or[--Fr], Or[Fr] = null, Qa = Or[--Fr], Or[Fr] = null;
    }
    var Sr = null, wi = null, On = !1, Yo = !1, zr = null;
    function zd(l, u) {
      var v = Bi(5, null, null, 0);
      v.elementType = "DELETED", v.stateNode = u, v.return = l, u = l.deletions, u === null ? (l.deletions = [v], l.flags |= 16) : u.push(v);
    }
    function Bd(l, u) {
      switch (l.tag) {
        case 5:
          return u = Gi(u, l.type, l.pendingProps), u !== null ? (l.stateNode = u, Sr = l, wi = xc(u), !0) : !1;
        case 6:
          return u = rr(u, l.pendingProps), u !== null ? (l.stateNode = u, Sr = l, wi = null, !0) : !1;
        case 13:
          if (u = Wi(u), u !== null) {
            var v = Js !== null ? { id: Qa, overflow: Ka } : null;
            return l.memoizedState = { dehydrated: u, treeContext: v, retryLane: 1073741824 }, v = Bi(18, null, null, 0), v.stateNode = u, v.return = l, l.child = v, Sr = l, wi = null, !0;
          }
          return !1;
        default:
          return !1;
      }
    }
    function Ic(l) {
      return (l.mode & 1) !== 0 && (l.flags & 128) === 0;
    }
    function Oc(l) {
      if (On) {
        var u = wi;
        if (u) {
          var v = u;
          if (!Bd(l, u)) {
            if (Ic(l))
              throw Error(c(418));
            u = xa(v);
            var S = Sr;
            u && Bd(l, u) ? zd(S, v) : (l.flags = l.flags & -4097 | 2, On = !1, Sr = l);
          }
        } else {
          if (Ic(l))
            throw Error(c(418));
          l.flags = l.flags & -4097 | 2, On = !1, Sr = l;
        }
      }
    }
    function Hd(l) {
      for (l = l.return; l !== null && l.tag !== 5 && l.tag !== 3 && l.tag !== 13; )
        l = l.return;
      Sr = l;
    }
    function au(l) {
      if (!Se || l !== Sr)
        return !1;
      if (!On)
        return Hd(l), On = !0, !1;
      if (l.tag !== 3 && (l.tag !== 5 || yt(l.type) && !Ue(l.type, l.memoizedProps))) {
        var u = wi;
        if (u) {
          if (Ic(l)) {
            for (l = wi; l; )
              l = xa(l);
            throw Error(c(418));
          }
          for (; u; )
            zd(l, u), u = xa(u);
        }
      }
      if (Hd(l), l.tag === 13) {
        if (!Se)
          throw Error(c(316));
        if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l)
          throw Error(c(317));
        wi = re(l);
      } else
        wi = Sr ? xa(l.stateNode) : null;
      return !0;
    }
    function jo() {
      Se && (wi = Sr = null, Yo = On = !1);
    }
    function su(l) {
      zr === null ? zr = [l] : zr.push(l);
    }
    function Ks(l, u, v) {
      if (l = v.ref, l !== null && typeof l != "function" && typeof l != "object") {
        if (v._owner) {
          if (v = v._owner, v) {
            if (v.tag !== 1)
              throw Error(c(309));
            var S = v.stateNode;
          }
          if (!S)
            throw Error(c(147, l));
          var A = S, D = "" + l;
          return u !== null && u.ref !== null && typeof u.ref == "function" && u.ref._stringRef === D ? u.ref : (u = function(j) {
            var ee = A.refs;
            ee === Jp && (ee = A.refs = {}), j === null ? delete ee[D] : ee[D] = j;
          }, u._stringRef = D, u);
        }
        if (typeof l != "string")
          throw Error(c(284));
        if (!v._owner)
          throw Error(c(290, l));
      }
      return l;
    }
    function ia(l, u) {
      throw l = Object.prototype.toString.call(u), Error(c(31, l === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : l));
    }
    function Fc(l) {
      var u = l._init;
      return u(l._payload);
    }
    function ou(l) {
      function u(ce, te) {
        if (l) {
          var ge = ce.deletions;
          ge === null ? (ce.deletions = [te], ce.flags |= 16) : ge.push(te);
        }
      }
      function v(ce, te) {
        if (!l)
          return null;
        for (; te !== null; )
          u(ce, te), te = te.sibling;
        return null;
      }
      function S(ce, te) {
        for (ce = /* @__PURE__ */ new Map(); te !== null; )
          te.key !== null ? ce.set(te.key, te) : ce.set(te.index, te), te = te.sibling;
        return ce;
      }
      function A(ce, te) {
        return ce = ur(ce, te), ce.index = 0, ce.sibling = null, ce;
      }
      function D(ce, te, ge) {
        return ce.index = ge, l ? (ge = ce.alternate, ge !== null ? (ge = ge.index, ge < te ? (ce.flags |= 2, te) : ge) : (ce.flags |= 2, te)) : (ce.flags |= 1048576, te);
      }
      function j(ce) {
        return l && ce.alternate === null && (ce.flags |= 2), ce;
      }
      function ee(ce, te, ge, it) {
        return te === null || te.tag !== 6 ? (te = cf(ge, ce.mode, it), te.return = ce, te) : (te = A(te, ge), te.return = ce, te);
      }
      function Ee(ce, te, ge, it) {
        var xt = ge.type;
        return xt === g ? Qe(ce, te, ge.props.children, it, ge.key) : te !== null && (te.elementType === xt || typeof xt == "object" && xt !== null && xt.$$typeof === C && Fc(xt) === te.type) ? (it = A(te, ge.props), it.ref = Ks(ce, te, ge), it.return = ce, it) : (it = go(ge.type, ge.key, ge.props, null, ce.mode, it), it.ref = Ks(ce, te, ge), it.return = ce, it);
      }
      function ke(ce, te, ge, it) {
        return te === null || te.tag !== 4 || te.stateNode.containerInfo !== ge.containerInfo || te.stateNode.implementation !== ge.implementation ? (te = Ru(ge, ce.mode, it), te.return = ce, te) : (te = A(te, ge.children || []), te.return = ce, te);
      }
      function Qe(ce, te, ge, it, xt) {
        return te === null || te.tag !== 7 ? (te = Ns(ge, ce.mode, it, xt), te.return = ce, te) : (te = A(te, ge), te.return = ce, te);
      }
      function Ot(ce, te, ge) {
        if (typeof te == "string" && te !== "" || typeof te == "number")
          return te = cf("" + te, ce.mode, ge), te.return = ce, te;
        if (typeof te == "object" && te !== null) {
          switch (te.$$typeof) {
            case p:
              return ge = go(te.type, te.key, te.props, null, ce.mode, ge), ge.ref = Ks(ce, null, te), ge.return = ce, ge;
            case h:
              return te = Ru(te, ce.mode, ge), te.return = ce, te;
            case C:
              var it = te._init;
              return Ot(ce, it(te._payload), ge);
          }
          if (_e(te) || B(te))
            return te = Ns(te, ce.mode, ge, null), te.return = ce, te;
          ia(ce, te);
        }
        return null;
      }
      function Lt(ce, te, ge, it) {
        var xt = te !== null ? te.key : null;
        if (typeof ge == "string" && ge !== "" || typeof ge == "number")
          return xt !== null ? null : ee(ce, te, "" + ge, it);
        if (typeof ge == "object" && ge !== null) {
          switch (ge.$$typeof) {
            case p:
              return ge.key === xt ? Ee(ce, te, ge, it) : null;
            case h:
              return ge.key === xt ? ke(ce, te, ge, it) : null;
            case C:
              return xt = ge._init, Lt(
                ce,
                te,
                xt(ge._payload),
                it
              );
          }
          if (_e(ge) || B(ge))
            return xt !== null ? null : Qe(ce, te, ge, it, null);
          ia(ce, ge);
        }
        return null;
      }
      function Cn(ce, te, ge, it, xt) {
        if (typeof it == "string" && it !== "" || typeof it == "number")
          return ce = ce.get(ge) || null, ee(te, ce, "" + it, xt);
        if (typeof it == "object" && it !== null) {
          switch (it.$$typeof) {
            case p:
              return ce = ce.get(it.key === null ? ge : it.key) || null, Ee(te, ce, it, xt);
            case h:
              return ce = ce.get(it.key === null ? ge : it.key) || null, ke(te, ce, it, xt);
            case C:
              var Wt = it._init;
              return Cn(ce, te, ge, Wt(it._payload), xt);
          }
          if (_e(it) || B(it))
            return ce = ce.get(ge) || null, Qe(te, ce, it, xt, null);
          ia(te, it);
        }
        return null;
      }
      function Et(ce, te, ge, it) {
        for (var xt = null, Wt = null, Ut = te, Jt = te = 0, Kn = null; Ut !== null && Jt < ge.length; Jt++) {
          Ut.index > Jt ? (Kn = Ut, Ut = null) : Kn = Ut.sibling;
          var cn = Lt(ce, Ut, ge[Jt], it);
          if (cn === null) {
            Ut === null && (Ut = Kn);
            break;
          }
          l && Ut && cn.alternate === null && u(ce, Ut), te = D(cn, te, Jt), Wt === null ? xt = cn : Wt.sibling = cn, Wt = cn, Ut = Kn;
        }
        if (Jt === ge.length)
          return v(ce, Ut), On && Qs(ce, Jt), xt;
        if (Ut === null) {
          for (; Jt < ge.length; Jt++)
            Ut = Ot(ce, ge[Jt], it), Ut !== null && (te = D(Ut, te, Jt), Wt === null ? xt = Ut : Wt.sibling = Ut, Wt = Ut);
          return On && Qs(ce, Jt), xt;
        }
        for (Ut = S(ce, Ut); Jt < ge.length; Jt++)
          Kn = Cn(Ut, ce, Jt, ge[Jt], it), Kn !== null && (l && Kn.alternate !== null && Ut.delete(Kn.key === null ? Jt : Kn.key), te = D(Kn, te, Jt), Wt === null ? xt = Kn : Wt.sibling = Kn, Wt = Kn);
        return l && Ut.forEach(function(Us) {
          return u(ce, Us);
        }), On && Qs(ce, Jt), xt;
      }
      function Ci(ce, te, ge, it) {
        var xt = B(ge);
        if (typeof xt != "function")
          throw Error(c(150));
        if (ge = xt.call(ge), ge == null)
          throw Error(c(151));
        for (var Wt = xt = null, Ut = te, Jt = te = 0, Kn = null, cn = ge.next(); Ut !== null && !cn.done; Jt++, cn = ge.next()) {
          Ut.index > Jt ? (Kn = Ut, Ut = null) : Kn = Ut.sibling;
          var Us = Lt(ce, Ut, cn.value, it);
          if (Us === null) {
            Ut === null && (Ut = Kn);
            break;
          }
          l && Ut && Us.alternate === null && u(ce, Ut), te = D(Us, te, Jt), Wt === null ? xt = Us : Wt.sibling = Us, Wt = Us, Ut = Kn;
        }
        if (cn.done)
          return v(
            ce,
            Ut
          ), On && Qs(ce, Jt), xt;
        if (Ut === null) {
          for (; !cn.done; Jt++, cn = ge.next())
            cn = Ot(ce, cn.value, it), cn !== null && (te = D(cn, te, Jt), Wt === null ? xt = cn : Wt.sibling = cn, Wt = cn);
          return On && Qs(ce, Jt), xt;
        }
        for (Ut = S(ce, Ut); !cn.done; Jt++, cn = ge.next())
          cn = Cn(Ut, ce, Jt, cn.value, it), cn !== null && (l && cn.alternate !== null && Ut.delete(cn.key === null ? Jt : cn.key), te = D(cn, te, Jt), Wt === null ? xt = cn : Wt.sibling = cn, Wt = cn);
        return l && Ut.forEach(function(ff) {
          return u(ce, ff);
        }), On && Qs(ce, Jt), xt;
      }
      function Ji(ce, te, ge, it) {
        if (typeof ge == "object" && ge !== null && ge.type === g && ge.key === null && (ge = ge.props.children), typeof ge == "object" && ge !== null) {
          switch (ge.$$typeof) {
            case p:
              e: {
                for (var xt = ge.key, Wt = te; Wt !== null; ) {
                  if (Wt.key === xt) {
                    if (xt = ge.type, xt === g) {
                      if (Wt.tag === 7) {
                        v(ce, Wt.sibling), te = A(Wt, ge.props.children), te.return = ce, ce = te;
                        break e;
                      }
                    } else if (Wt.elementType === xt || typeof xt == "object" && xt !== null && xt.$$typeof === C && Fc(xt) === Wt.type) {
                      v(ce, Wt.sibling), te = A(Wt, ge.props), te.ref = Ks(ce, Wt, ge), te.return = ce, ce = te;
                      break e;
                    }
                    v(ce, Wt);
                    break;
                  } else
                    u(ce, Wt);
                  Wt = Wt.sibling;
                }
                ge.type === g ? (te = Ns(ge.props.children, ce.mode, it, ge.key), te.return = ce, ce = te) : (it = go(ge.type, ge.key, ge.props, null, ce.mode, it), it.ref = Ks(ce, te, ge), it.return = ce, ce = it);
              }
              return j(ce);
            case h:
              e: {
                for (Wt = ge.key; te !== null; ) {
                  if (te.key === Wt)
                    if (te.tag === 4 && te.stateNode.containerInfo === ge.containerInfo && te.stateNode.implementation === ge.implementation) {
                      v(ce, te.sibling), te = A(te, ge.children || []), te.return = ce, ce = te;
                      break e;
                    } else {
                      v(ce, te);
                      break;
                    }
                  else
                    u(ce, te);
                  te = te.sibling;
                }
                te = Ru(ge, ce.mode, it), te.return = ce, ce = te;
              }
              return j(ce);
            case C:
              return Wt = ge._init, Ji(ce, te, Wt(ge._payload), it);
          }
          if (_e(ge))
            return Et(ce, te, ge, it);
          if (B(ge))
            return Ci(ce, te, ge, it);
          ia(ce, ge);
        }
        return typeof ge == "string" && ge !== "" || typeof ge == "number" ? (ge = "" + ge, te !== null && te.tag === 6 ? (v(ce, te.sibling), te = A(te, ge), te.return = ce, ce = te) : (v(ce, te), te = cf(ge, ce.mode, it), te.return = ce, ce = te), j(ce)) : v(ce, te);
      }
      return Ji;
    }
    var Zo = ou(!0), zc = ou(!1), lu = {}, ar = sn(lu), uu = sn(lu), Ts = sn(lu);
    function ra(l) {
      if (l === lu)
        throw Error(c(174));
      return l;
    }
    function Bc(l, u) {
      yn(Ts, u), yn(uu, l), yn(ar, lu), l = Fe(u), pt(ar), yn(ar, l);
    }
    function $s() {
      pt(ar), pt(uu), pt(Ts);
    }
    function cu(l) {
      var u = ra(Ts.current), v = ra(ar.current);
      u = Q(v, l.type, u), v !== u && (yn(uu, l), yn(ar, u));
    }
    function Mr(l) {
      uu.current === l && (pt(ar), pt(uu));
    }
    var Fn = sn(0);
    function eo(l) {
      for (var u = l; u !== null; ) {
        if (u.tag === 13) {
          var v = u.memoizedState;
          if (v !== null && (v = v.dehydrated, v === null || _c(v) || _r(v)))
            return u;
        } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) {
          if (u.flags & 128)
            return u;
        } else if (u.child !== null) {
          u.child.return = u, u = u.child;
          continue;
        }
        if (u === l)
          break;
        for (; u.sibling === null; ) {
          if (u.return === null || u.return === l)
            return null;
          u = u.return;
        }
        u.sibling.return = u.return, u = u.sibling;
      }
      return null;
    }
    var aa = [];
    function Aa() {
      for (var l = 0; l < aa.length; l++) {
        var u = aa[l];
        Dt ? u._workInProgressVersionPrimary = null : u._workInProgressVersionSecondary = null;
      }
      aa.length = 0;
    }
    var di = f.ReactCurrentDispatcher, wn = f.ReactCurrentBatchConfig, bs = 0, ln = null, Hn = null, Rn = null, Jo = !1, Ra = !1, Qo = 0, Ko = 0;
    function hi() {
      throw Error(c(321));
    }
    function Br(l, u) {
      if (u === null)
        return !1;
      for (var v = 0; v < u.length && v < l.length; v++)
        if (!Ta(l[v], u[v]))
          return !1;
      return !0;
    }
    function $o(l, u, v, S, A, D) {
      if (bs = D, ln = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, di.current = l === null || l.memoizedState === null ? Wd : Xd, l = v(S, A), Ra) {
        D = 0;
        do {
          if (Ra = !1, Qo = 0, 25 <= D)
            throw Error(c(301));
          D += 1, Rn = Hn = null, u.updateQueue = null, di.current = qd, l = v(S, A);
        } while (Ra);
      }
      if (di.current = rl, u = Hn !== null && Hn.next !== null, bs = 0, Rn = Hn = ln = null, Jo = !1, u)
        throw Error(c(300));
      return l;
    }
    function fu() {
      var l = Qo !== 0;
      return Qo = 0, l;
    }
    function Ca() {
      var l = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
      return Rn === null ? ln.memoizedState = Rn = l : Rn = Rn.next = l, Rn;
    }
    function sa() {
      if (Hn === null) {
        var l = ln.alternate;
        l = l !== null ? l.memoizedState : null;
      } else
        l = Hn.next;
      var u = Rn === null ? ln.memoizedState : Rn.next;
      if (u !== null)
        Rn = u, Hn = l;
      else {
        if (l === null)
          throw Error(c(310));
        Hn = l, l = { memoizedState: Hn.memoizedState, baseState: Hn.baseState, baseQueue: Hn.baseQueue, queue: Hn.queue, next: null }, Rn === null ? ln.memoizedState = Rn = l : Rn = Rn.next = l;
      }
      return Rn;
    }
    function La(l, u) {
      return typeof u == "function" ? u(l) : u;
    }
    function du(l) {
      var u = sa(), v = u.queue;
      if (v === null)
        throw Error(c(311));
      v.lastRenderedReducer = l;
      var S = Hn, A = S.baseQueue, D = v.pending;
      if (D !== null) {
        if (A !== null) {
          var j = A.next;
          A.next = D.next, D.next = j;
        }
        S.baseQueue = A = D, v.pending = null;
      }
      if (A !== null) {
        D = A.next, S = S.baseState;
        var ee = j = null, Ee = null, ke = D;
        do {
          var Qe = ke.lane;
          if ((bs & Qe) === Qe)
            Ee !== null && (Ee = Ee.next = { lane: 0, action: ke.action, hasEagerState: ke.hasEagerState, eagerState: ke.eagerState, next: null }), S = ke.hasEagerState ? ke.eagerState : l(S, ke.action);
          else {
            var Ot = {
              lane: Qe,
              action: ke.action,
              hasEagerState: ke.hasEagerState,
              eagerState: ke.eagerState,
              next: null
            };
            Ee === null ? (ee = Ee = Ot, j = S) : Ee = Ee.next = Ot, ln.lanes |= Qe, Ua |= Qe;
          }
          ke = ke.next;
        } while (ke !== null && ke !== D);
        Ee === null ? j = S : Ee.next = ee, Ta(S, u.memoizedState) || (Fi = !0), u.memoizedState = S, u.baseState = j, u.baseQueue = Ee, v.lastRenderedState = S;
      }
      if (l = v.interleaved, l !== null) {
        A = l;
        do
          D = A.lane, ln.lanes |= D, Ua |= D, A = A.next;
        while (A !== l);
      } else
        A === null && (v.lanes = 0);
      return [u.memoizedState, v.dispatch];
    }
    function Hc(l) {
      var u = sa(), v = u.queue;
      if (v === null)
        throw Error(c(311));
      v.lastRenderedReducer = l;
      var S = v.dispatch, A = v.pending, D = u.memoizedState;
      if (A !== null) {
        v.pending = null;
        var j = A = A.next;
        do
          D = l(D, j.action), j = j.next;
        while (j !== A);
        Ta(D, u.memoizedState) || (Fi = !0), u.memoizedState = D, u.baseQueue === null && (u.baseState = D), v.lastRenderedState = D;
      }
      return [D, S];
    }
    function to() {
    }
    function Vd(l, u) {
      var v = ln, S = sa(), A = u(), D = !Ta(S.memoizedState, A);
      if (D && (S.memoizedState = A, Fi = !0), S = S.queue, Ie(fn.bind(null, v, S, l), [l]), S.getSnapshot !== u || D || Rn !== null && Rn.memoizedState.tag & 1) {
        if (v.flags |= 2048, el(9, Mn.bind(null, v, S, A, u), void 0, null), oi === null)
          throw Error(c(349));
        bs & 30 || Vt(v, u, A);
      }
      return A;
    }
    function Vt(l, u, v) {
      l.flags |= 16384, l = { getSnapshot: u, value: v }, u = ln.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, ln.updateQueue = u, u.stores = [l]) : (v = u.stores, v === null ? u.stores = [l] : v.push(l));
    }
    function Mn(l, u, v, S) {
      u.value = v, u.getSnapshot = S, jn(u) && kr(l, 1, -1);
    }
    function fn(l, u, v) {
      return v(function() {
        jn(u) && kr(l, 1, -1);
      });
    }
    function jn(l) {
      var u = l.getSnapshot;
      l = l.value;
      try {
        var v = u();
        return !Ta(l, v);
      } catch {
        return !0;
      }
    }
    function Hr(l) {
      var u = Ca();
      return typeof l == "function" && (l = l()), u.memoizedState = u.baseState = l, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: La, lastRenderedState: l }, u.queue = l, l = l.dispatch = Gd.bind(null, ln, l), [u.memoizedState, l];
    }
    function el(l, u, v, S) {
      return l = { tag: l, create: u, destroy: v, deps: S, next: null }, u = ln.updateQueue, u === null ? (u = { lastEffect: null, stores: null }, ln.updateQueue = u, u.lastEffect = l.next = l) : (v = u.lastEffect, v === null ? u.lastEffect = l.next = l : (S = v.next, v.next = l, l.next = S, u.lastEffect = l)), l;
    }
    function tm() {
      return sa().memoizedState;
    }
    function Vc(l, u, v, S) {
      var A = Ca();
      ln.flags |= l, A.memoizedState = el(1 | u, v, void 0, S === void 0 ? null : S);
    }
    function kc(l, u, v, S) {
      var A = sa();
      S = S === void 0 ? null : S;
      var D = void 0;
      if (Hn !== null) {
        var j = Hn.memoizedState;
        if (D = j.destroy, S !== null && Br(S, j.deps)) {
          A.memoizedState = el(u, v, D, S);
          return;
        }
      }
      ln.flags |= l, A.memoizedState = el(1 | u, v, D, S);
    }
    function hu(l, u) {
      return Vc(8390656, 8, l, u);
    }
    function Ie(l, u) {
      return kc(2048, 8, l, u);
    }
    function pi(l, u) {
      return kc(4, 2, l, u);
    }
    function tn(l, u) {
      return kc(4, 4, l, u);
    }
    function no(l, u) {
      if (typeof u == "function")
        return l = l(), u(l), function() {
          u(null);
        };
      if (u != null)
        return l = l(), u.current = l, function() {
          u.current = null;
        };
    }
    function $a(l, u, v) {
      return v = v != null ? v.concat([l]) : null, kc(4, 4, no.bind(null, u, l), v);
    }
    function es() {
    }
    function Pa(l, u) {
      var v = sa();
      u = u === void 0 ? null : u;
      var S = v.memoizedState;
      return S !== null && u !== null && Br(u, S[1]) ? S[0] : (v.memoizedState = [l, u], l);
    }
    function tl(l, u) {
      var v = sa();
      u = u === void 0 ? null : u;
      var S = v.memoizedState;
      return S !== null && u !== null && Br(u, S[1]) ? S[0] : (l = l(), v.memoizedState = [l, u], l);
    }
    function nl(l, u) {
      var v = dn;
      dn = v !== 0 && 4 > v ? v : 4, l(!0);
      var S = wn.transition;
      wn.transition = {};
      try {
        l(!1), u();
      } finally {
        dn = v, wn.transition = S;
      }
    }
    function il() {
      return sa().memoizedState;
    }
    function kd(l, u, v) {
      var S = Ps(l);
      v = { lane: S, action: v, hasEagerState: !1, eagerState: null, next: null }, Gc(l) ? Wc(u, v) : (Xc(l, u, v), v = zi(), l = kr(l, S, v), l !== null && qc(l, u, S));
    }
    function Gd(l, u, v) {
      var S = Ps(l), A = { lane: S, action: v, hasEagerState: !1, eagerState: null, next: null };
      if (Gc(l))
        Wc(u, A);
      else {
        Xc(l, u, A);
        var D = l.alternate;
        if (l.lanes === 0 && (D === null || D.lanes === 0) && (D = u.lastRenderedReducer, D !== null))
          try {
            var j = u.lastRenderedState, ee = D(j, v);
            if (A.hasEagerState = !0, A.eagerState = ee, Ta(ee, j))
              return;
          } catch {
          } finally {
          }
        v = zi(), l = kr(l, S, v), l !== null && qc(l, u, S);
      }
    }
    function Gc(l) {
      var u = l.alternate;
      return l === ln || u !== null && u === ln;
    }
    function Wc(l, u) {
      Ra = Jo = !0;
      var v = l.pending;
      v === null ? u.next = u : (u.next = v.next, v.next = u), l.pending = u;
    }
    function Xc(l, u, v) {
      oi !== null && l.mode & 1 && !(Zt & 2) ? (l = u.interleaved, l === null ? (v.next = v, na === null ? na = [u] : na.push(u)) : (v.next = l.next, l.next = v), u.interleaved = v) : (l = u.pending, l === null ? v.next = v : (v.next = l.next, l.next = v), u.pending = v);
    }
    function qc(l, u, v) {
      if (v & 4194240) {
        var S = u.lanes;
        S &= l.pendingLanes, v |= S, u.lanes = v, wd(l, v);
      }
    }
    var rl = { readContext: Ir, useCallback: hi, useContext: hi, useEffect: hi, useImperativeHandle: hi, useInsertionEffect: hi, useLayoutEffect: hi, useMemo: hi, useReducer: hi, useRef: hi, useState: hi, useDebugValue: hi, useDeferredValue: hi, useTransition: hi, useMutableSource: hi, useSyncExternalStore: hi, useId: hi, unstable_isNewReconciler: !1 }, Wd = { readContext: Ir, useCallback: function(l, u) {
      return Ca().memoizedState = [l, u === void 0 ? null : u], l;
    }, useContext: Ir, useEffect: hu, useImperativeHandle: function(l, u, v) {
      return v = v != null ? v.concat([l]) : null, Vc(
        4194308,
        4,
        no.bind(null, u, l),
        v
      );
    }, useLayoutEffect: function(l, u) {
      return Vc(4194308, 4, l, u);
    }, useInsertionEffect: function(l, u) {
      return Vc(4, 2, l, u);
    }, useMemo: function(l, u) {
      var v = Ca();
      return u = u === void 0 ? null : u, l = l(), v.memoizedState = [l, u], l;
    }, useReducer: function(l, u, v) {
      var S = Ca();
      return u = v !== void 0 ? v(u) : u, S.memoizedState = S.baseState = u, l = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: l, lastRenderedState: u }, S.queue = l, l = l.dispatch = kd.bind(null, ln, l), [S.memoizedState, l];
    }, useRef: function(l) {
      var u = Ca();
      return l = { current: l }, u.memoizedState = l;
    }, useState: Hr, useDebugValue: es, useDeferredValue: function(l) {
      var u = Hr(l), v = u[0], S = u[1];
      return hu(function() {
        var A = wn.transition;
        wn.transition = {};
        try {
          S(l);
        } finally {
          wn.transition = A;
        }
      }, [l]), v;
    }, useTransition: function() {
      var l = Hr(!1), u = l[0];
      return l = nl.bind(null, l[1]), Ca().memoizedState = l, [u, l];
    }, useMutableSource: function() {
    }, useSyncExternalStore: function(l, u, v) {
      var S = ln, A = Ca();
      if (On) {
        if (v === void 0)
          throw Error(c(407));
        v = v();
      } else {
        if (v = u(), oi === null)
          throw Error(c(349));
        bs & 30 || Vt(S, u, v);
      }
      A.memoizedState = v;
      var D = { value: v, getSnapshot: u };
      return A.queue = D, hu(fn.bind(null, S, D, l), [l]), S.flags |= 2048, el(9, Mn.bind(null, S, D, v, u), void 0, null), v;
    }, useId: function() {
      var l = Ca(), u = oi.identifierPrefix;
      if (On) {
        var v = Ka, S = Qa;
        v = (S & ~(1 << 32 - ji(S) - 1)).toString(32) + v, u = ":" + u + "R" + v, v = Qo++, 0 < v && (u += "H" + v.toString(32)), u += ":";
      } else
        v = Ko++, u = ":" + u + "r" + v.toString(32) + ":";
      return l.memoizedState = u;
    }, unstable_isNewReconciler: !1 }, Xd = {
      readContext: Ir,
      useCallback: Pa,
      useContext: Ir,
      useEffect: Ie,
      useImperativeHandle: $a,
      useInsertionEffect: pi,
      useLayoutEffect: tn,
      useMemo: tl,
      useReducer: du,
      useRef: tm,
      useState: function() {
        return du(La);
      },
      useDebugValue: es,
      useDeferredValue: function(l) {
        var u = du(La), v = u[0], S = u[1];
        return Ie(function() {
          var A = wn.transition;
          wn.transition = {};
          try {
            S(l);
          } finally {
            wn.transition = A;
          }
        }, [l]), v;
      },
      useTransition: function() {
        var l = du(La)[0], u = sa().memoizedState;
        return [l, u];
      },
      useMutableSource: to,
      useSyncExternalStore: Vd,
      useId: il,
      unstable_isNewReconciler: !1
    }, qd = {
      readContext: Ir,
      useCallback: Pa,
      useContext: Ir,
      useEffect: Ie,
      useImperativeHandle: $a,
      useInsertionEffect: pi,
      useLayoutEffect: tn,
      useMemo: tl,
      useReducer: Hc,
      useRef: tm,
      useState: function() {
        return Hc(La);
      },
      useDebugValue: es,
      useDeferredValue: function(l) {
        var u = Hc(La), v = u[0], S = u[1];
        return Ie(function() {
          var A = wn.transition;
          wn.transition = {};
          try {
            S(l);
          } finally {
            wn.transition = A;
          }
        }, [l]), v;
      },
      useTransition: function() {
        var l = Hc(La)[0], u = sa().memoizedState;
        return [l, u];
      },
      useMutableSource: to,
      useSyncExternalStore: Vd,
      useId: il,
      unstable_isNewReconciler: !1
    };
    function pu(l, u) {
      try {
        var v = "", S = u;
        do
          v += yy(S), S = S.return;
        while (S);
        var A = v;
      } catch (D) {
        A = `
Error generating stack: ` + D.message + `
` + D.stack;
      }
      return { value: l, source: u, stack: A };
    }
    function mu(l, u) {
      try {
        console.error(u.value);
      } catch (v) {
        setTimeout(function() {
          throw v;
        });
      }
    }
    var Yd = typeof WeakMap == "function" ? WeakMap : Map;
    function Yc(l, u, v) {
      v = Ja(-1, v), v.tag = 3, v.payload = { element: null };
      var S = u.value;
      return v.callback = function() {
        Su || (Su = !0, sf = S), mu(l, u);
      }, v;
    }
    function jc(l, u, v) {
      v = Ja(-1, v), v.tag = 3;
      var S = l.type.getDerivedStateFromError;
      if (typeof S == "function") {
        var A = u.value;
        v.payload = function() {
          return S(A);
        }, v.callback = function() {
          mu(l, u);
        };
      }
      var D = l.stateNode;
      return D !== null && typeof D.componentDidCatch == "function" && (v.callback = function() {
        mu(l, u), typeof S != "function" && (Cs === null ? Cs = /* @__PURE__ */ new Set([this]) : Cs.add(this));
        var j = u.stack;
        this.componentDidCatch(u.value, { componentStack: j !== null ? j : "" });
      }), v;
    }
    function vu(l, u, v) {
      var S = l.pingCache;
      if (S === null) {
        S = l.pingCache = new Yd();
        var A = /* @__PURE__ */ new Set();
        S.set(u, A);
      } else
        A = S.get(u), A === void 0 && (A = /* @__PURE__ */ new Set(), S.set(u, A));
      A.has(v) || (A.add(v), l = Ia.bind(null, l, u, v), u.then(l, l));
    }
    function io(l) {
      do {
        var u;
        if ((u = l.tag === 13) && (u = l.memoizedState, u = u !== null ? u.dehydrated !== null : !0), u)
          return l;
        l = l.return;
      } while (l !== null);
      return null;
    }
    function Zc(l, u, v, S, A) {
      return l.mode & 1 ? (l.flags |= 65536, l.lanes = A, l) : (l === u ? l.flags |= 65536 : (l.flags |= 128, v.flags |= 131072, v.flags &= -52805, v.tag === 1 && (v.alternate === null ? v.tag = 17 : (u = Ja(-1, 1), u.tag = 2, Es(v, u))), v.lanes |= 1), l);
    }
    function Vr(l) {
      l.flags |= 4;
    }
    function Jc(l, u) {
      if (l !== null && l.child === u.child)
        return !0;
      if (u.flags & 16)
        return !1;
      for (l = u.child; l !== null; ) {
        if (l.flags & 12854 || l.subtreeFlags & 12854)
          return !1;
        l = l.sibling;
      }
      return !0;
    }
    var ro, al, ws, gu;
    if (ie)
      ro = function(l, u) {
        for (var v = u.child; v !== null; ) {
          if (v.tag === 5 || v.tag === 6)
            Oe(l, v.stateNode);
          else if (v.tag !== 4 && v.child !== null) {
            v.child.return = v, v = v.child;
            continue;
          }
          if (v === u)
            break;
          for (; v.sibling === null; ) {
            if (v.return === null || v.return === u)
              return;
            v = v.return;
          }
          v.sibling.return = v.return, v = v.sibling;
        }
      }, al = function() {
      }, ws = function(l, u, v, S, A) {
        if (l = l.memoizedProps, l !== S) {
          var D = u.stateNode, j = ra(ar.current);
          v = ve(D, v, l, S, A, j), (u.updateQueue = v) && Vr(u);
        }
      }, gu = function(l, u, v, S) {
        v !== S && Vr(u);
      };
    else if (Re) {
      ro = function(l, u, v, S) {
        for (var A = u.child; A !== null; ) {
          if (A.tag === 5) {
            var D = A.stateNode;
            v && S && (D = Yn(D, A.type, A.memoizedProps, A)), Oe(l, D);
          } else if (A.tag === 6)
            D = A.stateNode, v && S && (D = fi(D, A.memoizedProps, A)), Oe(l, D);
          else if (A.tag !== 4) {
            if (A.tag === 22 && A.memoizedState !== null)
              D = A.child, D !== null && (D.return = A), ro(l, A, !0, !0);
            else if (A.child !== null) {
              A.child.return = A, A = A.child;
              continue;
            }
          }
          if (A === u)
            break;
          for (; A.sibling === null; ) {
            if (A.return === null || A.return === u)
              return;
            A = A.return;
          }
          A.sibling.return = A.return, A = A.sibling;
        }
      };
      var sl = function(l, u, v, S) {
        for (var A = u.child; A !== null; ) {
          if (A.tag === 5) {
            var D = A.stateNode;
            v && S && (D = Yn(D, A.type, A.memoizedProps, A)), gn(l, D);
          } else if (A.tag === 6)
            D = A.stateNode, v && S && (D = fi(D, A.memoizedProps, A)), gn(l, D);
          else if (A.tag !== 4) {
            if (A.tag === 22 && A.memoizedState !== null)
              D = A.child, D !== null && (D.return = A), sl(l, A, !0, !0);
            else if (A.child !== null) {
              A.child.return = A, A = A.child;
              continue;
            }
          }
          if (A === u)
            break;
          for (; A.sibling === null; ) {
            if (A.return === null || A.return === u)
              return;
            A = A.return;
          }
          A.sibling.return = A.return, A = A.sibling;
        }
      };
      al = function(l, u) {
        var v = u.stateNode;
        if (!Jc(l, u)) {
          l = v.containerInfo;
          var S = an(l);
          sl(S, u, !1, !1), v.pendingChildren = S, Vr(u), si(l, S);
        }
      }, ws = function(l, u, v, S, A) {
        var D = l.stateNode, j = l.memoizedProps;
        if ((l = Jc(l, u)) && j === S)
          u.stateNode = D;
        else {
          var ee = u.stateNode, Ee = ra(ar.current), ke = null;
          j !== S && (ke = ve(ee, v, j, S, A, Ee)), l && ke === null ? u.stateNode = D : (D = bn(D, ke, v, j, S, u, l, ee), ht(D, v, S, A, Ee) && Vr(u), u.stateNode = D, l ? Vr(u) : ro(D, u, !1, !1));
        }
      }, gu = function(l, u, v, S) {
        v !== S ? (l = ra(Ts.current), v = ra(ar.current), u.stateNode = Ye(S, l, v, u), Vr(u)) : u.stateNode = l.stateNode;
      };
    } else
      al = function() {
      }, ws = function() {
      }, gu = function() {
      };
    function oa(l, u) {
      if (!On)
        switch (l.tailMode) {
          case "hidden":
            u = l.tail;
            for (var v = null; u !== null; )
              u.alternate !== null && (v = u), u = u.sibling;
            v === null ? l.tail = null : v.sibling = null;
            break;
          case "collapsed":
            v = l.tail;
            for (var S = null; v !== null; )
              v.alternate !== null && (S = v), v = v.sibling;
            S === null ? u || l.tail === null ? l.tail = null : l.tail.sibling = null : S.sibling = null;
        }
    }
    function An(l) {
      var u = l.alternate !== null && l.alternate.child === l.child, v = 0, S = 0;
      if (u)
        for (var A = l.child; A !== null; )
          v |= A.lanes | A.childLanes, S |= A.subtreeFlags & 14680064, S |= A.flags & 14680064, A.return = l, A = A.sibling;
      else
        for (A = l.child; A !== null; )
          v |= A.lanes | A.childLanes, S |= A.subtreeFlags, S |= A.flags, A.return = l, A = A.sibling;
      return l.subtreeFlags |= S, l.childLanes = v, u;
    }
    function _y(l, u, v) {
      var S = u.pendingProps;
      switch (Fd(u), u.tag) {
        case 2:
        case 16:
        case 15:
        case 0:
        case 11:
        case 7:
        case 8:
        case 12:
        case 9:
        case 14:
          return An(u), null;
        case 1:
          return hn(u.type) && xr(), An(u), null;
        case 3:
          return S = u.stateNode, $s(), pt(Sn), pt(Bn), Aa(), S.pendingContext && (S.context = S.pendingContext, S.pendingContext = null), (l === null || l.child === null) && (au(u) ? Vr(u) : l === null || l.memoizedState.isDehydrated && !(u.flags & 256) || (u.flags |= 1024, zr !== null && (Tu(zr), zr = null))), al(l, u), An(u), null;
        case 5:
          Mr(u), v = ra(Ts.current);
          var A = u.type;
          if (l !== null && u.stateNode != null)
            ws(l, u, A, S, v), l.ref !== u.ref && (u.flags |= 512, u.flags |= 2097152);
          else {
            if (!S) {
              if (u.stateNode === null)
                throw Error(c(166));
              return An(u), null;
            }
            if (l = ra(ar.current), au(u)) {
              if (!Se)
                throw Error(c(175));
              l = Kl(u.stateNode, u.type, u.memoizedProps, v, l, u, !Yo), u.updateQueue = l, l !== null && Vr(u);
            } else {
              var D = be(A, S, v, l, u);
              ro(D, u, !1, !1), u.stateNode = D, ht(D, A, S, v, l) && Vr(u);
            }
            u.ref !== null && (u.flags |= 512, u.flags |= 2097152);
          }
          return An(u), null;
        case 6:
          if (l && u.stateNode != null)
            gu(l, u, l.memoizedProps, S);
          else {
            if (typeof S != "string" && u.stateNode === null)
              throw Error(c(166));
            if (l = ra(Ts.current), v = ra(ar.current), au(u)) {
              if (!Se)
                throw Error(c(176));
              if (l = u.stateNode, S = u.memoizedProps, (v = Sc(l, S, u, !Yo)) && (A = Sr, A !== null))
                switch (D = (A.mode & 1) !== 0, A.tag) {
                  case 3:
                    At(A.stateNode.containerInfo, l, S, D);
                    break;
                  case 5:
                    Nt(A.type, A.memoizedProps, A.stateNode, l, S, D);
                }
              v && Vr(u);
            } else
              u.stateNode = Ye(S, l, v, u);
          }
          return An(u), null;
        case 13:
          if (pt(Fn), S = u.memoizedState, On && wi !== null && u.mode & 1 && !(u.flags & 128)) {
            for (l = wi; l; )
              l = xa(l);
            return jo(), u.flags |= 98560, u;
          }
          if (S !== null && S.dehydrated !== null) {
            if (S = au(u), l === null) {
              if (!S)
                throw Error(c(318));
              if (!Se)
                throw Error(c(344));
              if (l = u.memoizedState, l = l !== null ? l.dehydrated : null, !l)
                throw Error(c(317));
              V(l, u);
            } else
              jo(), !(u.flags & 128) && (u.memoizedState = null), u.flags |= 4;
            return An(u), null;
          }
          return zr !== null && (Tu(zr), zr = null), u.flags & 128 ? (u.lanes = v, u) : (S = S !== null, v = !1, l === null ? au(u) : v = l.memoizedState !== null, S && !v && (u.child.flags |= 8192, u.mode & 1 && (l === null || Fn.current & 1 ? vi === 0 && (vi = 3) : dh())), u.updateQueue !== null && (u.flags |= 4), An(u), null);
        case 4:
          return $s(), al(l, u), l === null && Be(u.stateNode.containerInfo), An(u), null;
        case 10:
          return Rc(u.type._context), An(u), null;
        case 17:
          return hn(u.type) && xr(), An(u), null;
        case 19:
          if (pt(Fn), A = u.memoizedState, A === null)
            return An(u), null;
          if (S = (u.flags & 128) !== 0, D = A.rendering, D === null)
            if (S)
              oa(A, !1);
            else {
              if (vi !== 0 || l !== null && l.flags & 128)
                for (l = u.child; l !== null; ) {
                  if (D = eo(l), D !== null) {
                    for (u.flags |= 128, oa(A, !1), l = D.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), u.subtreeFlags = 0, l = v, S = u.child; S !== null; )
                      v = S, A = l, v.flags &= 14680066, D = v.alternate, D === null ? (v.childLanes = 0, v.lanes = A, v.child = null, v.subtreeFlags = 0, v.memoizedProps = null, v.memoizedState = null, v.updateQueue = null, v.dependencies = null, v.stateNode = null) : (v.childLanes = D.childLanes, v.lanes = D.lanes, v.child = D.child, v.subtreeFlags = 0, v.deletions = null, v.memoizedProps = D.memoizedProps, v.memoizedState = D.memoizedState, v.updateQueue = D.updateQueue, v.type = D.type, A = D.dependencies, v.dependencies = A === null ? null : { lanes: A.lanes, firstContext: A.firstContext }), S = S.sibling;
                    return yn(Fn, Fn.current & 1 | 2), u.child;
                  }
                  l = l.sibling;
                }
              A.tail !== null && Xn() > lh && (u.flags |= 128, S = !0, oa(A, !1), u.lanes = 4194304);
            }
          else {
            if (!S)
              if (l = eo(D), l !== null) {
                if (u.flags |= 128, S = !0, l = l.updateQueue, l !== null && (u.updateQueue = l, u.flags |= 4), oa(A, !0), A.tail === null && A.tailMode === "hidden" && !D.alternate && !On)
                  return An(u), null;
              } else
                2 * Xn() - A.renderingStartTime > lh && v !== 1073741824 && (u.flags |= 128, S = !0, oa(A, !1), u.lanes = 4194304);
            A.isBackwards ? (D.sibling = u.child, u.child = D) : (l = A.last, l !== null ? l.sibling = D : u.child = D, A.last = D);
          }
          return A.tail !== null ? (u = A.tail, A.rendering = u, A.tail = u.sibling, A.renderingStartTime = Xn(), u.sibling = null, l = Fn.current, yn(Fn, S ? l & 1 | 2 : l & 1), u) : (An(u), null);
        case 22:
        case 23:
          return Gr(), S = u.memoizedState !== null, l !== null && l.memoizedState !== null !== S && (u.flags |= 8192), S && u.mode & 1 ? Tr & 1073741824 && (An(u), ie && u.subtreeFlags & 6 && (u.flags |= 8192)) : An(u), null;
        case 24:
          return null;
        case 25:
          return null;
      }
      throw Error(c(156, u.tag));
    }
    var Nn = f.ReactCurrentOwner, Fi = !1;
    function xi(l, u, v, S) {
      u.child = l === null ? zc(u, null, v, S) : Zo(u, l.child, v, S);
    }
    function ol(l, u, v, S, A) {
      v = v.render;
      var D = u.ref;
      return Wo(u, A), S = $o(l, u, v, S, D, A), v = fu(), l !== null && !Fi ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~A, Zn(l, u, A)) : (On && v && Od(u), u.flags |= 1, xi(l, u, S, A), u.child);
    }
    function yu(l, u, v, S, A) {
      if (l === null) {
        var D = v.type;
        return typeof D == "function" && !vo(D) && D.defaultProps === void 0 && v.compare === null && v.defaultProps === void 0 ? (u.tag = 15, u.type = D, nm(l, u, D, S, A)) : (l = go(v.type, null, S, u, u.mode, A), l.ref = u.ref, l.return = u, u.child = l);
      }
      if (D = l.child, !(l.lanes & A)) {
        var j = D.memoizedProps;
        if (v = v.compare, v = v !== null ? v : wc, v(j, S) && l.ref === u.ref)
          return Zn(l, u, A);
      }
      return u.flags |= 1, l = ur(D, S), l.ref = u.ref, l.return = u, u.child = l;
    }
    function nm(l, u, v, S, A) {
      if (l !== null && wc(l.memoizedProps, S) && l.ref === u.ref)
        if (Fi = !1, (l.lanes & A) !== 0)
          l.flags & 131072 && (Fi = !0);
        else
          return u.lanes = l.lanes, Zn(l, u, A);
      return jd(l, u, v, S, A);
    }
    function im(l, u, v) {
      var S = u.pendingProps, A = S.children, D = l !== null ? l.memoizedState : null;
      if (S.mode === "hidden")
        if (!(u.mode & 1))
          u.memoizedState = { baseLanes: 0, cachePool: null }, yn(pl, Tr), Tr |= v;
        else if (v & 1073741824)
          u.memoizedState = { baseLanes: 0, cachePool: null }, S = D !== null ? D.baseLanes : v, yn(pl, Tr), Tr |= S;
        else
          return l = D !== null ? D.baseLanes | v : v, u.lanes = u.childLanes = 1073741824, u.memoizedState = { baseLanes: l, cachePool: null }, u.updateQueue = null, yn(pl, Tr), Tr |= l, null;
      else
        D !== null ? (S = D.baseLanes | v, u.memoizedState = null) : S = v, yn(pl, Tr), Tr |= S;
      return xi(l, u, A, v), u.child;
    }
    function rm(l, u) {
      var v = u.ref;
      (l === null && v !== null || l !== null && l.ref !== v) && (u.flags |= 512, u.flags |= 2097152);
    }
    function jd(l, u, v, S, A) {
      var D = hn(v) ? qi : Bn.current;
      return D = Sa(u, D), Wo(u, A), v = $o(l, u, v, S, D, A), S = fu(), l !== null && !Fi ? (u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~A, Zn(l, u, A)) : (On && S && Od(u), u.flags |= 1, xi(l, u, v, A), u.child);
    }
    function Qc(l, u, v, S, A) {
      if (hn(v)) {
        var D = !0;
        Ma(u);
      } else
        D = !1;
      if (Wo(u, A), u.stateNode === null)
        l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), Kp(u, v, S), Id(u, v, S, A), S = !0;
      else if (l === null) {
        var j = u.stateNode, ee = u.memoizedProps;
        j.props = ee;
        var Ee = j.context, ke = v.contextType;
        typeof ke == "object" && ke !== null ? ke = Ir(ke) : (ke = hn(v) ? qi : Bn.current, ke = Sa(u, ke));
        var Qe = v.getDerivedStateFromProps, Ot = typeof Qe == "function" || typeof j.getSnapshotBeforeUpdate == "function";
        Ot || typeof j.UNSAFE_componentWillReceiveProps != "function" && typeof j.componentWillReceiveProps != "function" || (ee !== S || Ee !== ke) && $p(u, j, S, ke), wa = !1;
        var Lt = u.memoizedState;
        j.state = Lt, Lc(u, S, j, A), Ee = u.memoizedState, ee !== S || Lt !== Ee || Sn.current || wa ? (typeof Qe == "function" && (Pc(u, v, Qe, S), Ee = u.memoizedState), (ee = wa || Qp(u, v, ee, S, Lt, Ee, ke)) ? (Ot || typeof j.UNSAFE_componentWillMount != "function" && typeof j.componentWillMount != "function" || (typeof j.componentWillMount == "function" && j.componentWillMount(), typeof j.UNSAFE_componentWillMount == "function" && j.UNSAFE_componentWillMount()), typeof j.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof j.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = S, u.memoizedState = Ee), j.props = S, j.state = Ee, j.context = ke, S = ee) : (typeof j.componentDidMount == "function" && (u.flags |= 4194308), S = !1);
      } else {
        j = u.stateNode, ru(l, u), ee = u.memoizedProps, ke = u.type === u.elementType ? ee : ta(u.type, ee), j.props = ke, Ot = u.pendingProps, Lt = j.context, Ee = v.contextType, typeof Ee == "object" && Ee !== null ? Ee = Ir(Ee) : (Ee = hn(v) ? qi : Bn.current, Ee = Sa(u, Ee));
        var Cn = v.getDerivedStateFromProps;
        (Qe = typeof Cn == "function" || typeof j.getSnapshotBeforeUpdate == "function") || typeof j.UNSAFE_componentWillReceiveProps != "function" && typeof j.componentWillReceiveProps != "function" || (ee !== Ot || Lt !== Ee) && $p(u, j, S, Ee), wa = !1, Lt = u.memoizedState, j.state = Lt, Lc(u, S, j, A);
        var Et = u.memoizedState;
        ee !== Ot || Lt !== Et || Sn.current || wa ? (typeof Cn == "function" && (Pc(u, v, Cn, S), Et = u.memoizedState), (ke = wa || Qp(u, v, ke, S, Lt, Et, Ee) || !1) ? (Qe || typeof j.UNSAFE_componentWillUpdate != "function" && typeof j.componentWillUpdate != "function" || (typeof j.componentWillUpdate == "function" && j.componentWillUpdate(
          S,
          Et,
          Ee
        ), typeof j.UNSAFE_componentWillUpdate == "function" && j.UNSAFE_componentWillUpdate(S, Et, Ee)), typeof j.componentDidUpdate == "function" && (u.flags |= 4), typeof j.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof j.componentDidUpdate != "function" || ee === l.memoizedProps && Lt === l.memoizedState || (u.flags |= 4), typeof j.getSnapshotBeforeUpdate != "function" || ee === l.memoizedProps && Lt === l.memoizedState || (u.flags |= 1024), u.memoizedProps = S, u.memoizedState = Et), j.props = S, j.state = Et, j.context = Ee, S = ke) : (typeof j.componentDidUpdate != "function" || ee === l.memoizedProps && Lt === l.memoizedState || (u.flags |= 4), typeof j.getSnapshotBeforeUpdate != "function" || ee === l.memoizedProps && Lt === l.memoizedState || (u.flags |= 1024), S = !1);
      }
      return Zd(l, u, v, S, D, A);
    }
    function Zd(l, u, v, S, A, D) {
      rm(l, u);
      var j = (u.flags & 128) !== 0;
      if (!S && !j)
        return A && $l(u, v, !1), Zn(l, u, D);
      S = u.stateNode, Nn.current = u;
      var ee = j && typeof v.getDerivedStateFromError != "function" ? null : S.render();
      return u.flags |= 1, l !== null && j ? (u.child = Zo(u, l.child, null, D), u.child = Zo(u, null, ee, D)) : xi(l, u, ee, D), u.memoizedState = S.state, A && $l(u, v, !0), u.child;
    }
    function Kc(l) {
      var u = l.stateNode;
      u.pendingContext ? Vo(l, u.pendingContext, u.pendingContext !== u.context) : u.context && Vo(l, u.context, !1), Bc(l, u.containerInfo);
    }
    function Jd(l, u, v, S, A) {
      return jo(), su(A), u.flags |= 256, xi(l, u, v, S), u.child;
    }
    var $c = { dehydrated: null, treeContext: null, retryLane: 0 };
    function ao(l) {
      return { baseLanes: l, cachePool: null };
    }
    function am(l, u, v) {
      var S = u.pendingProps, A = Fn.current, D = !1, j = (u.flags & 128) !== 0, ee;
      if ((ee = j) || (ee = l !== null && l.memoizedState === null ? !1 : (A & 2) !== 0), ee ? (D = !0, u.flags &= -129) : (l === null || l.memoizedState !== null) && (A |= 1), yn(Fn, A & 1), l === null)
        return Oc(u), l = u.memoizedState, l !== null && (l = l.dehydrated, l !== null) ? (u.mode & 1 ? _r(l) ? u.lanes = 8 : u.lanes = 1073741824 : u.lanes = 1, null) : (A = S.children, l = S.fallback, D ? (S = u.mode, D = u.child, A = { mode: "hidden", children: A }, !(S & 1) && D !== null ? (D.childLanes = 0, D.pendingProps = A) : D = Au(A, S, 0, null), l = Ns(l, S, v, null), D.return = u, l.return = u, D.sibling = l, u.child = D, u.child.memoizedState = ao(v), u.memoizedState = $c, l) : ef(u, A));
      if (A = l.memoizedState, A !== null) {
        if (ee = A.dehydrated, ee !== null) {
          if (j)
            return u.flags & 256 ? (u.flags &= -257, Da(l, u, v, Error(c(422)))) : u.memoizedState !== null ? (u.child = l.child, u.flags |= 128, null) : (D = S.fallback, A = u.mode, S = Au({ mode: "visible", children: S.children }, A, 0, null), D = Ns(D, A, v, null), D.flags |= 2, S.return = u, D.return = u, S.sibling = D, u.child = S, u.mode & 1 && Zo(
              u,
              l.child,
              null,
              v
            ), u.child.memoizedState = ao(v), u.memoizedState = $c, D);
          if (!(u.mode & 1))
            u = Da(l, u, v, null);
          else if (_r(ee))
            u = Da(l, u, v, Error(c(419)));
          else if (S = (v & l.childLanes) !== 0, Fi || S) {
            if (S = oi, S !== null) {
              switch (v & -v) {
                case 4:
                  D = 2;
                  break;
                case 16:
                  D = 8;
                  break;
                case 64:
                case 128:
                case 256:
                case 512:
                case 1024:
                case 2048:
                case 4096:
                case 8192:
                case 16384:
                case 32768:
                case 65536:
                case 131072:
                case 262144:
                case 524288:
                case 1048576:
                case 2097152:
                case 4194304:
                case 8388608:
                case 16777216:
                case 33554432:
                case 67108864:
                  D = 32;
                  break;
                case 536870912:
                  D = 268435456;
                  break;
                default:
                  D = 0;
              }
              S = D & (S.suspendedLanes | v) ? 0 : D, S !== 0 && S !== A.retryLane && (A.retryLane = S, kr(l, S, -1));
            }
            dh(), u = Da(l, u, v, Error(c(421)));
          } else
            _c(ee) ? (u.flags |= 128, u.child = l.child, u = Ey.bind(null, l), Zs(ee, u), u = null) : (v = A.treeContext, Se && (wi = Oi(ee), Sr = u, On = !0, zr = null, Yo = !1, v !== null && (Or[Fr++] = Qa, Or[Fr++] = Ka, Or[Fr++] = Js, Qa = v.id, Ka = v.overflow, Js = u)), u = ef(u, u.pendingProps.children), u.flags |= 4096);
          return u;
        }
        return D ? (S = om(l, u, S.children, S.fallback, v), D = u.child, A = l.child.memoizedState, D.memoizedState = A === null ? ao(v) : { baseLanes: A.baseLanes | v, cachePool: null }, D.childLanes = l.childLanes & ~v, u.memoizedState = $c, S) : (v = sm(l, u, S.children, v), u.memoizedState = null, v);
      }
      return D ? (S = om(l, u, S.children, S.fallback, v), D = u.child, A = l.child.memoizedState, D.memoizedState = A === null ? ao(v) : { baseLanes: A.baseLanes | v, cachePool: null }, D.childLanes = l.childLanes & ~v, u.memoizedState = $c, S) : (v = sm(l, u, S.children, v), u.memoizedState = null, v);
    }
    function ef(l, u) {
      return u = Au({ mode: "visible", children: u }, l.mode, 0, null), u.return = l, l.child = u;
    }
    function sm(l, u, v, S) {
      var A = l.child;
      return l = A.sibling, v = ur(A, { mode: "visible", children: v }), !(u.mode & 1) && (v.lanes = S), v.return = u, v.sibling = null, l !== null && (S = u.deletions, S === null ? (u.deletions = [l], u.flags |= 16) : S.push(l)), u.child = v;
    }
    function om(l, u, v, S, A) {
      var D = u.mode;
      l = l.child;
      var j = l.sibling, ee = { mode: "hidden", children: v };
      return !(D & 1) && u.child !== l ? (v = u.child, v.childLanes = 0, v.pendingProps = ee, u.deletions = null) : (v = ur(l, ee), v.subtreeFlags = l.subtreeFlags & 14680064), j !== null ? S = ur(j, S) : (S = Ns(S, D, A, null), S.flags |= 2), S.return = u, v.return = u, v.sibling = S, u.child = v, S;
    }
    function Da(l, u, v, S) {
      return S !== null && su(S), Zo(u, l.child, null, v), l = ef(u, u.pendingProps.children), l.flags |= 2, u.memoizedState = null, l;
    }
    function ll(l, u, v) {
      l.lanes |= u;
      var S = l.alternate;
      S !== null && (S.lanes |= u), Nd(l.return, u, v);
    }
    function ts(l, u, v, S, A) {
      var D = l.memoizedState;
      D === null ? l.memoizedState = { isBackwards: u, rendering: null, renderingStartTime: 0, last: S, tail: v, tailMode: A } : (D.isBackwards = u, D.rendering = null, D.renderingStartTime = 0, D.last = S, D.tail = v, D.tailMode = A);
    }
    function tf(l, u, v) {
      var S = u.pendingProps, A = S.revealOrder, D = S.tail;
      if (xi(l, u, S.children, v), S = Fn.current, S & 2)
        S = S & 1 | 2, u.flags |= 128;
      else {
        if (l !== null && l.flags & 128)
          e:
            for (l = u.child; l !== null; ) {
              if (l.tag === 13)
                l.memoizedState !== null && ll(l, v, u);
              else if (l.tag === 19)
                ll(l, v, u);
              else if (l.child !== null) {
                l.child.return = l, l = l.child;
                continue;
              }
              if (l === u)
                break e;
              for (; l.sibling === null; ) {
                if (l.return === null || l.return === u)
                  break e;
                l = l.return;
              }
              l.sibling.return = l.return, l = l.sibling;
            }
        S &= 1;
      }
      if (yn(Fn, S), !(u.mode & 1))
        u.memoizedState = null;
      else
        switch (A) {
          case "forwards":
            for (v = u.child, A = null; v !== null; )
              l = v.alternate, l !== null && eo(l) === null && (A = v), v = v.sibling;
            v = A, v === null ? (A = u.child, u.child = null) : (A = v.sibling, v.sibling = null), ts(u, !1, A, v, D);
            break;
          case "backwards":
            for (v = null, A = u.child, u.child = null; A !== null; ) {
              if (l = A.alternate, l !== null && eo(l) === null) {
                u.child = A;
                break;
              }
              l = A.sibling, A.sibling = v, v = A, A = l;
            }
            ts(u, !0, v, null, D);
            break;
          case "together":
            ts(u, !1, null, null, void 0);
            break;
          default:
            u.memoizedState = null;
        }
      return u.child;
    }
    function Zn(l, u, v) {
      if (l !== null && (u.dependencies = l.dependencies), Ua |= u.lanes, !(v & u.childLanes))
        return null;
      if (l !== null && u.child !== l.child)
        throw Error(c(153));
      if (u.child !== null) {
        for (l = u.child, v = ur(l, l.pendingProps), u.child = v, v.return = u; l.sibling !== null; )
          l = l.sibling, v = v.sibling = ur(l, l.pendingProps), v.return = u;
        v.sibling = null;
      }
      return u.child;
    }
    function ul(l, u, v) {
      switch (u.tag) {
        case 3:
          Kc(u), jo();
          break;
        case 5:
          cu(u);
          break;
        case 1:
          hn(u.type) && Ma(u);
          break;
        case 4:
          Bc(u, u.stateNode.containerInfo);
          break;
        case 10:
          Dd(u, u.type._context, u.memoizedProps.value);
          break;
        case 13:
          var S = u.memoizedState;
          if (S !== null)
            return S.dehydrated !== null ? (yn(Fn, Fn.current & 1), u.flags |= 128, null) : v & u.child.childLanes ? am(l, u, v) : (yn(Fn, Fn.current & 1), l = Zn(l, u, v), l !== null ? l.sibling : null);
          yn(Fn, Fn.current & 1);
          break;
        case 19:
          if (S = (v & u.childLanes) !== 0, l.flags & 128) {
            if (S)
              return tf(
                l,
                u,
                v
              );
            u.flags |= 128;
          }
          var A = u.memoizedState;
          if (A !== null && (A.rendering = null, A.tail = null, A.lastEffect = null), yn(Fn, Fn.current), S)
            break;
          return null;
        case 22:
        case 23:
          return u.lanes = 0, im(l, u, v);
      }
      return Zn(l, u, v);
    }
    function Gt(l, u) {
      switch (Fd(u), u.tag) {
        case 1:
          return hn(u.type) && xr(), l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
        case 3:
          return $s(), pt(Sn), pt(Bn), Aa(), l = u.flags, l & 65536 && !(l & 128) ? (u.flags = l & -65537 | 128, u) : null;
        case 5:
          return Mr(u), null;
        case 13:
          if (pt(Fn), l = u.memoizedState, l !== null && l.dehydrated !== null) {
            if (u.alternate === null)
              throw Error(c(340));
            jo();
          }
          return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
        case 19:
          return pt(Fn), null;
        case 4:
          return $s(), null;
        case 10:
          return Rc(u.type._context), null;
        case 22:
        case 23:
          return Gr(), null;
        case 24:
          return null;
        default:
          return null;
      }
    }
    var so = !1, As = !1, iM = typeof WeakSet == "function" ? WeakSet : Set, rt = null;
    function cl(l, u) {
      var v = l.ref;
      if (v !== null)
        if (typeof v == "function")
          try {
            v(null);
          } catch (S) {
            pn(l, u, S);
          }
        else
          v.current = null;
    }
    function oo(l, u, v) {
      try {
        v();
      } catch (S) {
        pn(l, u, S);
      }
    }
    var lm = !1;
    function um(l, u) {
      for (ue(l.containerInfo), rt = u; rt !== null; )
        if (l = rt, u = l.child, (l.subtreeFlags & 1028) !== 0 && u !== null)
          u.return = l, rt = u;
        else
          for (; rt !== null; ) {
            l = rt;
            try {
              var v = l.alternate;
              if (l.flags & 1024)
                switch (l.tag) {
                  case 0:
                  case 11:
                  case 15:
                    break;
                  case 1:
                    if (v !== null) {
                      var S = v.memoizedProps, A = v.memoizedState, D = l.stateNode, j = D.getSnapshotBeforeUpdate(l.elementType === l.type ? S : ta(l.type, S), A);
                      D.__reactInternalSnapshotBeforeUpdate = j;
                    }
                    break;
                  case 3:
                    ie && Ze(l.stateNode.containerInfo);
                    break;
                  case 5:
                  case 6:
                  case 4:
                  case 17:
                    break;
                  default:
                    throw Error(c(163));
                }
            } catch (ee) {
              pn(l, l.return, ee);
            }
            if (u = l.sibling, u !== null) {
              u.return = l.return, rt = u;
              break;
            }
            rt = l.return;
          }
      return v = lm, lm = !1, v;
    }
    function lo(l, u, v) {
      var S = u.updateQueue;
      if (S = S !== null ? S.lastEffect : null, S !== null) {
        var A = S = S.next;
        do {
          if ((A.tag & l) === l) {
            var D = A.destroy;
            A.destroy = void 0, D !== void 0 && oo(u, v, D);
          }
          A = A.next;
        } while (A !== S);
      }
    }
    function uo(l, u) {
      if (u = u.updateQueue, u = u !== null ? u.lastEffect : null, u !== null) {
        var v = u = u.next;
        do {
          if ((v.tag & l) === l) {
            var S = v.create;
            v.destroy = S();
          }
          v = v.next;
        } while (v !== u);
      }
    }
    function Qd(l) {
      var u = l.ref;
      if (u !== null) {
        var v = l.stateNode;
        switch (l.tag) {
          case 5:
            l = Me(v);
            break;
          default:
            l = v;
        }
        typeof u == "function" ? u(l) : u.current = l;
      }
    }
    function Kd(l, u, v) {
      if (Ea && typeof Ea.onCommitFiberUnmount == "function")
        try {
          Ea.onCommitFiberUnmount(Tc, u);
        } catch {
        }
      switch (u.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          if (l = u.updateQueue, l !== null && (l = l.lastEffect, l !== null)) {
            var S = l = l.next;
            do {
              var A = S, D = A.destroy;
              A = A.tag, D !== void 0 && (A & 2 || A & 4) && oo(u, v, D), S = S.next;
            } while (S !== l);
          }
          break;
        case 1:
          if (cl(u, v), l = u.stateNode, typeof l.componentWillUnmount == "function")
            try {
              l.props = u.memoizedProps, l.state = u.memoizedState, l.componentWillUnmount();
            } catch (j) {
              pn(
                u,
                v,
                j
              );
            }
          break;
        case 5:
          cl(u, v);
          break;
        case 4:
          ie ? mi(l, u, v) : Re && Re && (u = u.stateNode.containerInfo, v = an(u), _t(u, v));
      }
    }
    function $d(l, u, v) {
      for (var S = u; ; )
        if (Kd(l, S, v), S.child === null || ie && S.tag === 4) {
          if (S === u)
            break;
          for (; S.sibling === null; ) {
            if (S.return === null || S.return === u)
              return;
            S = S.return;
          }
          S.sibling.return = S.return, S = S.sibling;
        } else
          S.child.return = S, S = S.child;
    }
    function la(l) {
      var u = l.alternate;
      u !== null && (l.alternate = null, la(u)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (u = l.stateNode, u !== null && W(u)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null;
    }
    function fl(l) {
      return l.tag === 5 || l.tag === 3 || l.tag === 4;
    }
    function dl(l) {
      e:
        for (; ; ) {
          for (; l.sibling === null; ) {
            if (l.return === null || fl(l.return))
              return null;
            l = l.return;
          }
          for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && l.tag !== 18; ) {
            if (l.flags & 2 || l.child === null || l.tag === 4)
              continue e;
            l.child.return = l, l = l.child;
          }
          if (!(l.flags & 2))
            return l.stateNode;
        }
    }
    function nf(l) {
      if (ie) {
        e: {
          for (var u = l.return; u !== null; ) {
            if (fl(u))
              break e;
            u = u.return;
          }
          throw Error(c(160));
        }
        var v = u;
        switch (v.tag) {
          case 5:
            u = v.stateNode, v.flags & 32 && (ot(u), v.flags &= -33), v = dl(l), Er(l, v, u);
            break;
          case 3:
          case 4:
            u = v.stateNode.containerInfo, v = dl(l), co(l, v, u);
            break;
          default:
            throw Error(c(161));
        }
      }
    }
    function co(l, u, v) {
      var S = l.tag;
      if (S === 5 || S === 6)
        l = l.stateNode, u ? wt(v, l, u) : Ft(v, l);
      else if (S !== 4 && (l = l.child, l !== null))
        for (co(l, u, v), l = l.sibling; l !== null; )
          co(l, u, v), l = l.sibling;
    }
    function Er(l, u, v) {
      var S = l.tag;
      if (S === 5 || S === 6)
        l = l.stateNode, u ? ut(v, l, u) : ft(v, l);
      else if (S !== 4 && (l = l.child, l !== null))
        for (Er(l, u, v), l = l.sibling; l !== null; )
          Er(l, u, v), l = l.sibling;
    }
    function mi(l, u, v) {
      for (var S = u, A = !1, D, j; ; ) {
        if (!A) {
          A = S.return;
          e:
            for (; ; ) {
              if (A === null)
                throw Error(c(160));
              switch (D = A.stateNode, A.tag) {
                case 5:
                  j = !1;
                  break e;
                case 3:
                  D = D.containerInfo, j = !0;
                  break e;
                case 4:
                  D = D.containerInfo, j = !0;
                  break e;
              }
              A = A.return;
            }
          A = !0;
        }
        if (S.tag === 5 || S.tag === 6)
          $d(l, S, v), j ? en(D, S.stateNode) : et(D, S.stateNode);
        else if (S.tag === 18)
          j ? tt(D, S.stateNode) : he(D, S.stateNode);
        else if (S.tag === 4) {
          if (S.child !== null) {
            D = S.stateNode.containerInfo, j = !0, S.child.return = S, S = S.child;
            continue;
          }
        } else if (Kd(l, S, v), S.child !== null) {
          S.child.return = S, S = S.child;
          continue;
        }
        if (S === u)
          break;
        for (; S.sibling === null; ) {
          if (S.return === null || S.return === u)
            return;
          S = S.return, S.tag === 4 && (A = !1);
        }
        S.sibling.return = S.return, S = S.sibling;
      }
    }
    function eh(l, u) {
      if (ie) {
        switch (u.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            lo(3, u, u.return), uo(3, u), lo(5, u, u.return);
            return;
          case 1:
            return;
          case 5:
            var v = u.stateNode;
            if (v != null) {
              var S = u.memoizedProps;
              l = l !== null ? l.memoizedProps : S;
              var A = u.type, D = u.updateQueue;
              u.updateQueue = null, D !== null && Xe(v, D, A, l, S, u);
            }
            return;
          case 6:
            if (u.stateNode === null)
              throw Error(c(162));
            v = u.memoizedProps, vt(u.stateNode, l !== null ? l.memoizedProps : v, v);
            return;
          case 3:
            Se && l !== null && l.memoizedState.isDehydrated && me(u.stateNode.containerInfo);
            return;
          case 12:
            return;
          case 13:
            rf(u);
            return;
          case 19:
            rf(u);
            return;
          case 17:
            return;
        }
        throw Error(c(163));
      }
      switch (u.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          lo(3, u, u.return), uo(3, u), lo(5, u, u.return);
          return;
        case 12:
          return;
        case 13:
          rf(u);
          return;
        case 19:
          rf(u);
          return;
        case 3:
          Se && l !== null && l.memoizedState.isDehydrated && me(u.stateNode.containerInfo);
          break;
        case 22:
        case 23:
          return;
      }
      e:
        if (Re) {
          switch (u.tag) {
            case 1:
            case 5:
            case 6:
              break e;
            case 3:
            case 4:
              u = u.stateNode, _t(u.containerInfo, u.pendingChildren);
              break e;
          }
          throw Error(c(163));
        }
    }
    function rf(l) {
      var u = l.updateQueue;
      if (u !== null) {
        l.updateQueue = null;
        var v = l.stateNode;
        v === null && (v = l.stateNode = new iM()), u.forEach(function(S) {
          var A = mo.bind(null, l, S);
          v.has(S) || (v.add(S), S.then(A, A));
        });
      }
    }
    function xy(l, u) {
      for (rt = u; rt !== null; ) {
        u = rt;
        var v = u.deletions;
        if (v !== null)
          for (var S = 0; S < v.length; S++) {
            var A = v[S];
            try {
              var D = l;
              ie ? mi(D, A, u) : $d(D, A, u);
              var j = A.alternate;
              j !== null && (j.return = null), A.return = null;
            } catch (xt) {
              pn(A, u, xt);
            }
          }
        if (v = u.child, u.subtreeFlags & 12854 && v !== null)
          v.return = u, rt = v;
        else
          for (; rt !== null; ) {
            u = rt;
            try {
              var ee = u.flags;
              if (ee & 32 && ie && ot(u.stateNode), ee & 512) {
                var Ee = u.alternate;
                if (Ee !== null) {
                  var ke = Ee.ref;
                  ke !== null && (typeof ke == "function" ? ke(null) : ke.current = null);
                }
              }
              if (ee & 8192)
                switch (u.tag) {
                  case 13:
                    if (u.memoizedState !== null) {
                      var Qe = u.alternate;
                      (Qe === null || Qe.memoizedState === null) && (oh = Xn());
                    }
                    break;
                  case 22:
                    var Ot = u.memoizedState !== null, Lt = u.alternate, Cn = Lt !== null && Lt.memoizedState !== null;
                    if (v = u, ie) {
                      e:
                        if (S = v, A = Ot, D = null, ie)
                          for (var Et = S; ; ) {
                            if (Et.tag === 5) {
                              if (D === null) {
                                D = Et;
                                var Ci = Et.stateNode;
                                A ? G(Ci) : qe(Et.stateNode, Et.memoizedProps);
                              }
                            } else if (Et.tag === 6) {
                              if (D === null) {
                                var Ji = Et.stateNode;
                                A ? de(Ji) : Ke(Ji, Et.memoizedProps);
                              }
                            } else if ((Et.tag !== 22 && Et.tag !== 23 || Et.memoizedState === null || Et === S) && Et.child !== null) {
                              Et.child.return = Et, Et = Et.child;
                              continue;
                            }
                            if (Et === S)
                              break;
                            for (; Et.sibling === null; ) {
                              if (Et.return === null || Et.return === S)
                                break e;
                              D === Et && (D = null), Et = Et.return;
                            }
                            D === Et && (D = null), Et.sibling.return = Et.return, Et = Et.sibling;
                          }
                    }
                    if (Ot && !Cn && v.mode & 1) {
                      rt = v;
                      for (var ce = v.child; ce !== null; ) {
                        for (v = rt = ce; rt !== null; ) {
                          S = rt;
                          var te = S.child;
                          switch (S.tag) {
                            case 0:
                            case 11:
                            case 14:
                            case 15:
                              lo(4, S, S.return);
                              break;
                            case 1:
                              cl(S, S.return);
                              var ge = S.stateNode;
                              if (typeof ge.componentWillUnmount == "function") {
                                var it = S.return;
                                try {
                                  ge.props = S.memoizedProps, ge.state = S.memoizedState, ge.componentWillUnmount();
                                } catch (xt) {
                                  pn(
                                    S,
                                    it,
                                    xt
                                  );
                                }
                              }
                              break;
                            case 5:
                              cl(S, S.return);
                              break;
                            case 22:
                              if (S.memoizedState !== null) {
                                fm(v);
                                continue;
                              }
                          }
                          te !== null ? (te.return = S, rt = te) : fm(v);
                        }
                        ce = ce.sibling;
                      }
                    }
                }
              switch (ee & 4102) {
                case 2:
                  nf(u), u.flags &= -3;
                  break;
                case 6:
                  nf(u), u.flags &= -3, eh(u.alternate, u);
                  break;
                case 4096:
                  u.flags &= -4097;
                  break;
                case 4100:
                  u.flags &= -4097, eh(u.alternate, u);
                  break;
                case 4:
                  eh(u.alternate, u);
              }
            } catch (xt) {
              pn(u, u.return, xt);
            }
            if (v = u.sibling, v !== null) {
              v.return = u.return, rt = v;
              break;
            }
            rt = u.return;
          }
      }
    }
    function cm(l, u, v) {
      rt = l, th(l);
    }
    function th(l, u, v) {
      for (var S = (l.mode & 1) !== 0; rt !== null; ) {
        var A = rt, D = A.child;
        if (A.tag === 22 && S) {
          var j = A.memoizedState !== null || so;
          if (!j) {
            var ee = A.alternate, Ee = ee !== null && ee.memoizedState !== null || As;
            ee = so;
            var ke = As;
            if (so = j, (As = Ee) && !ke)
              for (rt = A; rt !== null; )
                j = rt, Ee = j.child, j.tag === 22 && j.memoizedState !== null ? dm(A) : Ee !== null ? (Ee.return = j, rt = Ee) : dm(A);
            for (; D !== null; )
              rt = D, th(D), D = D.sibling;
            rt = A, so = ee, As = ke;
          }
          nh(l);
        } else
          A.subtreeFlags & 8772 && D !== null ? (D.return = A, rt = D) : nh(l);
      }
    }
    function nh(l) {
      for (; rt !== null; ) {
        var u = rt;
        if (u.flags & 8772) {
          var v = u.alternate;
          try {
            if (u.flags & 8772)
              switch (u.tag) {
                case 0:
                case 11:
                case 15:
                  As || uo(5, u);
                  break;
                case 1:
                  var S = u.stateNode;
                  if (u.flags & 4 && !As)
                    if (v === null)
                      S.componentDidMount();
                    else {
                      var A = u.elementType === u.type ? v.memoizedProps : ta(u.type, v.memoizedProps);
                      S.componentDidUpdate(A, v.memoizedState, S.__reactInternalSnapshotBeforeUpdate);
                    }
                  var D = u.updateQueue;
                  D !== null && Zp(u, D, S);
                  break;
                case 3:
                  var j = u.updateQueue;
                  if (j !== null) {
                    if (v = null, u.child !== null)
                      switch (u.child.tag) {
                        case 5:
                          v = Me(u.child.stateNode);
                          break;
                        case 1:
                          v = u.child.stateNode;
                      }
                    Zp(u, j, v);
                  }
                  break;
                case 5:
                  var ee = u.stateNode;
                  v === null && u.flags & 4 && Te(ee, u.type, u.memoizedProps, u);
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (Se && u.memoizedState === null) {
                    var Ee = u.alternate;
                    if (Ee !== null) {
                      var ke = Ee.memoizedState;
                      if (ke !== null) {
                        var Qe = ke.dehydrated;
                        Qe !== null && pe(Qe);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                  break;
                default:
                  throw Error(c(163));
              }
            As || u.flags & 512 && Qd(u);
          } catch (Ot) {
            pn(u, u.return, Ot);
          }
        }
        if (u === l) {
          rt = null;
          break;
        }
        if (v = u.sibling, v !== null) {
          v.return = u.return, rt = v;
          break;
        }
        rt = u.return;
      }
    }
    function fm(l) {
      for (; rt !== null; ) {
        var u = rt;
        if (u === l) {
          rt = null;
          break;
        }
        var v = u.sibling;
        if (v !== null) {
          v.return = u.return, rt = v;
          break;
        }
        rt = u.return;
      }
    }
    function dm(l) {
      for (; rt !== null; ) {
        var u = rt;
        try {
          switch (u.tag) {
            case 0:
            case 11:
            case 15:
              var v = u.return;
              try {
                uo(4, u);
              } catch (Ee) {
                pn(u, v, Ee);
              }
              break;
            case 1:
              var S = u.stateNode;
              if (typeof S.componentDidMount == "function") {
                var A = u.return;
                try {
                  S.componentDidMount();
                } catch (Ee) {
                  pn(u, A, Ee);
                }
              }
              var D = u.return;
              try {
                Qd(u);
              } catch (Ee) {
                pn(u, D, Ee);
              }
              break;
            case 5:
              var j = u.return;
              try {
                Qd(u);
              } catch (Ee) {
                pn(u, j, Ee);
              }
          }
        } catch (Ee) {
          pn(u, u.return, Ee);
        }
        if (u === l) {
          rt = null;
          break;
        }
        var ee = u.sibling;
        if (ee !== null) {
          ee.return = u.return, rt = ee;
          break;
        }
        rt = u.return;
      }
    }
    var af = 0, Jn = 1, fo = 2, _u = 3, ns = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var hl = Symbol.for;
      af = hl("selector.component"), Jn = hl("selector.has_pseudo_class"), fo = hl("selector.role"), _u = hl("selector.test_id"), ns = hl("selector.text");
    }
    function ih(l) {
      var u = He(l);
      if (u != null) {
        if (typeof u.memoizedProps["data-testname"] != "string")
          throw Error(c(364));
        return u;
      }
      if (l = Ae(l), l === null)
        throw Error(c(362));
      return l.stateNode.current;
    }
    function rh(l, u) {
      switch (u.$$typeof) {
        case af:
          if (l.type === u.value)
            return !0;
          break;
        case Jn:
          e: {
            u = u.value, l = [l, 0];
            for (var v = 0; v < l.length; ) {
              var S = l[v++], A = l[v++], D = u[A];
              if (S.tag !== 5 || !Ne(S)) {
                for (; D != null && rh(S, D); )
                  A++, D = u[A];
                if (A === u.length) {
                  u = !0;
                  break e;
                } else
                  for (S = S.child; S !== null; )
                    l.push(S, A), S = S.sibling;
              }
            }
            u = !1;
          }
          return u;
        case fo:
          if (l.tag === 5 && St(l.stateNode, u.value))
            return !0;
          break;
        case ns:
          if ((l.tag === 5 || l.tag === 6) && (l = st(l), l !== null && 0 <= l.indexOf(u.value)))
            return !0;
          break;
        case _u:
          if (l.tag === 5 && (l = l.memoizedProps["data-testname"], typeof l == "string" && l.toLowerCase() === u.value.toLowerCase()))
            return !0;
          break;
        default:
          throw Error(c(365));
      }
      return !1;
    }
    function Rs(l) {
      switch (l.$$typeof) {
        case af:
          return "<" + (H(l.value) || "Unknown") + ">";
        case Jn:
          return ":has(" + (Rs(l) || "") + ")";
        case fo:
          return '[role="' + l.value + '"]';
        case ns:
          return '"' + l.value + '"';
        case _u:
          return '[data-testname="' + l.value + '"]';
        default:
          throw Error(c(365));
      }
    }
    function Ai(l, u) {
      var v = [];
      l = [l, 0];
      for (var S = 0; S < l.length; ) {
        var A = l[S++], D = l[S++], j = u[D];
        if (A.tag !== 5 || !Ne(A)) {
          for (; j != null && rh(A, j); )
            D++, j = u[D];
          if (D === u.length)
            v.push(A);
          else
            for (A = A.child; A !== null; )
              l.push(A, D), A = A.sibling;
        }
      }
      return v;
    }
    function nt(l, u) {
      if (!xe)
        throw Error(c(363));
      l = ih(l), l = Ai(l, u), u = [], l = Array.from(l);
      for (var v = 0; v < l.length; ) {
        var S = l[v++];
        if (S.tag === 5)
          Ne(S) || u.push(S.stateNode);
        else
          for (S = S.child; S !== null; )
            l.push(S), S = S.sibling;
      }
      return u;
    }
    var Na = Math.ceil, sr = f.ReactCurrentDispatcher, ah = f.ReactCurrentOwner, Qn = f.ReactCurrentBatchConfig, Zt = 0, oi = null, li = null, un = 0, Tr = 0, pl = sn(0), vi = 0, ml = null, Ua = 0, is = 0, sh = 0, xu = null, or = null, oh = 0, lh = 1 / 0;
    function vl() {
      lh = Xn() + 500;
    }
    var Su = !1, sf = null, Cs = null, of = !1, Ls = null, lf = 0, Mu = 0, uh = null, Eu = -1, uf = 0;
    function zi() {
      return Zt & 6 ? Xn() : Eu !== -1 ? Eu : Eu = Xn();
    }
    function Ps(l) {
      return l.mode & 1 ? Zt & 2 && un !== 0 ? un & -un : gy.transition !== null ? (uf === 0 && (l = Mc, Mc <<= 1, !(Mc & 4194240) && (Mc = 64), uf = l), uf) : (l = dn, l !== 0 ? l : Ve()) : 1;
    }
    function kr(l, u, v) {
      if (50 < Mu)
        throw Mu = 0, uh = null, Error(c(185));
      var S = gl(l, u);
      return S === null ? null : (tu(S, u, v), (!(Zt & 2) || S !== oi) && (S === oi && (!(Zt & 2) && (is |= u), vi === 4 && rs(S, un)), lr(S, v), u === 1 && Zt === 0 && !(l.mode & 1) && (vl(), bc && ba())), S);
    }
    function gl(l, u) {
      l.lanes |= u;
      var v = l.alternate;
      for (v !== null && (v.lanes |= u), v = l, l = l.return; l !== null; )
        l.childLanes |= u, v = l.alternate, v !== null && (v.childLanes |= u), v = l, l = l.return;
      return v.tag === 3 ? v.stateNode : null;
    }
    function lr(l, u) {
      var v = l.callbackNode;
      eu(l, u);
      var S = Ec(l, l === oi ? un : 0);
      if (S === 0)
        v !== null && Yp(v), l.callbackNode = null, l.callbackPriority = 0;
      else if (u = S & -S, l.callbackPriority !== u) {
        if (v != null && Yp(v), u === 1)
          l.tag === 0 ? vy(hm.bind(null, l)) : Ld(hm.bind(null, l)), O ? se(function() {
            Zt === 0 && ba();
          }) : Ms(Ad, ba), v = null;
        else {
          switch (qp(S)) {
            case 1:
              v = Ad;
              break;
            case 4:
              v = dy;
              break;
            case 16:
              v = Rd;
              break;
            case 536870912:
              v = hy;
              break;
            default:
              v = Rd;
          }
          v = _l(v, br.bind(null, l));
        }
        l.callbackPriority = u, l.callbackNode = v;
      }
    }
    function br(l, u) {
      if (Eu = -1, uf = 0, Zt & 6)
        throw Error(c(327));
      var v = l.callbackNode;
      if (po() && l.callbackNode !== v)
        return null;
      var S = Ec(l, l === oi ? un : 0);
      if (S === 0)
        return null;
      if (S & 30 || S & l.expiredLanes || u)
        u = ho(l, S);
      else {
        u = S;
        var A = Zt;
        Zt |= 2;
        var D = mm();
        (oi !== l || un !== u) && (vl(), Ds(l, u));
        do
          try {
            vm();
            break;
          } catch (ee) {
            pm(l, ee);
          }
        while (!0);
        Pd(), sr.current = D, Zt = A, li !== null ? u = 0 : (oi = null, un = 0, u = vi);
      }
      if (u !== 0) {
        if (u === 2 && (A = Zi(l), A !== 0 && (S = A, u = ua(l, A))), u === 1)
          throw v = ml, Ds(l, 0), rs(l, S), lr(l, Xn()), v;
        if (u === 6)
          rs(l, S);
        else {
          if (A = l.current.alternate, !(S & 30) && !ch(A) && (u = ho(l, S), u === 2 && (D = Zi(l), D !== 0 && (S = D, u = ua(l, D))), u === 1))
            throw v = ml, Ds(l, 0), rs(l, S), lr(l, Xn()), v;
          switch (l.finishedWork = A, l.finishedLanes = S, u) {
            case 0:
            case 1:
              throw Error(c(345));
            case 2:
              ca(l, or);
              break;
            case 3:
              if (rs(l, S), (S & 130023424) === S && (u = oh + 500 - Xn(), 10 < u)) {
                if (Ec(l, 0) !== 0)
                  break;
                if (A = l.suspendedLanes, (A & S) !== S) {
                  zi(), l.pingedLanes |= l.suspendedLanes & A;
                  break;
                }
                l.timeoutHandle = Ge(ca.bind(null, l, or), u);
                break;
              }
              ca(l, or);
              break;
            case 4:
              if (rs(l, S), (S & 4194240) === S)
                break;
              for (u = l.eventTimes, A = -1; 0 < S; ) {
                var j = 31 - ji(S);
                D = 1 << j, j = u[j], j > A && (A = j), S &= ~D;
              }
              if (S = A, S = Xn() - S, S = (120 > S ? 120 : 480 > S ? 480 : 1080 > S ? 1080 : 1920 > S ? 1920 : 3e3 > S ? 3e3 : 4320 > S ? 4320 : 1960 * Na(S / 1960)) - S, 10 < S) {
                l.timeoutHandle = Ge(ca.bind(null, l, or), S);
                break;
              }
              ca(l, or);
              break;
            case 5:
              ca(l, or);
              break;
            default:
              throw Error(c(329));
          }
        }
      }
      return lr(l, Xn()), l.callbackNode === v ? br.bind(null, l) : null;
    }
    function ua(l, u) {
      var v = xu;
      return l.current.memoizedState.isDehydrated && (Ds(l, u).flags |= 256), l = ho(l, u), l !== 2 && (u = or, or = v, u !== null && Tu(u)), l;
    }
    function Tu(l) {
      or === null ? or = l : or.push.apply(or, l);
    }
    function ch(l) {
      for (var u = l; ; ) {
        if (u.flags & 16384) {
          var v = u.updateQueue;
          if (v !== null && (v = v.stores, v !== null))
            for (var S = 0; S < v.length; S++) {
              var A = v[S], D = A.getSnapshot;
              A = A.value;
              try {
                if (!Ta(D(), A))
                  return !1;
              } catch {
                return !1;
              }
            }
        }
        if (v = u.child, u.subtreeFlags & 16384 && v !== null)
          v.return = u, u = v;
        else {
          if (u === l)
            break;
          for (; u.sibling === null; ) {
            if (u.return === null || u.return === l)
              return !0;
            u = u.return;
          }
          u.sibling.return = u.return, u = u.sibling;
        }
      }
      return !0;
    }
    function rs(l, u) {
      for (u &= ~sh, u &= ~is, l.suspendedLanes |= u, l.pingedLanes &= ~u, l = l.expirationTimes; 0 < u; ) {
        var v = 31 - ji(u), S = 1 << v;
        l[v] = -1, u &= ~S;
      }
    }
    function hm(l) {
      if (Zt & 6)
        throw Error(c(327));
      po();
      var u = Ec(l, 0);
      if (!(u & 1))
        return lr(l, Xn()), null;
      var v = ho(l, u);
      if (l.tag !== 0 && v === 2) {
        var S = Zi(l);
        S !== 0 && (u = S, v = ua(l, S));
      }
      if (v === 1)
        throw v = ml, Ds(l, 0), rs(l, u), lr(l, Xn()), v;
      if (v === 6)
        throw Error(c(345));
      return l.finishedWork = l.current.alternate, l.finishedLanes = u, ca(l, or), lr(l, Xn()), null;
    }
    function fh(l) {
      Ls !== null && Ls.tag === 0 && !(Zt & 6) && po();
      var u = Zt;
      Zt |= 1;
      var v = Qn.transition, S = dn;
      try {
        if (Qn.transition = null, dn = 1, l)
          return l();
      } finally {
        dn = S, Qn.transition = v, Zt = u, !(Zt & 6) && ba();
      }
    }
    function Gr() {
      Tr = pl.current, pt(pl);
    }
    function Ds(l, u) {
      l.finishedWork = null, l.finishedLanes = 0;
      var v = l.timeoutHandle;
      if (v !== Pt && (l.timeoutHandle = Pt, gt(v)), li !== null)
        for (v = li.return; v !== null; ) {
          var S = v;
          switch (Fd(S), S.tag) {
            case 1:
              S = S.type.childContextTypes, S != null && xr();
              break;
            case 3:
              $s(), pt(Sn), pt(Bn), Aa();
              break;
            case 5:
              Mr(S);
              break;
            case 4:
              $s();
              break;
            case 13:
              pt(Fn);
              break;
            case 19:
              pt(Fn);
              break;
            case 10:
              Rc(S.type._context);
              break;
            case 22:
            case 23:
              Gr();
          }
          v = v.return;
        }
      if (oi = l, li = l = ur(l.current, null), un = Tr = u, vi = 0, ml = null, sh = is = Ua = 0, or = xu = null, na !== null) {
        for (u = 0; u < na.length; u++)
          if (v = na[u], S = v.interleaved, S !== null) {
            v.interleaved = null;
            var A = S.next, D = v.pending;
            if (D !== null) {
              var j = D.next;
              D.next = A, S.next = j;
            }
            v.pending = S;
          }
        na = null;
      }
      return l;
    }
    function pm(l, u) {
      do {
        var v = li;
        try {
          if (Pd(), di.current = rl, Jo) {
            for (var S = ln.memoizedState; S !== null; ) {
              var A = S.queue;
              A !== null && (A.pending = null), S = S.next;
            }
            Jo = !1;
          }
          if (bs = 0, Rn = Hn = ln = null, Ra = !1, Qo = 0, ah.current = null, v === null || v.return === null) {
            vi = 1, ml = u, li = null;
            break;
          }
          e: {
            var D = l, j = v.return, ee = v, Ee = u;
            if (u = un, ee.flags |= 32768, Ee !== null && typeof Ee == "object" && typeof Ee.then == "function") {
              var ke = Ee, Qe = ee, Ot = Qe.tag;
              if (!(Qe.mode & 1) && (Ot === 0 || Ot === 11 || Ot === 15)) {
                var Lt = Qe.alternate;
                Lt ? (Qe.updateQueue = Lt.updateQueue, Qe.memoizedState = Lt.memoizedState, Qe.lanes = Lt.lanes) : (Qe.updateQueue = null, Qe.memoizedState = null);
              }
              var Cn = io(j);
              if (Cn !== null) {
                Cn.flags &= -257, Zc(Cn, j, ee, D, u), Cn.mode & 1 && vu(D, ke, u), u = Cn, Ee = ke;
                var Et = u.updateQueue;
                if (Et === null) {
                  var Ci = /* @__PURE__ */ new Set();
                  Ci.add(Ee), u.updateQueue = Ci;
                } else
                  Et.add(Ee);
                break e;
              } else {
                if (!(u & 1)) {
                  vu(D, ke, u), dh();
                  break e;
                }
                Ee = Error(c(426));
              }
            } else if (On && ee.mode & 1) {
              var Ji = io(j);
              if (Ji !== null) {
                !(Ji.flags & 65536) && (Ji.flags |= 256), Zc(Ji, j, ee, D, u), su(Ee);
                break e;
              }
            }
            D = Ee, vi !== 4 && (vi = 2), xu === null ? xu = [D] : xu.push(D), Ee = pu(Ee, ee), ee = j;
            do {
              switch (ee.tag) {
                case 3:
                  ee.flags |= 65536, u &= -u, ee.lanes |= u;
                  var ce = Yc(ee, Ee, u);
                  jp(ee, ce);
                  break e;
                case 1:
                  D = Ee;
                  var te = ee.type, ge = ee.stateNode;
                  if (!(ee.flags & 128) && (typeof te.getDerivedStateFromError == "function" || ge !== null && typeof ge.componentDidCatch == "function" && (Cs === null || !Cs.has(ge)))) {
                    ee.flags |= 65536, u &= -u, ee.lanes |= u;
                    var it = jc(ee, D, u);
                    jp(ee, it);
                    break e;
                  }
              }
              ee = ee.return;
            } while (ee !== null);
          }
          wr(v);
        } catch (xt) {
          u = xt, li === v && v !== null && (li = v = v.return);
          continue;
        }
        break;
      } while (!0);
    }
    function mm() {
      var l = sr.current;
      return sr.current = rl, l === null ? rl : l;
    }
    function dh() {
      (vi === 0 || vi === 3 || vi === 2) && (vi = 4), oi === null || !(Ua & 268435455) && !(is & 268435455) || rs(oi, un);
    }
    function ho(l, u) {
      var v = Zt;
      Zt |= 2;
      var S = mm();
      oi === l && un === u || Ds(l, u);
      do
        try {
          Sy();
          break;
        } catch (A) {
          pm(l, A);
        }
      while (!0);
      if (Pd(), Zt = v, sr.current = S, li !== null)
        throw Error(c(261));
      return oi = null, un = 0, vi;
    }
    function Sy() {
      for (; li !== null; )
        hh(li);
    }
    function vm() {
      for (; li !== null && !cy(); )
        hh(li);
    }
    function hh(l) {
      var u = yl(l.alternate, l, Tr);
      l.memoizedProps = l.pendingProps, u === null ? wr(l) : li = u, ah.current = null;
    }
    function wr(l) {
      var u = l;
      do {
        var v = u.alternate;
        if (l = u.return, u.flags & 32768) {
          if (v = Gt(v, u), v !== null) {
            v.flags &= 32767, li = v;
            return;
          }
          if (l !== null)
            l.flags |= 32768, l.subtreeFlags = 0, l.deletions = null;
          else {
            vi = 6, li = null;
            return;
          }
        } else if (v = _y(v, u, Tr), v !== null) {
          li = v;
          return;
        }
        if (u = u.sibling, u !== null) {
          li = u;
          return;
        }
        li = u = l;
      } while (u !== null);
      vi === 0 && (vi = 5);
    }
    function ca(l, u) {
      var v = dn, S = Qn.transition;
      try {
        Qn.transition = null, dn = 1, My(l, u, v);
      } finally {
        Qn.transition = S, dn = v;
      }
      return null;
    }
    function My(l, u, v) {
      do
        po();
      while (Ls !== null);
      if (Zt & 6)
        throw Error(c(327));
      var S = l.finishedWork, A = l.finishedLanes;
      if (S === null)
        return null;
      if (l.finishedWork = null, l.finishedLanes = 0, S === l.current)
        throw Error(c(177));
      l.callbackNode = null, l.callbackPriority = 0;
      var D = S.lanes | S.childLanes;
      if (uy(l, D), l === oi && (li = oi = null, un = 0), !(S.subtreeFlags & 2064) && !(S.flags & 2064) || of || (of = !0, _l(Rd, function() {
        return po(), null;
      })), D = (S.flags & 15990) !== 0, S.subtreeFlags & 15990 || D) {
        D = Qn.transition, Qn.transition = null;
        var j = dn;
        dn = 1;
        var ee = Zt;
        Zt |= 4, ah.current = null, um(l, S), xy(l, S), ne(l.containerInfo), l.current = S, cm(S), fy(), Zt = ee, dn = j, Qn.transition = D;
      } else
        l.current = S;
      if (of && (of = !1, Ls = l, lf = A), D = l.pendingLanes, D === 0 && (Cs = null), py(S.stateNode), lr(l, Xn()), u !== null)
        for (v = l.onRecoverableError, S = 0; S < u.length; S++)
          v(u[S]);
      if (Su)
        throw Su = !1, l = sf, sf = null, l;
      return lf & 1 && l.tag !== 0 && po(), D = l.pendingLanes, D & 1 ? l === uh ? Mu++ : (Mu = 0, uh = l) : Mu = 0, ba(), null;
    }
    function po() {
      if (Ls !== null) {
        var l = qp(lf), u = Qn.transition, v = dn;
        try {
          if (Qn.transition = null, dn = 16 > l ? 16 : l, Ls === null)
            var S = !1;
          else {
            if (l = Ls, Ls = null, lf = 0, Zt & 6)
              throw Error(c(331));
            var A = Zt;
            for (Zt |= 4, rt = l.current; rt !== null; ) {
              var D = rt, j = D.child;
              if (rt.flags & 16) {
                var ee = D.deletions;
                if (ee !== null) {
                  for (var Ee = 0; Ee < ee.length; Ee++) {
                    var ke = ee[Ee];
                    for (rt = ke; rt !== null; ) {
                      var Qe = rt;
                      switch (Qe.tag) {
                        case 0:
                        case 11:
                        case 15:
                          lo(8, Qe, D);
                      }
                      var Ot = Qe.child;
                      if (Ot !== null)
                        Ot.return = Qe, rt = Ot;
                      else
                        for (; rt !== null; ) {
                          Qe = rt;
                          var Lt = Qe.sibling, Cn = Qe.return;
                          if (la(Qe), Qe === ke) {
                            rt = null;
                            break;
                          }
                          if (Lt !== null) {
                            Lt.return = Cn, rt = Lt;
                            break;
                          }
                          rt = Cn;
                        }
                    }
                  }
                  var Et = D.alternate;
                  if (Et !== null) {
                    var Ci = Et.child;
                    if (Ci !== null) {
                      Et.child = null;
                      do {
                        var Ji = Ci.sibling;
                        Ci.sibling = null, Ci = Ji;
                      } while (Ci !== null);
                    }
                  }
                  rt = D;
                }
              }
              if (D.subtreeFlags & 2064 && j !== null)
                j.return = D, rt = j;
              else
                e:
                  for (; rt !== null; ) {
                    if (D = rt, D.flags & 2048)
                      switch (D.tag) {
                        case 0:
                        case 11:
                        case 15:
                          lo(9, D, D.return);
                      }
                    var ce = D.sibling;
                    if (ce !== null) {
                      ce.return = D.return, rt = ce;
                      break e;
                    }
                    rt = D.return;
                  }
            }
            var te = l.current;
            for (rt = te; rt !== null; ) {
              j = rt;
              var ge = j.child;
              if (j.subtreeFlags & 2064 && ge !== null)
                ge.return = j, rt = ge;
              else
                e:
                  for (j = te; rt !== null; ) {
                    if (ee = rt, ee.flags & 2048)
                      try {
                        switch (ee.tag) {
                          case 0:
                          case 11:
                          case 15:
                            uo(9, ee);
                        }
                      } catch (xt) {
                        pn(ee, ee.return, xt);
                      }
                    if (ee === j) {
                      rt = null;
                      break e;
                    }
                    var it = ee.sibling;
                    if (it !== null) {
                      it.return = ee.return, rt = it;
                      break e;
                    }
                    rt = ee.return;
                  }
            }
            if (Zt = A, ba(), Ea && typeof Ea.onPostCommitFiberRoot == "function")
              try {
                Ea.onPostCommitFiberRoot(Tc, l);
              } catch {
              }
            S = !0;
          }
          return S;
        } finally {
          dn = v, Qn.transition = u;
        }
      }
      return !1;
    }
    function Ri(l, u, v) {
      u = pu(v, u), u = Yc(l, u, 1), Es(l, u), u = zi(), l = gl(l, 1), l !== null && (tu(l, 1, u), lr(l, u));
    }
    function pn(l, u, v) {
      if (l.tag === 3)
        Ri(l, l, v);
      else
        for (; u !== null; ) {
          if (u.tag === 3) {
            Ri(u, l, v);
            break;
          } else if (u.tag === 1) {
            var S = u.stateNode;
            if (typeof u.type.getDerivedStateFromError == "function" || typeof S.componentDidCatch == "function" && (Cs === null || !Cs.has(S))) {
              l = pu(v, l), l = jc(u, l, 1), Es(u, l), l = zi(), u = gl(u, 1), u !== null && (tu(u, 1, l), lr(u, l));
              break;
            }
          }
          u = u.return;
        }
    }
    function Ia(l, u, v) {
      var S = l.pingCache;
      S !== null && S.delete(u), u = zi(), l.pingedLanes |= l.suspendedLanes & v, oi === l && (un & v) === v && (vi === 4 || vi === 3 && (un & 130023424) === un && 500 > Xn() - oh ? Ds(l, 0) : sh |= v), lr(l, u);
    }
    function Wr(l, u) {
      u === 0 && (l.mode & 1 ? (u = ko, ko <<= 1, !(ko & 130023424) && (ko = 4194304)) : u = 1);
      var v = zi();
      l = gl(l, u), l !== null && (tu(l, u, v), lr(l, v));
    }
    function Ey(l) {
      var u = l.memoizedState, v = 0;
      u !== null && (v = u.retryLane), Wr(l, v);
    }
    function mo(l, u) {
      var v = 0;
      switch (l.tag) {
        case 13:
          var S = l.stateNode, A = l.memoizedState;
          A !== null && (v = A.retryLane);
          break;
        case 19:
          S = l.stateNode;
          break;
        default:
          throw Error(c(314));
      }
      S !== null && S.delete(u), Wr(l, v);
    }
    var yl;
    yl = function(l, u, v) {
      if (l !== null)
        if (l.memoizedProps !== u.pendingProps || Sn.current)
          Fi = !0;
        else {
          if (!(l.lanes & v) && !(u.flags & 128))
            return Fi = !1, ul(l, u, v);
          Fi = !!(l.flags & 131072);
        }
      else
        Fi = !1, On && u.flags & 1048576 && em(u, Uc, u.index);
      switch (u.lanes = 0, u.tag) {
        case 2:
          var S = u.type;
          l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps;
          var A = Sa(u, Bn.current);
          Wo(u, v), A = $o(null, u, S, l, A, v);
          var D = fu();
          return u.flags |= 1, typeof A == "object" && A !== null && typeof A.render == "function" && A.$$typeof === void 0 ? (u.tag = 1, u.memoizedState = null, u.updateQueue = null, hn(S) ? (D = !0, Ma(u)) : D = !1, u.memoizedState = A.state !== null && A.state !== void 0 ? A.state : null, Ud(u), A.updater = Dc, u.stateNode = A, A._reactInternals = u, Id(u, S, l, v), u = Zd(null, u, S, !0, D, v)) : (u.tag = 0, On && D && Od(u), xi(null, u, A, v), u = u.child), u;
        case 16:
          S = u.elementType;
          e: {
            switch (l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), l = u.pendingProps, A = S._init, S = A(S._payload), u.type = S, A = u.tag = wu(S), l = ta(S, l), A) {
              case 0:
                u = jd(null, u, S, l, v);
                break e;
              case 1:
                u = Qc(
                  null,
                  u,
                  S,
                  l,
                  v
                );
                break e;
              case 11:
                u = ol(null, u, S, l, v);
                break e;
              case 14:
                u = yu(null, u, S, ta(S.type, l), v);
                break e;
            }
            throw Error(c(306, S, ""));
          }
          return u;
        case 0:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : ta(S, A), jd(l, u, S, A, v);
        case 1:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : ta(S, A), Qc(l, u, S, A, v);
        case 3:
          e: {
            if (Kc(u), l === null)
              throw Error(c(387));
            S = u.pendingProps, D = u.memoizedState, A = D.element, ru(l, u), Lc(u, S, null, v);
            var j = u.memoizedState;
            if (S = j.element, Se && D.isDehydrated)
              if (D = {
                element: S,
                isDehydrated: !1,
                cache: j.cache,
                transitions: j.transitions
              }, u.updateQueue.baseState = D, u.memoizedState = D, u.flags & 256) {
                A = Error(c(423)), u = Jd(l, u, S, v, A);
                break e;
              } else if (S !== A) {
                A = Error(c(424)), u = Jd(l, u, S, v, A);
                break e;
              } else
                for (Se && (wi = xs(u.stateNode.containerInfo), Sr = u, On = !0, zr = null, Yo = !1), v = zc(u, null, S, v), u.child = v; v; )
                  v.flags = v.flags & -3 | 4096, v = v.sibling;
            else {
              if (jo(), S === A) {
                u = Zn(l, u, v);
                break e;
              }
              xi(l, u, S, v);
            }
            u = u.child;
          }
          return u;
        case 5:
          return cu(u), l === null && Oc(u), S = u.type, A = u.pendingProps, D = l !== null ? l.memoizedProps : null, j = A.children, Ue(S, A) ? j = null : D !== null && Ue(S, D) && (u.flags |= 32), rm(l, u), xi(l, u, j, v), u.child;
        case 6:
          return l === null && Oc(u), null;
        case 13:
          return am(l, u, v);
        case 4:
          return Bc(u, u.stateNode.containerInfo), S = u.pendingProps, l === null ? u.child = Zo(u, null, S, v) : xi(l, u, S, v), u.child;
        case 11:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : ta(S, A), ol(l, u, S, A, v);
        case 7:
          return xi(l, u, u.pendingProps, v), u.child;
        case 8:
          return xi(l, u, u.pendingProps.children, v), u.child;
        case 12:
          return xi(l, u, u.pendingProps.children, v), u.child;
        case 10:
          e: {
            if (S = u.type._context, A = u.pendingProps, D = u.memoizedProps, j = A.value, Dd(u, S, j), D !== null)
              if (Ta(D.value, j)) {
                if (D.children === A.children && !Sn.current) {
                  u = Zn(l, u, v);
                  break e;
                }
              } else
                for (D = u.child, D !== null && (D.return = u); D !== null; ) {
                  var ee = D.dependencies;
                  if (ee !== null) {
                    j = D.child;
                    for (var Ee = ee.firstContext; Ee !== null; ) {
                      if (Ee.context === S) {
                        if (D.tag === 1) {
                          Ee = Ja(-1, v & -v), Ee.tag = 2;
                          var ke = D.updateQueue;
                          if (ke !== null) {
                            ke = ke.shared;
                            var Qe = ke.pending;
                            Qe === null ? Ee.next = Ee : (Ee.next = Qe.next, Qe.next = Ee), ke.pending = Ee;
                          }
                        }
                        D.lanes |= v, Ee = D.alternate, Ee !== null && (Ee.lanes |= v), Nd(D.return, v, u), ee.lanes |= v;
                        break;
                      }
                      Ee = Ee.next;
                    }
                  } else if (D.tag === 10)
                    j = D.type === u.type ? null : D.child;
                  else if (D.tag === 18) {
                    if (j = D.return, j === null)
                      throw Error(c(341));
                    j.lanes |= v, ee = j.alternate, ee !== null && (ee.lanes |= v), Nd(j, v, u), j = D.sibling;
                  } else
                    j = D.child;
                  if (j !== null)
                    j.return = D;
                  else
                    for (j = D; j !== null; ) {
                      if (j === u) {
                        j = null;
                        break;
                      }
                      if (D = j.sibling, D !== null) {
                        D.return = j.return, j = D;
                        break;
                      }
                      j = j.return;
                    }
                  D = j;
                }
            xi(l, u, A.children, v), u = u.child;
          }
          return u;
        case 9:
          return A = u.type, S = u.pendingProps.children, Wo(u, v), A = Ir(A), S = S(A), u.flags |= 1, xi(l, u, S, v), u.child;
        case 14:
          return S = u.type, A = ta(S, u.pendingProps), A = ta(S.type, A), yu(l, u, S, A, v);
        case 15:
          return nm(l, u, u.type, u.pendingProps, v);
        case 17:
          return S = u.type, A = u.pendingProps, A = u.elementType === S ? A : ta(S, A), l !== null && (l.alternate = null, u.alternate = null, u.flags |= 2), u.tag = 1, hn(S) ? (l = !0, Ma(u)) : l = !1, Wo(u, v), Kp(u, S, A), Id(u, S, A, v), Zd(null, u, S, !0, l, v);
        case 19:
          return tf(l, u, v);
        case 22:
          return im(l, u, v);
      }
      throw Error(c(156, u.tag));
    };
    function _l(l, u) {
      return Ms(l, u);
    }
    function bu(l, u, v, S) {
      this.tag = l, this.key = v, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = S, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
    }
    function Bi(l, u, v, S) {
      return new bu(l, u, v, S);
    }
    function vo(l) {
      return l = l.prototype, !(!l || !l.isReactComponent);
    }
    function wu(l) {
      if (typeof l == "function")
        return vo(l) ? 1 : 0;
      if (l != null) {
        if (l = l.$$typeof, l === R)
          return 11;
        if (l === L)
          return 14;
      }
      return 2;
    }
    function ur(l, u) {
      var v = l.alternate;
      return v === null ? (v = Bi(l.tag, u, l.key, l.mode), v.elementType = l.elementType, v.type = l.type, v.stateNode = l.stateNode, v.alternate = l, l.alternate = v) : (v.pendingProps = u, v.type = l.type, v.flags = 0, v.subtreeFlags = 0, v.deletions = null), v.flags = l.flags & 14680064, v.childLanes = l.childLanes, v.lanes = l.lanes, v.child = l.child, v.memoizedProps = l.memoizedProps, v.memoizedState = l.memoizedState, v.updateQueue = l.updateQueue, u = l.dependencies, v.dependencies = u === null ? null : { lanes: u.lanes, firstContext: u.firstContext }, v.sibling = l.sibling, v.index = l.index, v.ref = l.ref, v;
    }
    function go(l, u, v, S, A, D) {
      var j = 2;
      if (S = l, typeof l == "function")
        vo(l) && (j = 1);
      else if (typeof l == "string")
        j = 5;
      else
        e:
          switch (l) {
            case g:
              return Ns(v.children, A, D, u);
            case _:
              j = 8, A |= 8;
              break;
            case x:
              return l = Bi(12, v, u, A | 2), l.elementType = x, l.lanes = D, l;
            case b:
              return l = Bi(13, v, u, A), l.elementType = b, l.lanes = D, l;
            case E:
              return l = Bi(19, v, u, A), l.elementType = E, l.lanes = D, l;
            case U:
              return Au(v, A, D, u);
            default:
              if (typeof l == "object" && l !== null)
                switch (l.$$typeof) {
                  case M:
                    j = 10;
                    break e;
                  case T:
                    j = 9;
                    break e;
                  case R:
                    j = 11;
                    break e;
                  case L:
                    j = 14;
                    break e;
                  case C:
                    j = 16, S = null;
                    break e;
                }
              throw Error(c(130, l == null ? l : typeof l, ""));
          }
      return u = Bi(j, v, u, A), u.elementType = l, u.type = S, u.lanes = D, u;
    }
    function Ns(l, u, v, S) {
      return l = Bi(7, l, S, u), l.lanes = v, l;
    }
    function Au(l, u, v, S) {
      return l = Bi(22, l, S, u), l.elementType = U, l.lanes = v, l.stateNode = {}, l;
    }
    function cf(l, u, v) {
      return l = Bi(6, l, null, u), l.lanes = v, l;
    }
    function Ru(l, u, v) {
      return u = Bi(4, l.children !== null ? l.children : [], l.key, u), u.lanes = v, u.stateNode = { containerInfo: l.containerInfo, pendingChildren: null, implementation: l.implementation }, u;
    }
    function Ty(l, u, v, S, A) {
      this.tag = u, this.containerInfo = l, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = Pt, this.callbackNode = this.pendingContext = this.context = null, this.callbackPriority = 0, this.eventTimes = bd(0), this.expirationTimes = bd(-1), this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = bd(0), this.identifierPrefix = S, this.onRecoverableError = A, Se && (this.mutableSourceEagerHydrationData = null);
    }
    function gm(l, u, v, S, A, D, j, ee, Ee) {
      return l = new Ty(l, u, v, ee, Ee), u === 1 ? (u = 1, D === !0 && (u |= 8)) : u = 0, D = Bi(3, null, null, u), l.current = D, D.stateNode = l, D.memoizedState = { element: S, isDehydrated: v, cache: null, transitions: null }, Ud(D), l;
    }
    function Xr(l) {
      if (!l)
        return on;
      l = l._reactInternals;
      e: {
        if (F(l) !== l || l.tag !== 1)
          throw Error(c(170));
        var u = l;
        do {
          switch (u.tag) {
            case 3:
              u = u.stateNode.context;
              break e;
            case 1:
              if (hn(u.type)) {
                u = u.stateNode.__reactInternalMemoizedMergedChildContext;
                break e;
              }
          }
          u = u.return;
        } while (u !== null);
        throw Error(c(171));
      }
      if (l.tag === 1) {
        var v = l.type;
        if (hn(v))
          return Yi(l, v, u);
      }
      return u;
    }
    function Cu(l) {
      var u = l._reactInternals;
      if (u === void 0)
        throw typeof l.render == "function" ? Error(c(188)) : (l = Object.keys(l).join(","), Error(c(268, l)));
      return l = K(u), l === null ? null : l.stateNode;
    }
    function xl(l, u) {
      if (l = l.memoizedState, l !== null && l.dehydrated !== null) {
        var v = l.retryLane;
        l.retryLane = v !== 0 && v < u ? v : u;
      }
    }
    function Sl(l, u) {
      xl(l, u), (l = l.alternate) && xl(l, u);
    }
    function Ml(l) {
      return l = K(l), l === null ? null : l.stateNode;
    }
    function ph() {
      return null;
    }
    return t.attemptContinuousHydration = function(l) {
      if (l.tag === 13) {
        var u = zi();
        kr(l, 134217728, u), Sl(l, 134217728);
      }
    }, t.attemptHydrationAtCurrentPriority = function(l) {
      if (l.tag === 13) {
        var u = zi(), v = Ps(l);
        kr(l, v, u), Sl(l, v);
      }
    }, t.attemptSynchronousHydration = function(l) {
      switch (l.tag) {
        case 3:
          var u = l.stateNode;
          if (u.current.memoizedState.isDehydrated) {
            var v = Ss(u.pendingLanes);
            v !== 0 && (wd(u, v | 1), lr(u, Xn()), !(Zt & 6) && (vl(), ba()));
          }
          break;
        case 13:
          var S = zi();
          fh(function() {
            return kr(l, 1, S);
          }), Sl(l, 1);
      }
    }, t.batchedUpdates = function(l, u) {
      var v = Zt;
      Zt |= 1;
      try {
        return l(u);
      } finally {
        Zt = v, Zt === 0 && (vl(), bc && ba());
      }
    }, t.createComponentSelector = function(l) {
      return { $$typeof: af, value: l };
    }, t.createContainer = function(l, u, v, S, A, D, j) {
      return gm(l, u, !1, null, v, S, A, D, j);
    }, t.createHasPseudoClassSelector = function(l) {
      return { $$typeof: Jn, value: l };
    }, t.createHydrationContainer = function(l, u, v, S, A, D, j, ee, Ee) {
      return l = gm(v, S, !0, l, A, D, j, ee, Ee), l.context = Xr(null), v = l.current, S = zi(), A = Ps(v), D = Ja(S, A), D.callback = u ?? null, Es(v, D), l.current.lanes = A, tu(l, A, S), lr(l, S), l;
    }, t.createPortal = function(l, u, v) {
      var S = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
      return { $$typeof: h, key: S == null ? null : "" + S, children: l, containerInfo: u, implementation: v };
    }, t.createRoleSelector = function(l) {
      return { $$typeof: fo, value: l };
    }, t.createTestNameSelector = function(l) {
      return { $$typeof: _u, value: l };
    }, t.createTextSelector = function(l) {
      return { $$typeof: ns, value: l };
    }, t.deferredUpdates = function(l) {
      var u = dn, v = Qn.transition;
      try {
        return Qn.transition = null, dn = 16, l();
      } finally {
        dn = u, Qn.transition = v;
      }
    }, t.discreteUpdates = function(l, u, v, S, A) {
      var D = dn, j = Qn.transition;
      try {
        return Qn.transition = null, dn = 1, l(u, v, S, A);
      } finally {
        dn = D, Qn.transition = j, Zt === 0 && vl();
      }
    }, t.findAllNodes = nt, t.findBoundingRects = function(l, u) {
      if (!xe)
        throw Error(c(363));
      u = nt(l, u), l = [];
      for (var v = 0; v < u.length; v++)
        l.push(Pe(u[v]));
      for (u = l.length - 1; 0 < u; u--) {
        v = l[u];
        for (var S = v.x, A = S + v.width, D = v.y, j = D + v.height, ee = u - 1; 0 <= ee; ee--)
          if (u !== ee) {
            var Ee = l[ee], ke = Ee.x, Qe = ke + Ee.width, Ot = Ee.y, Lt = Ot + Ee.height;
            if (S >= ke && D >= Ot && A <= Qe && j <= Lt) {
              l.splice(u, 1);
              break;
            } else if (S !== ke || v.width !== Ee.width || Lt < D || Ot > j) {
              if (!(D !== Ot || v.height !== Ee.height || Qe < S || ke > A)) {
                ke > S && (Ee.width += ke - S, Ee.x = S), Qe < A && (Ee.width = A - ke), l.splice(u, 1);
                break;
              }
            } else {
              Ot > D && (Ee.height += Ot - D, Ee.y = D), Lt < j && (Ee.height = j - Ot), l.splice(u, 1);
              break;
            }
          }
      }
      return l;
    }, t.findHostInstance = Cu, t.findHostInstanceWithNoPortals = function(l) {
      return l = X(l), l = l !== null ? ae(l) : null, l === null ? null : l.stateNode;
    }, t.findHostInstanceWithWarning = function(l) {
      return Cu(l);
    }, t.flushControlled = function(l) {
      var u = Zt;
      Zt |= 1;
      var v = Qn.transition, S = dn;
      try {
        Qn.transition = null, dn = 1, l();
      } finally {
        dn = S, Qn.transition = v, Zt = u, Zt === 0 && (vl(), ba());
      }
    }, t.flushPassiveEffects = po, t.flushSync = fh, t.focusWithin = function(l, u) {
      if (!xe)
        throw Error(c(363));
      for (l = ih(l), u = Ai(l, u), u = Array.from(u), l = 0; l < u.length; ) {
        var v = u[l++];
        if (!Ne(v)) {
          if (v.tag === 5 && bt(v.stateNode))
            return !0;
          for (v = v.child; v !== null; )
            u.push(v), v = v.sibling;
        }
      }
      return !1;
    }, t.getCurrentUpdatePriority = function() {
      return dn;
    }, t.getFindAllNodesFailureDescription = function(l, u) {
      if (!xe)
        throw Error(c(363));
      var v = 0, S = [];
      l = [ih(l), 0];
      for (var A = 0; A < l.length; ) {
        var D = l[A++], j = l[A++], ee = u[j];
        if ((D.tag !== 5 || !Ne(D)) && (rh(D, ee) && (S.push(Rs(ee)), j++, j > v && (v = j)), j < u.length))
          for (D = D.child; D !== null; )
            l.push(D, j), D = D.sibling;
      }
      if (v < u.length) {
        for (l = []; v < u.length; v++)
          l.push(Rs(u[v]));
        return `findAllNodes was able to match part of the selector:
  ` + (S.join(" > ") + `

No matching component was found for:
  `) + l.join(" > ");
      }
      return null;
    }, t.getPublicRootInstance = function(l) {
      if (l = l.current, !l.child)
        return null;
      switch (l.child.tag) {
        case 5:
          return Me(l.child.stateNode);
        default:
          return l.child.stateNode;
      }
    }, t.injectIntoDevTools = function(l) {
      if (l = { bundleType: l.bundleType, version: l.version, rendererPackageName: l.rendererPackageName, rendererConfig: l.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: f.ReactCurrentDispatcher, findHostInstanceByFiber: Ml, findFiberByHostInstance: l.findFiberByHostInstance || ph, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.0.0-fc46dba67-20220329" }, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        l = !1;
      else {
        var u = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (u.isDisabled || !u.supportsFiber)
          l = !0;
        else {
          try {
            Tc = u.inject(l), Ea = u;
          } catch {
          }
          l = !!u.checkDCE;
        }
      }
      return l;
    }, t.isAlreadyRendering = function() {
      return !1;
    }, t.observeVisibleRects = function(l, u, v, S) {
      if (!xe)
        throw Error(c(363));
      l = nt(l, u);
      var A = Je(l, v, S).disconnect;
      return { disconnect: function() {
        A();
      } };
    }, t.registerMutableSourceForHydration = function(l, u) {
      var v = u._getVersion;
      v = v(u._source), l.mutableSourceEagerHydrationData == null ? l.mutableSourceEagerHydrationData = [u, v] : l.mutableSourceEagerHydrationData.push(u, v);
    }, t.runWithPriority = function(l, u) {
      var v = dn;
      try {
        return dn = l, u();
      } finally {
        dn = v;
      }
    }, t.shouldError = function() {
      return null;
    }, t.shouldSuspend = function() {
      return !1;
    }, t.updateContainer = function(l, u, v, S) {
      var A = u.current, D = zi(), j = Ps(A);
      return v = Xr(v), u.context === null ? u.context = v : u.pendingContext = v, u = Ja(D, j), u.payload = { element: l }, S = S === void 0 ? null : S, S !== null && (u.callback = S), Es(A, u), l = kr(A, j, D), l !== null && Cc(l, A, j), j;
    }, t;
  }), fx;
}
var dx = { exports: {} };
/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var Ib;
function Mz() {
  return Ib || (Ib = 1, process.env.NODE_ENV !== "production" && (dx.exports = function(e) {
    var t = {}, n = Qb, r = Ng, o = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, c = !1;
    function f(i) {
      c = i;
    }
    function p(i) {
      if (!c) {
        for (var a = arguments.length, d = new Array(a > 1 ? a - 1 : 0), m = 1; m < a; m++)
          d[m - 1] = arguments[m];
        g("warn", i, d);
      }
    }
    function h(i) {
      if (!c) {
        for (var a = arguments.length, d = new Array(a > 1 ? a - 1 : 0), m = 1; m < a; m++)
          d[m - 1] = arguments[m];
        g("error", i, d);
      }
    }
    function g(i, a, d) {
      {
        var m = o.ReactDebugCurrentFrame, y = m.getStackAddendum();
        y !== "" && (a += "%s", d = d.concat([y]));
        var w = d.map(function(P) {
          return String(P);
        });
        w.unshift("Warning: " + a), Function.prototype.apply.call(console[i], console, w);
      }
    }
    var _ = Object.assign;
    function x(i) {
      return i._reactInternals;
    }
    function M(i, a) {
      i._reactInternals = a;
    }
    var T = !1, R = !1, b = !1, E = !1, L = !1, C = !1, U = !0, Y = !0, B = !0, H = 0, k = 1, F = 2, N = 3, X = 4, K = 5, J = 6, ae = 7, _e = 8, Me = 9, Fe = 10, Q = 11, ue = 12, ne = 13, be = 14, Oe = 15, ht = 16, ve = 17, Ue = 18, Ye = 19, Ge = 21, gt = 22, Pt = 23, Dt = 24, ie = 25, Re = Symbol.for("react.element"), Se = Symbol.for("react.portal"), He = Symbol.for("react.fragment"), Be = Symbol.for("react.strict_mode"), Ve = Symbol.for("react.profiler"), W = Symbol.for("react.provider"), O = Symbol.for("react.context"), se = Symbol.for("react.forward_ref"), xe = Symbol.for("react.suspense"), Ae = Symbol.for("react.suspense_list"), Pe = Symbol.for("react.memo"), st = Symbol.for("react.lazy"), Ne = Symbol.for("react.scope"), St = Symbol.for("react.debug_trace_mode"), bt = Symbol.for("react.offscreen"), Je = Symbol.for("react.legacy_hidden"), ft = Symbol.for("react.cache"), Ft = Symbol.for("react.tracing_marker"), vt = Symbol.iterator, Te = "@@iterator";
    function Xe(i) {
      if (i === null || typeof i != "object")
        return null;
      var a = vt && i[vt] || i[Te];
      return typeof a == "function" ? a : null;
    }
    function ut(i, a, d) {
      var m = i.displayName;
      if (m)
        return m;
      var y = a.displayName || a.name || "";
      return y !== "" ? d + "(" + y + ")" : d;
    }
    function wt(i) {
      return i.displayName || "Context";
    }
    function et(i) {
      if (i == null)
        return null;
      if (typeof i.tag == "number" && h("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof i == "function")
        return i.displayName || i.name || null;
      if (typeof i == "string")
        return i;
      switch (i) {
        case He:
          return "Fragment";
        case Se:
          return "Portal";
        case Ve:
          return "Profiler";
        case Be:
          return "StrictMode";
        case xe:
          return "Suspense";
        case Ae:
          return "SuspenseList";
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case O:
            var a = i;
            return wt(a) + ".Consumer";
          case W:
            var d = i;
            return wt(d._context) + ".Provider";
          case se:
            return ut(i, i.render, "ForwardRef");
          case Pe:
            var m = i.displayName || null;
            return m !== null ? m : et(i.type) || "Memo";
          case st: {
            var y = i, w = y._payload, P = y._init;
            try {
              return et(P(w));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    function en(i, a, d) {
      var m = a.displayName || a.name || "";
      return i.displayName || (m !== "" ? d + "(" + m + ")" : d);
    }
    function ot(i) {
      return i.displayName || "Context";
    }
    function G(i) {
      var a = i.tag, d = i.type;
      switch (a) {
        case Dt:
          return "Cache";
        case Me:
          var m = d;
          return ot(m) + ".Consumer";
        case Fe:
          var y = d;
          return ot(y._context) + ".Provider";
        case Ue:
          return "DehydratedFragment";
        case Q:
          return en(d, d.render, "ForwardRef");
        case ae:
          return "Fragment";
        case K:
          return d;
        case X:
          return "Portal";
        case N:
          return "Root";
        case J:
          return "Text";
        case ht:
          return et(d);
        case _e:
          return d === Be ? "StrictMode" : "Mode";
        case gt:
          return "Offscreen";
        case ue:
          return "Profiler";
        case Ge:
          return "Scope";
        case ne:
          return "Suspense";
        case Ye:
          return "SuspenseList";
        case ie:
          return "TracingMarker";
        case k:
        case H:
        case ve:
        case F:
        case be:
        case Oe:
          if (typeof d == "function")
            return d.displayName || d.name || null;
          if (typeof d == "string")
            return d;
          break;
      }
      return null;
    }
    var de = (
      /*                      */
      0
    ), qe = (
      /*                */
      1
    ), Ke = (
      /*                    */
      2
    ), Ze = (
      /*                       */
      4
    ), bn = (
      /*           */
      Ke | Ze
    ), an = (
      /*                */
      16
    ), gn = (
      /*                 */
      32
    ), si = (
      /*                     */
      64
    ), _t = (
      /*                   */
      128
    ), Yn = (
      /*            */
      256
    ), fi = (
      /*                          */
      512
    ), Gi = (
      /*                     */
      1024
    ), rr = (
      /*                      */
      2048
    ), Wi = (
      /*                    */
      4096
    ), _c = (
      /*           */
      Wi | Ze
    ), _r = (
      /*                   */
      8192
    ), Zs = (
      /*             */
      16384
    ), xa = rr | Ze | si | fi | Gi | Zs, xc = (
      /*               */
      32767
    ), xs = (
      /*                   */
      32768
    ), Oi = (
      /*                */
      65536
    ), Kl = (
      /* */
      131072
    ), Sc = (
      /*                       */
      1048576
    ), V = (
      /*                    */
      2097152
    ), re = (
      /*                 */
      4194304
    ), me = (
      /*                */
      8388608
    ), pe = (
      /*               */
      16777216
    ), he = (
      /*              */
      33554432
    ), tt = (
      // TODO: Remove Update flag from before mutation phase by re-landing Visibility
      // flag logic (see #20043)
      Ze | Gi | 0
    ), yt = Ke | Ze | an | gn | fi | Wi | _r, At = Ze | si | fi | _r, Nt = rr | an, Ct = re | me | V, zt = o.ReactCurrentOwner;
    function Bt(i) {
      var a = i, d = i;
      if (i.alternate)
        for (; a.return; )
          a = a.return;
      else {
        var m = a;
        do
          a = m, (a.flags & (Ke | Wi)) !== de && (d = a.return), m = a.return;
        while (m);
      }
      return a.tag === N ? d : null;
    }
    function In(i) {
      return Bt(i) === i;
    }
    function Xi(i) {
      {
        var a = zt.current;
        if (a !== null && a.tag === k) {
          var d = a, m = d.stateNode;
          m._warnedAboutRefsInRender || h("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", G(d) || "A component"), m._warnedAboutRefsInRender = !0;
        }
      }
      var y = x(i);
      return y ? Bt(y) === y : !1;
    }
    function kn(i) {
      if (Bt(i) !== i)
        throw new Error("Unable to find node on an unmounted component.");
    }
    function bi(i) {
      var a = i.alternate;
      if (!a) {
        var d = Bt(i);
        if (d === null)
          throw new Error("Unable to find node on an unmounted component.");
        return d !== i ? null : i;
      }
      for (var m = i, y = a; ; ) {
        var w = m.return;
        if (w === null)
          break;
        var P = w.alternate;
        if (P === null) {
          var I = w.return;
          if (I !== null) {
            m = y = I;
            continue;
          }
          break;
        }
        if (w.child === P.child) {
          for (var z = w.child; z; ) {
            if (z === m)
              return kn(w), i;
            if (z === y)
              return kn(w), a;
            z = z.sibling;
          }
          throw new Error("Unable to find node on an unmounted component.");
        }
        if (m.return !== y.return)
          m = w, y = P;
        else {
          for (var Z = !1, $ = w.child; $; ) {
            if ($ === m) {
              Z = !0, m = w, y = P;
              break;
            }
            if ($ === y) {
              Z = !0, y = w, m = P;
              break;
            }
            $ = $.sibling;
          }
          if (!Z) {
            for ($ = P.child; $; ) {
              if ($ === m) {
                Z = !0, m = P, y = w;
                break;
              }
              if ($ === y) {
                Z = !0, y = P, m = w;
                break;
              }
              $ = $.sibling;
            }
            if (!Z)
              throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
          }
        }
        if (m.alternate !== y)
          throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
      }
      if (m.tag !== N)
        throw new Error("Unable to find node on an unmounted component.");
      return m.stateNode.current === m ? i : a;
    }
    function sn(i) {
      var a = bi(i);
      return a !== null ? pt(a) : null;
    }
    function pt(i) {
      if (i.tag === K || i.tag === J)
        return i;
      for (var a = i.child; a !== null; ) {
        var d = pt(a);
        if (d !== null)
          return d;
        a = a.sibling;
      }
      return null;
    }
    function yn(i) {
      var a = bi(i);
      return a !== null ? on(a) : null;
    }
    function on(i) {
      if (i.tag === K || i.tag === J)
        return i;
      for (var a = i.child; a !== null; ) {
        if (a.tag !== X) {
          var d = on(a);
          if (d !== null)
            return d;
        }
        a = a.sibling;
      }
      return null;
    }
    var Bn = Array.isArray;
    function Sn(i) {
      return Bn(i);
    }
    var qi = e.getPublicInstance, Sa = e.getRootHostContext, hn = e.getChildHostContext, xr = e.prepareForCommit, Vo = e.resetAfterCommit, Yi = e.createInstance, Ma = e.appendInitialChild, $l = e.finalizeInitialChildren, ji = e.prepareUpdate, Td = e.shouldSetTextContent, Wp = e.createTextInstance, Xp = e.scheduleTimeout, Mc = e.cancelTimeout, ko = e.noTimeout;
    e.now;
    var Ss = e.isPrimaryRenderer, Ec = e.warnsIfNotActing, ea = e.supportsMutation, eu = e.supportsPersistence, Zi = e.supportsHydration, bd = e.getInstanceFromNode;
    e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
    var tu = e.preparePortalMount;
    e.preparePortalMount, e.getInstanceFromScope;
    var uy = e.getCurrentEventPriority, wd = e.detachDeletedInstance, dn = e.supportsMicrotasks, qp = e.scheduleMicrotask, Ms = e.supportsTestSelectors, Yp = e.findFiberRoot, cy = e.getBoundingRect, fy = e.getTextContent, Xn = e.isHiddenSubtree, Ad = e.matchAccessibilityRole, dy = e.setFocusIfFocusable, Rd = e.setupIntersectionObserver, hy = e.appendChild, Tc = e.appendChildToContainer, Ea = e.commitTextUpdate, py = e.commitMount, my = e.commitUpdate, Ta = e.insertBefore, Za = e.insertInContainerBefore, bc = e.removeChild, Cd = e.removeChildFromContainer, Ld = e.resetTextContent, vy = e.hideInstance, ba = e.hideTextInstance, gy = e.unhideInstance, wc = e.unhideTextInstance, yy = e.clearContainer, ta = e.cloneInstance, nu = e.createContainerChildSet, iu = e.appendChildToContainerChildSet, Go = e.finalizeContainerChildren, Ac = e.replaceContainerChildren;
    e.getOffscreenContainerType;
    var Pd = e.getOffscreenContainerProps, Dd = e.cloneHiddenInstance, Rc = e.cloneHiddenTextInstance, Nd = e.canHydrateInstance, Wo = e.canHydrateTextInstance, Ir = e.canHydrateSuspenseInstance, na = e.isSuspenseInstancePending, wa = e.isSuspenseInstanceFallback, Ud = e.registerSuspenseInstanceRetry, ru = e.getNextHydratableSibling, Ja = e.getFirstHydratableChild, Es = e.getFirstHydratableChildWithinContainer, Cc = e.getFirstHydratableChildWithinSuspenseInstance, jp = e.hydrateInstance, Lc = e.hydrateTextInstance, Zp = e.hydrateSuspenseInstance, Jp = e.getNextHydratableInstanceAfterSuspenseInstance, Pc = e.commitHydratedContainer, Dc = e.commitHydratedSuspenseInstance, Qp = e.clearSuspenseBoundary, Kp = e.clearSuspenseBoundaryFromContainer, $p = e.shouldDeleteUnhydratedTailInstances, Id = e.didNotMatchHydratedContainerTextInstance, Xo = e.didNotMatchHydratedTextInstance, qo = e.didNotHydrateInstanceWithinContainer, Nc = e.didNotHydrateInstanceWithinSuspenseInstance, Uc = e.didNotHydrateInstance, Or = e.didNotFindHydratableInstanceWithinContainer, Fr = e.didNotFindHydratableTextInstanceWithinContainer, Js = e.didNotFindHydratableSuspenseInstanceWithinContainer, Qa = e.didNotFindHydratableInstanceWithinSuspenseInstance, Ka = e.didNotFindHydratableTextInstanceWithinSuspenseInstance, Qs = e.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance, em = e.didNotFindHydratableInstance, Od = e.didNotFindHydratableTextInstance, Fd = e.didNotFindHydratableSuspenseInstance, Sr = e.errorHydratingContainer, wi = 0, On, Yo, zr, zd, Bd, Ic, Oc;
    function Hd() {
    }
    Hd.__reactDisabledLog = !0;
    function au() {
      {
        if (wi === 0) {
          On = console.log, Yo = console.info, zr = console.warn, zd = console.error, Bd = console.group, Ic = console.groupCollapsed, Oc = console.groupEnd;
          var i = {
            configurable: !0,
            enumerable: !0,
            value: Hd,
            writable: !0
          };
          Object.defineProperties(console, {
            info: i,
            log: i,
            warn: i,
            error: i,
            group: i,
            groupCollapsed: i,
            groupEnd: i
          });
        }
        wi++;
      }
    }
    function jo() {
      {
        if (wi--, wi === 0) {
          var i = {
            configurable: !0,
            enumerable: !0,
            writable: !0
          };
          Object.defineProperties(console, {
            log: _({}, i, {
              value: On
            }),
            info: _({}, i, {
              value: Yo
            }),
            warn: _({}, i, {
              value: zr
            }),
            error: _({}, i, {
              value: zd
            }),
            group: _({}, i, {
              value: Bd
            }),
            groupCollapsed: _({}, i, {
              value: Ic
            }),
            groupEnd: _({}, i, {
              value: Oc
            })
          });
        }
        wi < 0 && h("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var su = o.ReactCurrentDispatcher, Ks;
    function ia(i, a, d) {
      {
        if (Ks === void 0)
          try {
            throw Error();
          } catch (y) {
            var m = y.stack.trim().match(/\n( *(at )?)/);
            Ks = m && m[1] || "";
          }
        return `
` + Ks + i;
      }
    }
    var Fc = !1, ou;
    {
      var Zo = typeof WeakMap == "function" ? WeakMap : Map;
      ou = new Zo();
    }
    function zc(i, a) {
      if (!i || Fc)
        return "";
      {
        var d = ou.get(i);
        if (d !== void 0)
          return d;
      }
      var m;
      Fc = !0;
      var y = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var w;
      w = su.current, su.current = null, au();
      try {
        if (a) {
          var P = function() {
            throw Error();
          };
          if (Object.defineProperty(P.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(P, []);
            } catch (ze) {
              m = ze;
            }
            Reflect.construct(i, [], P);
          } else {
            try {
              P.call();
            } catch (ze) {
              m = ze;
            }
            i.call(P.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (ze) {
            m = ze;
          }
          i();
        }
      } catch (ze) {
        if (ze && m && typeof ze.stack == "string") {
          for (var I = ze.stack.split(`
`), z = m.stack.split(`
`), Z = I.length - 1, $ = z.length - 1; Z >= 1 && $ >= 0 && I[Z] !== z[$]; )
            $--;
          for (; Z >= 1 && $ >= 0; Z--, $--)
            if (I[Z] !== z[$]) {
              if (Z !== 1 || $ !== 1)
                do
                  if (Z--, $--, $ < 0 || I[Z] !== z[$]) {
                    var oe = `
` + I[Z].replace(" at new ", " at ");
                    return i.displayName && oe.includes("<anonymous>") && (oe = oe.replace("<anonymous>", i.displayName)), typeof i == "function" && ou.set(i, oe), oe;
                  }
                while (Z >= 1 && $ >= 0);
              break;
            }
        }
      } finally {
        Fc = !1, su.current = w, jo(), Error.prepareStackTrace = y;
      }
      var ye = i ? i.displayName || i.name : "", we = ye ? ia(ye) : "";
      return typeof i == "function" && ou.set(i, we), we;
    }
    function lu(i, a, d) {
      return zc(i, !0);
    }
    function ar(i, a, d) {
      return zc(i, !1);
    }
    function uu(i) {
      var a = i.prototype;
      return !!(a && a.isReactComponent);
    }
    function Ts(i, a, d) {
      if (i == null)
        return "";
      if (typeof i == "function")
        return zc(i, uu(i));
      if (typeof i == "string")
        return ia(i);
      switch (i) {
        case xe:
          return ia("Suspense");
        case Ae:
          return ia("SuspenseList");
      }
      if (typeof i == "object")
        switch (i.$$typeof) {
          case se:
            return ar(i.render);
          case Pe:
            return Ts(i.type, a, d);
          case st: {
            var m = i, y = m._payload, w = m._init;
            try {
              return Ts(w(y), a, d);
            } catch {
            }
          }
        }
      return "";
    }
    var ra = Object.prototype.hasOwnProperty, Bc = {}, $s = o.ReactDebugCurrentFrame;
    function cu(i) {
      if (i) {
        var a = i._owner, d = Ts(i.type, i._source, a ? a.type : null);
        $s.setExtraStackFrame(d);
      } else
        $s.setExtraStackFrame(null);
    }
    function Mr(i, a, d, m, y) {
      {
        var w = Function.call.bind(ra);
        for (var P in i)
          if (w(i, P)) {
            var I = void 0;
            try {
              if (typeof i[P] != "function") {
                var z = Error((m || "React class") + ": " + d + " type `" + P + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof i[P] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw z.name = "Invariant Violation", z;
              }
              I = i[P](a, P, m, d, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (Z) {
              I = Z;
            }
            I && !(I instanceof Error) && (cu(y), h("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", m || "React class", d, P, typeof I), cu(null)), I instanceof Error && !(I.message in Bc) && (Bc[I.message] = !0, cu(y), h("Failed %s type: %s", d, I.message), cu(null));
          }
      }
    }
    var Fn = [], eo;
    eo = [];
    var aa = -1;
    function Aa(i) {
      return {
        current: i
      };
    }
    function di(i, a) {
      if (aa < 0) {
        h("Unexpected pop.");
        return;
      }
      a !== eo[aa] && h("Unexpected Fiber popped."), i.current = Fn[aa], Fn[aa] = null, eo[aa] = null, aa--;
    }
    function wn(i, a, d) {
      aa++, Fn[aa] = i.current, eo[aa] = d, i.current = a;
    }
    var bs;
    bs = {};
    var ln = {};
    Object.freeze(ln);
    var Hn = Aa(ln), Rn = Aa(!1), Jo = ln;
    function Ra(i, a, d) {
      return d && Br(a) ? Jo : Hn.current;
    }
    function Qo(i, a, d) {
      {
        var m = i.stateNode;
        m.__reactInternalMemoizedUnmaskedChildContext = a, m.__reactInternalMemoizedMaskedChildContext = d;
      }
    }
    function Ko(i, a) {
      {
        var d = i.type, m = d.contextTypes;
        if (!m)
          return ln;
        var y = i.stateNode;
        if (y && y.__reactInternalMemoizedUnmaskedChildContext === a)
          return y.__reactInternalMemoizedMaskedChildContext;
        var w = {};
        for (var P in m)
          w[P] = a[P];
        {
          var I = G(i) || "Unknown";
          Mr(m, w, "context", I);
        }
        return y && Qo(i, a, w), w;
      }
    }
    function hi() {
      return Rn.current;
    }
    function Br(i) {
      {
        var a = i.childContextTypes;
        return a != null;
      }
    }
    function $o(i) {
      di(Rn, i), di(Hn, i);
    }
    function fu(i) {
      di(Rn, i), di(Hn, i);
    }
    function Ca(i, a, d) {
      {
        if (Hn.current !== ln)
          throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        wn(Hn, a, i), wn(Rn, d, i);
      }
    }
    function sa(i, a, d) {
      {
        var m = i.stateNode, y = a.childContextTypes;
        if (typeof m.getChildContext != "function") {
          {
            var w = G(i) || "Unknown";
            bs[w] || (bs[w] = !0, h("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", w, w));
          }
          return d;
        }
        var P = m.getChildContext();
        for (var I in P)
          if (!(I in y))
            throw new Error((G(i) || "Unknown") + '.getChildContext(): key "' + I + '" is not defined in childContextTypes.');
        {
          var z = G(i) || "Unknown";
          Mr(y, P, "child context", z);
        }
        return _({}, d, P);
      }
    }
    function La(i) {
      {
        var a = i.stateNode, d = a && a.__reactInternalMemoizedMergedChildContext || ln;
        return Jo = Hn.current, wn(Hn, d, i), wn(Rn, Rn.current, i), !0;
      }
    }
    function du(i, a, d) {
      {
        var m = i.stateNode;
        if (!m)
          throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (d) {
          var y = sa(i, a, Jo);
          m.__reactInternalMemoizedMergedChildContext = y, di(Rn, i), di(Hn, i), wn(Hn, y, i), wn(Rn, d, i);
        } else
          di(Rn, i), wn(Rn, d, i);
      }
    }
    function Hc(i) {
      {
        if (!In(i) || i.tag !== k)
          throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var a = i;
        do {
          switch (a.tag) {
            case N:
              return a.stateNode.context;
            case k: {
              var d = a.type;
              if (Br(d))
                return a.stateNode.__reactInternalMemoizedMergedChildContext;
              break;
            }
          }
          a = a.return;
        } while (a !== null);
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    var to = 0, Vd = 1, Vt = (
      /*                         */
      0
    ), Mn = (
      /*                 */
      1
    ), fn = (
      /*                    */
      2
    ), jn = (
      /*               */
      8
    ), Hr = (
      /*              */
      16
    ), el = Math.clz32 ? Math.clz32 : kc, tm = Math.log, Vc = Math.LN2;
    function kc(i) {
      var a = i >>> 0;
      return a === 0 ? 32 : 31 - (tm(a) / Vc | 0) | 0;
    }
    var hu = 31, Ie = (
      /*                        */
      0
    ), pi = (
      /*                          */
      0
    ), tn = (
      /*                        */
      1
    ), no = (
      /*    */
      2
    ), $a = (
      /*            */
      4
    ), es = (
      /*            */
      8
    ), Pa = (
      /*                    */
      16
    ), tl = (
      /*                */
      32
    ), nl = (
      /*                       */
      4194240
    ), il = (
      /*                        */
      64
    ), kd = (
      /*                        */
      128
    ), Gd = (
      /*                        */
      256
    ), Gc = (
      /*                        */
      512
    ), Wc = (
      /*                        */
      1024
    ), Xc = (
      /*                        */
      2048
    ), qc = (
      /*                        */
      4096
    ), rl = (
      /*                        */
      8192
    ), Wd = (
      /*                        */
      16384
    ), Xd = (
      /*                       */
      32768
    ), qd = (
      /*                       */
      65536
    ), pu = (
      /*                       */
      131072
    ), mu = (
      /*                       */
      262144
    ), Yd = (
      /*                       */
      524288
    ), Yc = (
      /*                       */
      1048576
    ), jc = (
      /*                       */
      2097152
    ), vu = (
      /*                            */
      130023424
    ), io = (
      /*                             */
      4194304
    ), Zc = (
      /*                             */
      8388608
    ), Vr = (
      /*                             */
      16777216
    ), Jc = (
      /*                             */
      33554432
    ), ro = (
      /*                             */
      67108864
    ), al = io, ws = (
      /*          */
      134217728
    ), gu = (
      /*                                 */
      268435455
    ), sl = (
      /*               */
      268435456
    ), oa = (
      /*                       */
      536870912
    ), An = (
      /*                   */
      1073741824
    );
    function _y(i) {
      {
        if (i & tn)
          return "Sync";
        if (i & no)
          return "InputContinuousHydration";
        if (i & $a)
          return "InputContinuous";
        if (i & es)
          return "DefaultHydration";
        if (i & Pa)
          return "Default";
        if (i & tl)
          return "TransitionHydration";
        if (i & nl)
          return "Transition";
        if (i & vu)
          return "Retry";
        if (i & ws)
          return "SelectiveHydration";
        if (i & sl)
          return "IdleHydration";
        if (i & oa)
          return "Idle";
        if (i & An)
          return "Offscreen";
      }
    }
    var Nn = -1, Fi = il, xi = io;
    function ol(i) {
      switch (Da(i)) {
        case tn:
          return tn;
        case no:
          return no;
        case $a:
          return $a;
        case es:
          return es;
        case Pa:
          return Pa;
        case tl:
          return tl;
        case il:
        case kd:
        case Gd:
        case Gc:
        case Wc:
        case Xc:
        case qc:
        case rl:
        case Wd:
        case Xd:
        case qd:
        case pu:
        case mu:
        case Yd:
        case Yc:
        case jc:
          return i & nl;
        case io:
        case Zc:
        case Vr:
        case Jc:
        case ro:
          return i & vu;
        case ws:
          return ws;
        case sl:
          return sl;
        case oa:
          return oa;
        case An:
          return An;
        default:
          return h("Should have found matching lanes. This is a bug in React."), i;
      }
    }
    function yu(i, a) {
      var d = i.pendingLanes;
      if (d === Ie)
        return Ie;
      var m = Ie, y = i.suspendedLanes, w = i.pingedLanes, P = d & gu;
      if (P !== Ie) {
        var I = P & ~y;
        if (I !== Ie)
          m = ol(I);
        else {
          var z = P & w;
          z !== Ie && (m = ol(z));
        }
      } else {
        var Z = d & ~y;
        Z !== Ie ? m = ol(Z) : w !== Ie && (m = ol(w));
      }
      if (m === Ie)
        return Ie;
      if (a !== Ie && a !== m && // If we already suspended with a delay, then interrupting is fine. Don't
      // bother waiting until the root is complete.
      (a & y) === Ie) {
        var $ = Da(m), oe = Da(a);
        if (
          // Tests whether the next lane is equal or lower priority than the wip
          // one. This works because the bits decrease in priority as you go left.
          $ >= oe || // Default priority updates should not interrupt transition updates. The
          // only difference between default updates and transition updates is that
          // default updates do not support refresh transitions.
          $ === Pa && (oe & nl) !== Ie
        )
          return a;
      }
      (m & $a) !== Ie && (m |= d & Pa);
      var ye = i.entangledLanes;
      if (ye !== Ie)
        for (var we = i.entanglements, ze = m & ye; ze > 0; ) {
          var We = ts(ze), Rt = 1 << We;
          m |= we[We], ze &= ~Rt;
        }
      return m;
    }
    function nm(i, a) {
      for (var d = i.eventTimes, m = Nn; a > 0; ) {
        var y = ts(a), w = 1 << y, P = d[y];
        P > m && (m = P), a &= ~w;
      }
      return m;
    }
    function im(i, a) {
      switch (i) {
        case tn:
        case no:
        case $a:
          return a + 250;
        case es:
        case Pa:
        case tl:
        case il:
        case kd:
        case Gd:
        case Gc:
        case Wc:
        case Xc:
        case qc:
        case rl:
        case Wd:
        case Xd:
        case qd:
        case pu:
        case mu:
        case Yd:
        case Yc:
        case jc:
          return a + 5e3;
        case io:
        case Zc:
        case Vr:
        case Jc:
        case ro:
          return Nn;
        case ws:
        case sl:
        case oa:
        case An:
          return Nn;
        default:
          return h("Should have found matching lanes. This is a bug in React."), Nn;
      }
    }
    function rm(i, a) {
      for (var d = i.pendingLanes, m = i.suspendedLanes, y = i.pingedLanes, w = i.expirationTimes, P = d; P > 0; ) {
        var I = ts(P), z = 1 << I, Z = w[I];
        Z === Nn ? ((z & m) === Ie || (z & y) !== Ie) && (w[I] = im(z, a)) : Z <= a && (i.expiredLanes |= z), P &= ~z;
      }
    }
    function jd(i) {
      return ol(i.pendingLanes);
    }
    function Qc(i) {
      var a = i.pendingLanes & ~An;
      return a !== Ie ? a : a & An ? An : Ie;
    }
    function Zd(i) {
      return (i & tn) !== Ie;
    }
    function Kc(i) {
      return (i & gu) !== Ie;
    }
    function Jd(i) {
      return (i & vu) === i;
    }
    function $c(i) {
      return (i & nl) === i;
    }
    function ao(i, a) {
      var d = no | $a | es | Pa;
      return (a & d) !== Ie;
    }
    function am(i, a) {
      return (a & i.expiredLanes) !== Ie;
    }
    function ef(i) {
      return (i & nl) !== 0;
    }
    function sm() {
      var i = Fi;
      return Fi <<= 1, Fi & nl || (Fi = il), i;
    }
    function om() {
      var i = xi;
      return xi <<= 1, xi & vu || (xi = io), i;
    }
    function Da(i) {
      return i & -i;
    }
    function ll(i) {
      return Da(i);
    }
    function ts(i) {
      return 31 - el(i);
    }
    function tf(i) {
      return ts(i);
    }
    function Zn(i, a) {
      return (i & a) !== Ie;
    }
    function ul(i, a) {
      return (i & a) === a;
    }
    function Gt(i, a) {
      return i | a;
    }
    function so(i, a) {
      return i & ~a;
    }
    function As(i, a) {
      return i & a;
    }
    function iM(i) {
      return i;
    }
    function rt(i, a) {
      return i !== pi && i < a ? i : a;
    }
    function cl(i) {
      for (var a = [], d = 0; d < hu; d++)
        a.push(i);
      return a;
    }
    function oo(i, a, d) {
      i.pendingLanes |= a, a !== oa && (i.suspendedLanes = Ie, i.pingedLanes = Ie);
      var m = i.eventTimes, y = tf(a);
      m[y] = d;
    }
    function lm(i, a) {
      i.suspendedLanes |= a, i.pingedLanes &= ~a;
      for (var d = i.expirationTimes, m = a; m > 0; ) {
        var y = ts(m), w = 1 << y;
        d[y] = Nn, m &= ~w;
      }
    }
    function um(i, a, d) {
      i.pingedLanes |= i.suspendedLanes & a;
    }
    function lo(i, a) {
      var d = i.pendingLanes & ~a;
      i.pendingLanes = a, i.suspendedLanes = 0, i.pingedLanes = 0, i.expiredLanes &= a, i.mutableReadLanes &= a, i.entangledLanes &= a;
      for (var m = i.entanglements, y = i.eventTimes, w = i.expirationTimes, P = d; P > 0; ) {
        var I = ts(P), z = 1 << I;
        m[I] = Ie, y[I] = Nn, w[I] = Nn, P &= ~z;
      }
    }
    function uo(i, a) {
      for (var d = i.entangledLanes |= a, m = i.entanglements, y = d; y; ) {
        var w = ts(y), P = 1 << w;
        // Is this one of the newly entangled lanes?
        P & a | // Is this lane transitively entangled with the newly entangled lanes?
        m[w] & a && (m[w] |= a), y &= ~P;
      }
    }
    function Qd(i, a) {
      var d = Da(a), m;
      switch (d) {
        case $a:
          m = no;
          break;
        case Pa:
          m = es;
          break;
        case il:
        case kd:
        case Gd:
        case Gc:
        case Wc:
        case Xc:
        case qc:
        case rl:
        case Wd:
        case Xd:
        case qd:
        case pu:
        case mu:
        case Yd:
        case Yc:
        case jc:
        case io:
        case Zc:
        case Vr:
        case Jc:
        case ro:
          m = tl;
          break;
        case oa:
          m = sl;
          break;
        default:
          m = pi;
          break;
      }
      return (m & (i.suspendedLanes | a)) !== pi ? pi : m;
    }
    function Kd(i, a, d) {
      if (sr)
        for (var m = i.pendingUpdatersLaneMap; d > 0; ) {
          var y = tf(d), w = 1 << y, P = m[y];
          P.add(a), d &= ~w;
        }
    }
    function $d(i, a) {
      if (sr)
        for (var d = i.pendingUpdatersLaneMap, m = i.memoizedUpdaters; a > 0; ) {
          var y = tf(a), w = 1 << y, P = d[y];
          P.size > 0 && (P.forEach(function(I) {
            var z = I.alternate;
            (z === null || !m.has(z)) && m.add(I);
          }), P.clear()), a &= ~w;
        }
    }
    var la = tn, fl = $a, dl = Pa, nf = oa, co = pi;
    function Er() {
      return co;
    }
    function mi(i) {
      co = i;
    }
    function eh(i, a) {
      var d = co;
      try {
        return co = i, a();
      } finally {
        co = d;
      }
    }
    function rf(i, a) {
      return i !== 0 && i < a ? i : a;
    }
    function xy(i, a) {
      return i === 0 || i > a ? i : a;
    }
    function cm(i, a) {
      return i !== 0 && i < a;
    }
    function th(i) {
      var a = Da(i);
      return cm(la, a) ? cm(fl, a) ? Kc(a) ? dl : nf : fl : la;
    }
    var nh = r.unstable_scheduleCallback, fm = r.unstable_cancelCallback, dm = r.unstable_shouldYield, af = r.unstable_requestPaint, Jn = r.unstable_now, fo = r.unstable_ImmediatePriority, _u = r.unstable_UserBlockingPriority, ns = r.unstable_NormalPriority, hl = r.unstable_IdlePriority, ih = r.unstable_yieldValue, rh = r.unstable_setDisableYieldValue, Rs = null, Ai = null, nt = null, Na = !1, sr = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u";
    function ah(i) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u")
        return !1;
      var a = __REACT_DEVTOOLS_GLOBAL_HOOK__;
      if (a.isDisabled)
        return !0;
      if (!a.supportsFiber)
        return h("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools"), !0;
      try {
        U && (i = _({}, i, {
          getLaneLabelMap: pl,
          injectProfilingHooks: Tr
        })), Rs = a.inject(i), Ai = a;
      } catch (d) {
        h("React instrumentation encountered an error: %s.", d);
      }
      return !!a.checkDCE;
    }
    function Qn(i, a) {
      if (Ai && typeof Ai.onScheduleFiberRoot == "function")
        try {
          Ai.onScheduleFiberRoot(Rs, i, a);
        } catch (d) {
          Na || (Na = !0, h("React instrumentation encountered an error: %s", d));
        }
    }
    function Zt(i, a) {
      if (Ai && typeof Ai.onCommitFiberRoot == "function")
        try {
          var d = (i.current.flags & _t) === _t;
          if (Y) {
            var m;
            switch (a) {
              case la:
                m = fo;
                break;
              case fl:
                m = _u;
                break;
              case dl:
                m = ns;
                break;
              case nf:
                m = hl;
                break;
              default:
                m = ns;
                break;
            }
            Ai.onCommitFiberRoot(Rs, i, m, d);
          }
        } catch (y) {
          Na || (Na = !0, h("React instrumentation encountered an error: %s", y));
        }
    }
    function oi(i) {
      if (Ai && typeof Ai.onPostCommitFiberRoot == "function")
        try {
          Ai.onPostCommitFiberRoot(Rs, i);
        } catch (a) {
          Na || (Na = !0, h("React instrumentation encountered an error: %s", a));
        }
    }
    function li(i) {
      if (Ai && typeof Ai.onCommitFiberUnmount == "function")
        try {
          Ai.onCommitFiberUnmount(Rs, i);
        } catch (a) {
          Na || (Na = !0, h("React instrumentation encountered an error: %s", a));
        }
    }
    function un(i) {
      if (typeof ih == "function" && (rh(i), f(i)), Ai && typeof Ai.setStrictMode == "function")
        try {
          Ai.setStrictMode(Rs, i);
        } catch (a) {
          Na || (Na = !0, h("React instrumentation encountered an error: %s", a));
        }
    }
    function Tr(i) {
      nt = i;
    }
    function pl() {
      {
        for (var i = /* @__PURE__ */ new Map(), a = 1, d = 0; d < hu; d++) {
          var m = _y(a);
          i.set(a, m), a *= 2;
        }
        return i;
      }
    }
    function vi(i) {
      nt !== null && typeof nt.markCommitStarted == "function" && nt.markCommitStarted(i);
    }
    function ml() {
      nt !== null && typeof nt.markCommitStopped == "function" && nt.markCommitStopped();
    }
    function Ua(i) {
      nt !== null && typeof nt.markComponentRenderStarted == "function" && nt.markComponentRenderStarted(i);
    }
    function is() {
      nt !== null && typeof nt.markComponentRenderStopped == "function" && nt.markComponentRenderStopped();
    }
    function sh(i) {
      nt !== null && typeof nt.markComponentPassiveEffectMountStarted == "function" && nt.markComponentPassiveEffectMountStarted(i);
    }
    function xu() {
      nt !== null && typeof nt.markComponentPassiveEffectMountStopped == "function" && nt.markComponentPassiveEffectMountStopped();
    }
    function or(i) {
      nt !== null && typeof nt.markComponentPassiveEffectUnmountStarted == "function" && nt.markComponentPassiveEffectUnmountStarted(i);
    }
    function oh() {
      nt !== null && typeof nt.markComponentPassiveEffectUnmountStopped == "function" && nt.markComponentPassiveEffectUnmountStopped();
    }
    function lh(i) {
      nt !== null && typeof nt.markComponentLayoutEffectMountStarted == "function" && nt.markComponentLayoutEffectMountStarted(i);
    }
    function vl() {
      nt !== null && typeof nt.markComponentLayoutEffectMountStopped == "function" && nt.markComponentLayoutEffectMountStopped();
    }
    function Su(i) {
      nt !== null && typeof nt.markComponentLayoutEffectUnmountStarted == "function" && nt.markComponentLayoutEffectUnmountStarted(i);
    }
    function sf() {
      nt !== null && typeof nt.markComponentLayoutEffectUnmountStopped == "function" && nt.markComponentLayoutEffectUnmountStopped();
    }
    function Cs(i, a, d) {
      nt !== null && typeof nt.markComponentErrored == "function" && nt.markComponentErrored(i, a, d);
    }
    function of(i, a, d) {
      nt !== null && typeof nt.markComponentSuspended == "function" && nt.markComponentSuspended(i, a, d);
    }
    function Ls(i) {
      nt !== null && typeof nt.markLayoutEffectsStarted == "function" && nt.markLayoutEffectsStarted(i);
    }
    function lf() {
      nt !== null && typeof nt.markLayoutEffectsStopped == "function" && nt.markLayoutEffectsStopped();
    }
    function Mu(i) {
      nt !== null && typeof nt.markPassiveEffectsStarted == "function" && nt.markPassiveEffectsStarted(i);
    }
    function uh() {
      nt !== null && typeof nt.markPassiveEffectsStopped == "function" && nt.markPassiveEffectsStopped();
    }
    function Eu(i) {
      nt !== null && typeof nt.markRenderStarted == "function" && nt.markRenderStarted(i);
    }
    function uf() {
      nt !== null && typeof nt.markRenderYielded == "function" && nt.markRenderYielded();
    }
    function zi() {
      nt !== null && typeof nt.markRenderStopped == "function" && nt.markRenderStopped();
    }
    function Ps(i) {
      nt !== null && typeof nt.markRenderScheduled == "function" && nt.markRenderScheduled(i);
    }
    function kr(i, a) {
      nt !== null && typeof nt.markForceUpdateScheduled == "function" && nt.markForceUpdateScheduled(i, a);
    }
    function gl(i, a) {
      nt !== null && typeof nt.markStateUpdateScheduled == "function" && nt.markStateUpdateScheduled(i, a);
    }
    function lr(i, a) {
      return i === a && (i !== 0 || 1 / i === 1 / a) || i !== i && a !== a;
    }
    var br = typeof Object.is == "function" ? Object.is : lr, ua = null, Tu = !1, ch = !1;
    function rs(i) {
      ua === null ? ua = [i] : ua.push(i);
    }
    function hm(i) {
      Tu = !0, rs(i);
    }
    function fh() {
      Tu && Gr();
    }
    function Gr() {
      if (!ch && ua !== null) {
        ch = !0;
        var i = 0, a = Er();
        try {
          var d = !0, m = ua;
          for (mi(la); i < m.length; i++) {
            var y = m[i];
            do
              y = y(d);
            while (y !== null);
          }
          ua = null, Tu = !1;
        } catch (w) {
          throw ua !== null && (ua = ua.slice(i + 1)), nh(fo, Gr), w;
        } finally {
          mi(a), ch = !1;
        }
      }
      return null;
    }
    function Ds(i) {
      var a = i.current.memoizedState;
      return a.isDehydrated;
    }
    var pm = o.ReactCurrentBatchConfig, mm = null;
    function dh() {
      return pm.transition;
    }
    function ho(i, a) {
      if (br(i, a))
        return !0;
      if (typeof i != "object" || i === null || typeof a != "object" || a === null)
        return !1;
      var d = Object.keys(i), m = Object.keys(a);
      if (d.length !== m.length)
        return !1;
      for (var y = 0; y < d.length; y++) {
        var w = d[y];
        if (!ra.call(a, w) || !br(i[w], a[w]))
          return !1;
      }
      return !0;
    }
    function Sy(i) {
      switch (i._debugOwner && i._debugOwner.type, i._debugSource, i.tag) {
        case K:
          return ia(i.type);
        case ht:
          return ia("Lazy");
        case ne:
          return ia("Suspense");
        case Ye:
          return ia("SuspenseList");
        case H:
        case F:
        case Oe:
          return ar(i.type);
        case Q:
          return ar(i.type.render);
        case k:
          return lu(i.type);
        default:
          return "";
      }
    }
    function vm(i) {
      try {
        var a = "", d = i;
        do
          a += Sy(d), d = d.return;
        while (d);
        return a;
      } catch (m) {
        return `
Error generating stack: ` + m.message + `
` + m.stack;
      }
    }
    var hh = o.ReactDebugCurrentFrame, wr = null, ca = !1;
    function My() {
      {
        if (wr === null)
          return null;
        var i = wr._debugOwner;
        if (i !== null && typeof i < "u")
          return G(i);
      }
      return null;
    }
    function po() {
      return wr === null ? "" : vm(wr);
    }
    function Ri() {
      hh.getCurrentStack = null, wr = null, ca = !1;
    }
    function pn(i) {
      hh.getCurrentStack = po, wr = i, ca = !1;
    }
    function Ia(i) {
      ca = i;
    }
    var Wr = {
      recordUnsafeLifecycleWarnings: function(i, a) {
      },
      flushPendingUnsafeLifecycleWarnings: function() {
      },
      recordLegacyContextWarning: function(i, a) {
      },
      flushLegacyContextWarning: function() {
      },
      discardPendingWarnings: function() {
      }
    };
    {
      var Ey = function(i) {
        for (var a = null, d = i; d !== null; )
          d.mode & jn && (a = d), d = d.return;
        return a;
      }, mo = function(i) {
        var a = [];
        return i.forEach(function(d) {
          a.push(d);
        }), a.sort().join(", ");
      }, yl = [], _l = [], bu = [], Bi = [], vo = [], wu = [], ur = /* @__PURE__ */ new Set();
      Wr.recordUnsafeLifecycleWarnings = function(i, a) {
        ur.has(i.type) || (typeof a.componentWillMount == "function" && // Don't warn about react-lifecycles-compat polyfilled components.
        a.componentWillMount.__suppressDeprecationWarning !== !0 && yl.push(i), i.mode & jn && typeof a.UNSAFE_componentWillMount == "function" && _l.push(i), typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps.__suppressDeprecationWarning !== !0 && bu.push(i), i.mode & jn && typeof a.UNSAFE_componentWillReceiveProps == "function" && Bi.push(i), typeof a.componentWillUpdate == "function" && a.componentWillUpdate.__suppressDeprecationWarning !== !0 && vo.push(i), i.mode & jn && typeof a.UNSAFE_componentWillUpdate == "function" && wu.push(i));
      }, Wr.flushPendingUnsafeLifecycleWarnings = function() {
        var i = /* @__PURE__ */ new Set();
        yl.length > 0 && (yl.forEach(function(ye) {
          i.add(G(ye) || "Component"), ur.add(ye.type);
        }), yl = []);
        var a = /* @__PURE__ */ new Set();
        _l.length > 0 && (_l.forEach(function(ye) {
          a.add(G(ye) || "Component"), ur.add(ye.type);
        }), _l = []);
        var d = /* @__PURE__ */ new Set();
        bu.length > 0 && (bu.forEach(function(ye) {
          d.add(G(ye) || "Component"), ur.add(ye.type);
        }), bu = []);
        var m = /* @__PURE__ */ new Set();
        Bi.length > 0 && (Bi.forEach(function(ye) {
          m.add(G(ye) || "Component"), ur.add(ye.type);
        }), Bi = []);
        var y = /* @__PURE__ */ new Set();
        vo.length > 0 && (vo.forEach(function(ye) {
          y.add(G(ye) || "Component"), ur.add(ye.type);
        }), vo = []);
        var w = /* @__PURE__ */ new Set();
        if (wu.length > 0 && (wu.forEach(function(ye) {
          w.add(G(ye) || "Component"), ur.add(ye.type);
        }), wu = []), a.size > 0) {
          var P = mo(a);
          h(`Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.

Please update the following components: %s`, P);
        }
        if (m.size > 0) {
          var I = mo(m);
          h(`Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state

Please update the following components: %s`, I);
        }
        if (w.size > 0) {
          var z = mo(w);
          h(`Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.

Please update the following components: %s`, z);
        }
        if (i.size > 0) {
          var Z = mo(i);
          p(`componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move code with side effects to componentDidMount, and set initial state in the constructor.
* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, Z);
        }
        if (d.size > 0) {
          var $ = mo(d);
          p(`componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state
* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, $);
        }
        if (y.size > 0) {
          var oe = mo(y);
          p(`componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.

* Move data fetching code or side effects to componentDidUpdate.
* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.

Please update the following components: %s`, oe);
        }
      };
      var go = /* @__PURE__ */ new Map(), Ns = /* @__PURE__ */ new Set();
      Wr.recordLegacyContextWarning = function(i, a) {
        var d = Ey(i);
        if (d === null) {
          h("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
          return;
        }
        if (!Ns.has(i.type)) {
          var m = go.get(d);
          (i.type.contextTypes != null || i.type.childContextTypes != null || a !== null && typeof a.getChildContext == "function") && (m === void 0 && (m = [], go.set(d, m)), m.push(i));
        }
      }, Wr.flushLegacyContextWarning = function() {
        go.forEach(function(i, a) {
          if (i.length !== 0) {
            var d = i[0], m = /* @__PURE__ */ new Set();
            i.forEach(function(w) {
              m.add(G(w) || "Component"), Ns.add(w.type);
            });
            var y = mo(m);
            try {
              pn(d), h(`Legacy context API has been detected within a strict-mode tree.

The old API will be supported in all 16.x releases, but applications using it should migrate to the new version.

Please update the following components: %s

Learn more about this warning here: https://reactjs.org/link/legacy-context`, y);
            } finally {
              Ri();
            }
          }
        });
      }, Wr.discardPendingWarnings = function() {
        yl = [], _l = [], bu = [], Bi = [], vo = [], wu = [], go = /* @__PURE__ */ new Map();
      };
    }
    function Au(i) {
      {
        var a = typeof Symbol == "function" && Symbol.toStringTag, d = a && i[Symbol.toStringTag] || i.constructor.name || "Object";
        return d;
      }
    }
    function cf(i) {
      try {
        return Ru(i), !1;
      } catch {
        return !0;
      }
    }
    function Ru(i) {
      return "" + i;
    }
    function Ty(i) {
      if (cf(i))
        return h("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", Au(i)), Ru(i);
    }
    function gm(i, a) {
      if (cf(i))
        return h("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", a, Au(i)), Ru(i);
    }
    function Xr(i, a) {
      if (i && i.defaultProps) {
        var d = _({}, a), m = i.defaultProps;
        for (var y in m)
          d[y] === void 0 && (d[y] = m[y]);
        return d;
      }
      return a;
    }
    var Cu = Aa(null), xl;
    xl = {};
    var Sl = null, Ml = null, ph = null, l = !1;
    function u() {
      Sl = null, Ml = null, ph = null, l = !1;
    }
    function v() {
      l = !0;
    }
    function S() {
      l = !1;
    }
    function A(i, a, d) {
      Ss ? (wn(Cu, a._currentValue, i), a._currentValue = d, a._currentRenderer !== void 0 && a._currentRenderer !== null && a._currentRenderer !== xl && h("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), a._currentRenderer = xl) : (wn(Cu, a._currentValue2, i), a._currentValue2 = d, a._currentRenderer2 !== void 0 && a._currentRenderer2 !== null && a._currentRenderer2 !== xl && h("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."), a._currentRenderer2 = xl);
    }
    function D(i, a) {
      var d = Cu.current;
      di(Cu, a), Ss ? i._currentValue = d : i._currentValue2 = d;
    }
    function j(i, a, d) {
      for (var m = i; m !== null; ) {
        var y = m.alternate;
        if (ul(m.childLanes, a) ? y !== null && !ul(y.childLanes, a) && (y.childLanes = Gt(y.childLanes, a)) : (m.childLanes = Gt(m.childLanes, a), y !== null && (y.childLanes = Gt(y.childLanes, a))), m === d)
          break;
        m = m.return;
      }
      m !== d && h("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function ee(i, a, d) {
      Ee(i, a, d);
    }
    function Ee(i, a, d) {
      var m = i.child;
      for (m !== null && (m.return = i); m !== null; ) {
        var y = void 0, w = m.dependencies;
        if (w !== null) {
          y = m.child;
          for (var P = w.firstContext; P !== null; ) {
            if (P.context === a) {
              if (m.tag === k) {
                var I = ll(d), z = Ut(Nn, I);
                z.tag = Ji;
                var Z = m.updateQueue;
                if (Z !== null) {
                  var $ = Z.shared, oe = $.pending;
                  oe === null ? z.next = z : (z.next = oe.next, oe.next = z), $.pending = z;
                }
              }
              m.lanes = Gt(m.lanes, d);
              var ye = m.alternate;
              ye !== null && (ye.lanes = Gt(ye.lanes, d)), j(m.return, d, i), w.lanes = Gt(w.lanes, d);
              break;
            }
            P = P.next;
          }
        } else if (m.tag === Fe)
          y = m.type === i.type ? null : m.child;
        else if (m.tag === Ue) {
          var we = m.return;
          if (we === null)
            throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
          we.lanes = Gt(we.lanes, d);
          var ze = we.alternate;
          ze !== null && (ze.lanes = Gt(ze.lanes, d)), j(we, d, i), y = m.sibling;
        } else
          y = m.child;
        if (y !== null)
          y.return = m;
        else
          for (y = m; y !== null; ) {
            if (y === i) {
              y = null;
              break;
            }
            var We = y.sibling;
            if (We !== null) {
              We.return = y.return, y = We;
              break;
            }
            y = y.return;
          }
        m = y;
      }
    }
    function ke(i, a) {
      Sl = i, Ml = null, ph = null;
      var d = i.dependencies;
      if (d !== null) {
        var m = d.firstContext;
        m !== null && (Zn(d.lanes, a) && ev(), d.firstContext = null);
      }
    }
    function Qe(i) {
      l && h("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      var a = Ss ? i._currentValue : i._currentValue2;
      if (ph !== i) {
        var d = {
          context: i,
          memoizedValue: a,
          next: null
        };
        if (Ml === null) {
          if (Sl === null)
            throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          Ml = d, Sl.dependencies = {
            lanes: Ie,
            firstContext: d
          };
        } else
          Ml = Ml.next = d;
      }
      return a;
    }
    var Ot = null;
    function Lt(i) {
      Ot === null ? Ot = [i] : Ot.push(i);
    }
    function Cn() {
      if (Ot !== null) {
        for (var i = 0; i < Ot.length; i++) {
          var a = Ot[i], d = a.interleaved;
          if (d !== null) {
            a.interleaved = null;
            var m = d.next, y = a.pending;
            if (y !== null) {
              var w = y.next;
              y.next = m, d.next = w;
            }
            a.pending = d;
          }
        }
        Ot = null;
      }
    }
    var Et = 0, Ci = 1, Ji = 2, ce = 3, te = !1, ge, it;
    ge = !1, it = null;
    function xt(i) {
      var a = {
        baseState: i.memoizedState,
        firstBaseUpdate: null,
        lastBaseUpdate: null,
        shared: {
          pending: null,
          interleaved: null,
          lanes: Ie
        },
        effects: null
      };
      i.updateQueue = a;
    }
    function Wt(i, a) {
      var d = a.updateQueue, m = i.updateQueue;
      if (d === m) {
        var y = {
          baseState: m.baseState,
          firstBaseUpdate: m.firstBaseUpdate,
          lastBaseUpdate: m.lastBaseUpdate,
          shared: m.shared,
          effects: m.effects
        };
        a.updateQueue = y;
      }
    }
    function Ut(i, a) {
      var d = {
        eventTime: i,
        lane: a,
        tag: Et,
        payload: null,
        callback: null,
        next: null
      };
      return d;
    }
    function Jt(i, a, d) {
      var m = i.updateQueue;
      if (m !== null) {
        var y = m.shared;
        if (r1(i)) {
          var w = y.interleaved;
          w === null ? (a.next = a, Lt(y)) : (a.next = w.next, w.next = a), y.interleaved = a;
        } else {
          var P = y.pending;
          P === null ? a.next = a : (a.next = P.next, P.next = a), y.pending = a;
        }
        it === y && !ge && (h("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback."), ge = !0);
      }
    }
    function Kn(i, a, d) {
      var m = a.updateQueue;
      if (m !== null) {
        var y = m.shared;
        if (ef(d)) {
          var w = y.lanes;
          w = As(w, i.pendingLanes);
          var P = Gt(w, d);
          y.lanes = P, uo(i, P);
        }
      }
    }
    function cn(i, a) {
      var d = i.updateQueue, m = i.alternate;
      if (m !== null) {
        var y = m.updateQueue;
        if (d === y) {
          var w = null, P = null, I = d.firstBaseUpdate;
          if (I !== null) {
            var z = I;
            do {
              var Z = {
                eventTime: z.eventTime,
                lane: z.lane,
                tag: z.tag,
                payload: z.payload,
                callback: z.callback,
                next: null
              };
              P === null ? w = P = Z : (P.next = Z, P = Z), z = z.next;
            } while (z !== null);
            P === null ? w = P = a : (P.next = a, P = a);
          } else
            w = P = a;
          d = {
            baseState: y.baseState,
            firstBaseUpdate: w,
            lastBaseUpdate: P,
            shared: y.shared,
            effects: y.effects
          }, i.updateQueue = d;
          return;
        }
      }
      var $ = d.lastBaseUpdate;
      $ === null ? d.firstBaseUpdate = a : $.next = a, d.lastBaseUpdate = a;
    }
    function Us(i, a, d, m, y, w) {
      switch (d.tag) {
        case Ci: {
          var P = d.payload;
          if (typeof P == "function") {
            v();
            var I = P.call(w, m, y);
            {
              if (i.mode & jn) {
                un(!0);
                try {
                  P.call(w, m, y);
                } finally {
                  un(!1);
                }
              }
              S();
            }
            return I;
          }
          return P;
        }
        case ce:
          i.flags = i.flags & ~Oi | _t;
        case Et: {
          var z = d.payload, Z;
          if (typeof z == "function") {
            v(), Z = z.call(w, m, y);
            {
              if (i.mode & jn) {
                un(!0);
                try {
                  z.call(w, m, y);
                } finally {
                  un(!1);
                }
              }
              S();
            }
          } else
            Z = z;
          return Z == null ? m : _({}, m, Z);
        }
        case Ji:
          return te = !0, m;
      }
      return m;
    }
    function ff(i, a, d, m) {
      var y = i.updateQueue;
      te = !1, it = y.shared;
      var w = y.firstBaseUpdate, P = y.lastBaseUpdate, I = y.shared.pending;
      if (I !== null) {
        y.shared.pending = null;
        var z = I, Z = z.next;
        z.next = null, P === null ? w = Z : P.next = Z, P = z;
        var $ = i.alternate;
        if ($ !== null) {
          var oe = $.updateQueue, ye = oe.lastBaseUpdate;
          ye !== P && (ye === null ? oe.firstBaseUpdate = Z : ye.next = Z, oe.lastBaseUpdate = z);
        }
      }
      if (w !== null) {
        var we = y.baseState, ze = Ie, We = null, Rt = null, Xt = null, It = w;
        do {
          var Gn = It.lane, Wn = It.eventTime;
          if (ul(m, Gn)) {
            if (Xt !== null) {
              var Ce = {
                eventTime: Wn,
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: pi,
                tag: It.tag,
                payload: It.payload,
                callback: It.callback,
                next: null
              };
              Xt = Xt.next = Ce;
            }
            we = Us(i, y, It, we, a, d);
            var le = It.callback;
            if (le !== null && // If the update was already committed, we should not queue its
            // callback again.
            It.lane !== pi) {
              i.flags |= si;
              var je = y.effects;
              je === null ? y.effects = [It] : je.push(It);
            }
          } else {
            var fe = {
              eventTime: Wn,
              lane: Gn,
              tag: It.tag,
              payload: It.payload,
              callback: It.callback,
              next: null
            };
            Xt === null ? (Rt = Xt = fe, We = we) : Xt = Xt.next = fe, ze = Gt(ze, Gn);
          }
          if (It = It.next, It === null) {
            if (I = y.shared.pending, I === null)
              break;
            var Tt = I, dt = Tt.next;
            Tt.next = null, It = dt, y.lastBaseUpdate = Tt, y.shared.pending = null;
          }
        } while (!0);
        Xt === null && (We = we), y.baseState = We, y.firstBaseUpdate = Rt, y.lastBaseUpdate = Xt;
        var rn = y.shared.interleaved;
        if (rn !== null) {
          var En = rn;
          do
            ze = Gt(ze, En.lane), En = En.next;
          while (En !== rn);
        } else
          w === null && (y.shared.lanes = Ie);
        Ev(ze), i.lanes = ze, i.memoizedState = we;
      }
      it = null;
    }
    function DR(i, a) {
      if (typeof i != "function")
        throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + i));
      i.call(a);
    }
    function rM() {
      te = !1;
    }
    function ym() {
      return te;
    }
    function aM(i, a, d) {
      var m = a.effects;
      if (a.effects = null, m !== null)
        for (var y = 0; y < m.length; y++) {
          var w = m[y], P = w.callback;
          P !== null && (w.callback = null, DR(P, d));
        }
    }
    var by = {}, sM = new n.Component().refs, wy, Ay, Ry, Cy, Ly, oM, _m, Py, Dy, Ny;
    {
      wy = /* @__PURE__ */ new Set(), Ay = /* @__PURE__ */ new Set(), Ry = /* @__PURE__ */ new Set(), Cy = /* @__PURE__ */ new Set(), Py = /* @__PURE__ */ new Set(), Ly = /* @__PURE__ */ new Set(), Dy = /* @__PURE__ */ new Set(), Ny = /* @__PURE__ */ new Set();
      var lM = /* @__PURE__ */ new Set();
      _m = function(i, a) {
        if (!(i === null || typeof i == "function")) {
          var d = a + "_" + i;
          lM.has(d) || (lM.add(d), h("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", a, i));
        }
      }, oM = function(i, a) {
        if (a === void 0) {
          var d = et(i) || "Component";
          Ly.has(d) || (Ly.add(d), h("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", d));
        }
      }, Object.defineProperty(by, "_processChildContext", {
        enumerable: !1,
        value: function() {
          throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
      }), Object.freeze(by);
    }
    function Uy(i, a, d, m) {
      var y = i.memoizedState, w = d(m, y);
      {
        if (i.mode & jn) {
          un(!0);
          try {
            w = d(m, y);
          } finally {
            un(!1);
          }
        }
        oM(a, w);
      }
      var P = w == null ? y : _({}, y, w);
      if (i.memoizedState = P, i.lanes === Ie) {
        var I = i.updateQueue;
        I.baseState = P;
      }
    }
    var Iy = {
      isMounted: Xi,
      enqueueSetState: function(i, a, d) {
        var m = x(i), y = Rr(), w = Ll(m), P = Ut(y, w);
        P.payload = a, d != null && (_m(d, "setState"), P.callback = d), Jt(m, P);
        var I = Ni(m, w, y);
        I !== null && Kn(I, m, w), gl(m, w);
      },
      enqueueReplaceState: function(i, a, d) {
        var m = x(i), y = Rr(), w = Ll(m), P = Ut(y, w);
        P.tag = Ci, P.payload = a, d != null && (_m(d, "replaceState"), P.callback = d), Jt(m, P);
        var I = Ni(m, w, y);
        I !== null && Kn(I, m, w), gl(m, w);
      },
      enqueueForceUpdate: function(i, a) {
        var d = x(i), m = Rr(), y = Ll(d), w = Ut(m, y);
        w.tag = Ji, a != null && (_m(a, "forceUpdate"), w.callback = a), Jt(d, w);
        var P = Ni(d, y, m);
        P !== null && Kn(P, d, y), kr(d, y);
      }
    };
    function uM(i, a, d, m, y, w, P) {
      var I = i.stateNode;
      if (typeof I.shouldComponentUpdate == "function") {
        var z = I.shouldComponentUpdate(m, w, P);
        {
          if (i.mode & jn) {
            un(!0);
            try {
              z = I.shouldComponentUpdate(m, w, P);
            } finally {
              un(!1);
            }
          }
          z === void 0 && h("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", et(a) || "Component");
        }
        return z;
      }
      return a.prototype && a.prototype.isPureReactComponent ? !ho(d, m) || !ho(y, w) : !0;
    }
    function NR(i, a, d) {
      var m = i.stateNode;
      {
        var y = et(a) || "Component", w = m.render;
        w || (a.prototype && typeof a.prototype.render == "function" ? h("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", y) : h("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", y)), m.getInitialState && !m.getInitialState.isReactClassApproved && !m.state && h("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", y), m.getDefaultProps && !m.getDefaultProps.isReactClassApproved && h("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", y), m.propTypes && h("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", y), m.contextType && h("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", y), m.contextTypes && h("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", y), a.contextType && a.contextTypes && !Dy.has(a) && (Dy.add(a), h("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", y)), typeof m.componentShouldUpdate == "function" && h("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", y), a.prototype && a.prototype.isPureReactComponent && typeof m.shouldComponentUpdate < "u" && h("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", et(a) || "A pure component"), typeof m.componentDidUnmount == "function" && h("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", y), typeof m.componentDidReceiveProps == "function" && h("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", y), typeof m.componentWillRecieveProps == "function" && h("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", y), typeof m.UNSAFE_componentWillRecieveProps == "function" && h("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", y);
        var P = m.props !== d;
        m.props !== void 0 && P && h("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", y, y), m.defaultProps && h("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", y, y), typeof m.getSnapshotBeforeUpdate == "function" && typeof m.componentDidUpdate != "function" && !Ry.has(a) && (Ry.add(a), h("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", et(a))), typeof m.getDerivedStateFromProps == "function" && h("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", y), typeof m.getDerivedStateFromError == "function" && h("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", y), typeof a.getSnapshotBeforeUpdate == "function" && h("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", y);
        var I = m.state;
        I && (typeof I != "object" || Sn(I)) && h("%s.state: must be set to an object or null", y), typeof m.getChildContext == "function" && typeof a.childContextTypes != "object" && h("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", y);
      }
    }
    function cM(i, a) {
      a.updater = Iy, i.stateNode = a, M(a, i), a._reactInternalInstance = by;
    }
    function fM(i, a, d) {
      var m = !1, y = ln, w = ln, P = a.contextType;
      if ("contextType" in a) {
        var I = (
          // Allow null for conditional declaration
          P === null || P !== void 0 && P.$$typeof === O && P._context === void 0
        );
        if (!I && !Ny.has(a)) {
          Ny.add(a);
          var z = "";
          P === void 0 ? z = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof P != "object" ? z = " However, it is set to a " + typeof P + "." : P.$$typeof === W ? z = " Did you accidentally pass the Context.Provider instead?" : P._context !== void 0 ? z = " Did you accidentally pass the Context.Consumer instead?" : z = " However, it is set to an object with keys {" + Object.keys(P).join(", ") + "}.", h("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", et(a) || "Component", z);
        }
      }
      if (typeof P == "object" && P !== null)
        w = Qe(P);
      else {
        y = Ra(i, a, !0);
        var Z = a.contextTypes;
        m = Z != null, w = m ? Ko(i, y) : ln;
      }
      var $ = new a(d, w);
      if (i.mode & jn) {
        un(!0);
        try {
          $ = new a(d, w);
        } finally {
          un(!1);
        }
      }
      var oe = i.memoizedState = $.state !== null && $.state !== void 0 ? $.state : null;
      cM(i, $);
      {
        if (typeof a.getDerivedStateFromProps == "function" && oe === null) {
          var ye = et(a) || "Component";
          Ay.has(ye) || (Ay.add(ye), h("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", ye, $.state === null ? "null" : "undefined", ye));
        }
        if (typeof a.getDerivedStateFromProps == "function" || typeof $.getSnapshotBeforeUpdate == "function") {
          var we = null, ze = null, We = null;
          if (typeof $.componentWillMount == "function" && $.componentWillMount.__suppressDeprecationWarning !== !0 ? we = "componentWillMount" : typeof $.UNSAFE_componentWillMount == "function" && (we = "UNSAFE_componentWillMount"), typeof $.componentWillReceiveProps == "function" && $.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? ze = "componentWillReceiveProps" : typeof $.UNSAFE_componentWillReceiveProps == "function" && (ze = "UNSAFE_componentWillReceiveProps"), typeof $.componentWillUpdate == "function" && $.componentWillUpdate.__suppressDeprecationWarning !== !0 ? We = "componentWillUpdate" : typeof $.UNSAFE_componentWillUpdate == "function" && (We = "UNSAFE_componentWillUpdate"), we !== null || ze !== null || We !== null) {
            var Rt = et(a) || "Component", Xt = typeof a.getDerivedStateFromProps == "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
            Cy.has(Rt) || (Cy.add(Rt), h(`Unsafe legacy lifecycles will not be called for components using new component APIs.

%s uses %s but also contains the following legacy lifecycles:%s%s%s

The above lifecycles should be removed. Learn more about this warning here:
https://reactjs.org/link/unsafe-component-lifecycles`, Rt, Xt, we !== null ? `
  ` + we : "", ze !== null ? `
  ` + ze : "", We !== null ? `
  ` + We : ""));
          }
        }
      }
      return m && Qo(i, y, w), $;
    }
    function UR(i, a) {
      var d = a.state;
      typeof a.componentWillMount == "function" && a.componentWillMount(), typeof a.UNSAFE_componentWillMount == "function" && a.UNSAFE_componentWillMount(), d !== a.state && (h("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", G(i) || "Component"), Iy.enqueueReplaceState(a, a.state, null));
    }
    function dM(i, a, d, m) {
      var y = a.state;
      if (typeof a.componentWillReceiveProps == "function" && a.componentWillReceiveProps(d, m), typeof a.UNSAFE_componentWillReceiveProps == "function" && a.UNSAFE_componentWillReceiveProps(d, m), a.state !== y) {
        {
          var w = G(i) || "Component";
          wy.has(w) || (wy.add(w), h("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", w));
        }
        Iy.enqueueReplaceState(a, a.state, null);
      }
    }
    function Oy(i, a, d, m) {
      NR(i, a, d);
      var y = i.stateNode;
      y.props = d, y.state = i.memoizedState, y.refs = sM, xt(i);
      var w = a.contextType;
      if (typeof w == "object" && w !== null)
        y.context = Qe(w);
      else {
        var P = Ra(i, a, !0);
        y.context = Ko(i, P);
      }
      {
        if (y.state === d) {
          var I = et(a) || "Component";
          Py.has(I) || (Py.add(I), h("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", I));
        }
        i.mode & jn && Wr.recordLegacyContextWarning(i, y), Wr.recordUnsafeLifecycleWarnings(i, y);
      }
      y.state = i.memoizedState;
      var z = a.getDerivedStateFromProps;
      if (typeof z == "function" && (Uy(i, a, z, d), y.state = i.memoizedState), typeof a.getDerivedStateFromProps != "function" && typeof y.getSnapshotBeforeUpdate != "function" && (typeof y.UNSAFE_componentWillMount == "function" || typeof y.componentWillMount == "function") && (UR(i, y), ff(i, d, y, m), y.state = i.memoizedState), typeof y.componentDidMount == "function") {
        var Z = Ze;
        Z |= re, (i.mode & Hr) !== Vt && (Z |= pe), i.flags |= Z;
      }
    }
    function IR(i, a, d, m) {
      var y = i.stateNode, w = i.memoizedProps;
      y.props = w;
      var P = y.context, I = a.contextType, z = ln;
      if (typeof I == "object" && I !== null)
        z = Qe(I);
      else {
        var Z = Ra(i, a, !0);
        z = Ko(i, Z);
      }
      var $ = a.getDerivedStateFromProps, oe = typeof $ == "function" || typeof y.getSnapshotBeforeUpdate == "function";
      !oe && (typeof y.UNSAFE_componentWillReceiveProps == "function" || typeof y.componentWillReceiveProps == "function") && (w !== d || P !== z) && dM(i, y, d, z), rM();
      var ye = i.memoizedState, we = y.state = ye;
      if (ff(i, d, y, m), we = i.memoizedState, w === d && ye === we && !hi() && !ym()) {
        if (typeof y.componentDidMount == "function") {
          var ze = Ze;
          ze |= re, (i.mode & Hr) !== Vt && (ze |= pe), i.flags |= ze;
        }
        return !1;
      }
      typeof $ == "function" && (Uy(i, a, $, d), we = i.memoizedState);
      var We = ym() || uM(i, a, w, d, ye, we, z);
      if (We) {
        if (!oe && (typeof y.UNSAFE_componentWillMount == "function" || typeof y.componentWillMount == "function") && (typeof y.componentWillMount == "function" && y.componentWillMount(), typeof y.UNSAFE_componentWillMount == "function" && y.UNSAFE_componentWillMount()), typeof y.componentDidMount == "function") {
          var Rt = Ze;
          Rt |= re, (i.mode & Hr) !== Vt && (Rt |= pe), i.flags |= Rt;
        }
      } else {
        if (typeof y.componentDidMount == "function") {
          var Xt = Ze;
          Xt |= re, (i.mode & Hr) !== Vt && (Xt |= pe), i.flags |= Xt;
        }
        i.memoizedProps = d, i.memoizedState = we;
      }
      return y.props = d, y.state = we, y.context = z, We;
    }
    function OR(i, a, d, m, y) {
      var w = a.stateNode;
      Wt(i, a);
      var P = a.memoizedProps, I = a.type === a.elementType ? P : Xr(a.type, P);
      w.props = I;
      var z = a.pendingProps, Z = w.context, $ = d.contextType, oe = ln;
      if (typeof $ == "object" && $ !== null)
        oe = Qe($);
      else {
        var ye = Ra(a, d, !0);
        oe = Ko(a, ye);
      }
      var we = d.getDerivedStateFromProps, ze = typeof we == "function" || typeof w.getSnapshotBeforeUpdate == "function";
      !ze && (typeof w.UNSAFE_componentWillReceiveProps == "function" || typeof w.componentWillReceiveProps == "function") && (P !== z || Z !== oe) && dM(a, w, m, oe), rM();
      var We = a.memoizedState, Rt = w.state = We;
      if (ff(a, m, w, y), Rt = a.memoizedState, P === z && We === Rt && !hi() && !ym() && !b)
        return typeof w.componentDidUpdate == "function" && (P !== i.memoizedProps || We !== i.memoizedState) && (a.flags |= Ze), typeof w.getSnapshotBeforeUpdate == "function" && (P !== i.memoizedProps || We !== i.memoizedState) && (a.flags |= Gi), !1;
      typeof we == "function" && (Uy(a, d, we, m), Rt = a.memoizedState);
      var Xt = ym() || uM(a, d, I, m, We, Rt, oe) || // TODO: In some cases, we'll end up checking if context has changed twice,
      // both before and after `shouldComponentUpdate` has been called. Not ideal,
      // but I'm loath to refactor this function. This only happens for memoized
      // components so it's not that common.
      b;
      return Xt ? (!ze && (typeof w.UNSAFE_componentWillUpdate == "function" || typeof w.componentWillUpdate == "function") && (typeof w.componentWillUpdate == "function" && w.componentWillUpdate(m, Rt, oe), typeof w.UNSAFE_componentWillUpdate == "function" && w.UNSAFE_componentWillUpdate(m, Rt, oe)), typeof w.componentDidUpdate == "function" && (a.flags |= Ze), typeof w.getSnapshotBeforeUpdate == "function" && (a.flags |= Gi)) : (typeof w.componentDidUpdate == "function" && (P !== i.memoizedProps || We !== i.memoizedState) && (a.flags |= Ze), typeof w.getSnapshotBeforeUpdate == "function" && (P !== i.memoizedProps || We !== i.memoizedState) && (a.flags |= Gi), a.memoizedProps = m, a.memoizedState = Rt), w.props = m, w.state = Rt, w.context = oe, Xt;
    }
    var df = [], hf = 0, xm = null, Sm = 0, Oa = [], Fa = 0, Lu = null, yo = 1, _o = "";
    function FR(i) {
      return Du(), (i.flags & Sc) !== de;
    }
    function zR(i) {
      return Du(), Sm;
    }
    function BR() {
      var i = _o, a = yo, d = a & ~HR(a);
      return d.toString(32) + i;
    }
    function Pu(i, a) {
      Du(), df[hf++] = Sm, df[hf++] = xm, xm = i, Sm = a;
    }
    function hM(i, a, d) {
      Du(), Oa[Fa++] = yo, Oa[Fa++] = _o, Oa[Fa++] = Lu, Lu = i;
      var m = yo, y = _o, w = Mm(m) - 1, P = m & ~(1 << w), I = d + 1, z = Mm(a) + w;
      if (z > 30) {
        var Z = w - w % 5, $ = (1 << Z) - 1, oe = (P & $).toString(32), ye = P >> Z, we = w - Z, ze = Mm(a) + we, We = I << we, Rt = We | ye, Xt = oe + y;
        yo = 1 << ze | Rt, _o = Xt;
      } else {
        var It = I << w, Gn = It | P, Wn = y;
        yo = 1 << z | Gn, _o = Wn;
      }
    }
    function Fy(i) {
      Du();
      var a = i.return;
      if (a !== null) {
        var d = 1, m = 0;
        Pu(i, d), hM(i, d, m);
      }
    }
    function Mm(i) {
      return 32 - el(i);
    }
    function HR(i) {
      return 1 << Mm(i) - 1;
    }
    function zy(i) {
      for (; i === xm; )
        xm = df[--hf], df[hf] = null, Sm = df[--hf], df[hf] = null;
      for (; i === Lu; )
        Lu = Oa[--Fa], Oa[Fa] = null, _o = Oa[--Fa], Oa[Fa] = null, yo = Oa[--Fa], Oa[Fa] = null;
    }
    function VR() {
      return Du(), Lu !== null ? {
        id: yo,
        overflow: _o
      } : null;
    }
    function kR(i, a) {
      Du(), Oa[Fa++] = yo, Oa[Fa++] = _o, Oa[Fa++] = Lu, yo = a.id, _o = a.overflow, Lu = i;
    }
    function Du() {
      cr() || h("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var Qi = null, za = null, as = !1, Nu = !1, El = null;
    function GR() {
      as && h("We should not be hydrating here. This is a bug in React. Please file a bug.");
    }
    function WR() {
      Nu = !0;
    }
    function XR(i) {
      if (!Zi)
        return !1;
      var a = i.stateNode.containerInfo;
      return za = Es(a), Qi = i, as = !0, El = null, Nu = !1, !0;
    }
    function qR(i, a, d) {
      return Zi ? (za = Cc(a), Qi = i, as = !0, El = null, Nu = !1, d !== null && kR(i, d), !0) : !1;
    }
    function pM(i, a) {
      switch (i.tag) {
        case N:
          qo(i.stateNode.containerInfo, a);
          break;
        case K:
          Uc(i.type, i.memoizedProps, i.stateNode, a);
          break;
        case ne:
          var d = i.memoizedState;
          d.dehydrated !== null && Nc(d.dehydrated, a);
          break;
      }
    }
    function mM(i, a) {
      pM(i, a);
      var d = YL();
      d.stateNode = a, d.return = i;
      var m = i.deletions;
      m === null ? (i.deletions = [d], i.flags |= an) : m.push(d);
    }
    function By(i, a) {
      {
        if (Nu)
          return;
        switch (i.tag) {
          case N: {
            var d = i.stateNode.containerInfo;
            switch (a.tag) {
              case K:
                var m = a.type, y = a.pendingProps;
                Or(d, m, y);
                break;
              case J:
                var w = a.pendingProps;
                Fr(d, w);
                break;
              case ne:
                Js(d);
                break;
            }
            break;
          }
          case K: {
            var P = i.type, I = i.memoizedProps, z = i.stateNode;
            switch (a.tag) {
              case K:
                var Z = a.type, $ = a.pendingProps;
                em(P, I, z, Z, $);
                break;
              case J:
                var oe = a.pendingProps;
                Od(P, I, z, oe);
                break;
              case ne:
                Fd(P, I, z);
                break;
            }
            break;
          }
          case ne: {
            var ye = i.memoizedState, we = ye.dehydrated;
            if (we !== null)
              switch (a.tag) {
                case K:
                  var ze = a.type, We = a.pendingProps;
                  Qa(we, ze, We);
                  break;
                case J:
                  var Rt = a.pendingProps;
                  Ka(we, Rt);
                  break;
                case ne:
                  Qs(we);
                  break;
              }
            break;
          }
          default:
            return;
        }
      }
    }
    function vM(i, a) {
      a.flags = a.flags & ~Wi | Ke, By(i, a);
    }
    function gM(i, a) {
      switch (i.tag) {
        case K: {
          var d = i.type, m = i.pendingProps, y = Nd(a, d, m);
          return y !== null ? (i.stateNode = y, Qi = i, za = Ja(y), !0) : !1;
        }
        case J: {
          var w = i.pendingProps, P = Wo(a, w);
          return P !== null ? (i.stateNode = P, Qi = i, za = null, !0) : !1;
        }
        case ne: {
          {
            var I = Ir(a);
            if (I !== null) {
              var z = {
                dehydrated: I,
                treeContext: VR(),
                retryLane: An
              };
              i.memoizedState = z;
              var Z = jL(I);
              return Z.return = i, i.child = Z, Qi = i, za = null, !0;
            }
          }
          return !1;
        }
        default:
          return !1;
      }
    }
    function Hy(i) {
      return (i.mode & Mn) !== Vt && (i.flags & _t) === de;
    }
    function Vy(i) {
      throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function ky(i) {
      if (as) {
        var a = za;
        if (!a) {
          Hy(i) && (By(Qi, i), Vy()), vM(Qi, i), as = !1, Qi = i;
          return;
        }
        var d = a;
        if (!gM(i, a)) {
          Hy(i) && (By(Qi, i), Vy()), a = ru(d);
          var m = Qi;
          if (!a || !gM(i, a)) {
            vM(Qi, i), as = !1, Qi = i;
            return;
          }
          mM(m, d);
        }
      }
    }
    function YR(i, a, d) {
      if (!Zi)
        throw new Error("Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var m = i.stateNode, y = !Nu, w = jp(m, i.type, i.memoizedProps, a, d, i, y);
      return i.updateQueue = w, w !== null;
    }
    function jR(i) {
      if (!Zi)
        throw new Error("Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.stateNode, d = i.memoizedProps, m = !Nu, y = Lc(a, d, i, m);
      if (y) {
        var w = Qi;
        if (w !== null) {
          var P = (w.mode & Mn) !== Vt;
          switch (w.tag) {
            case N: {
              var I = w.stateNode.containerInfo;
              Id(
                I,
                a,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                P
              );
              break;
            }
            case K: {
              var z = w.type, Z = w.memoizedProps, $ = w.stateNode;
              Xo(
                z,
                Z,
                $,
                a,
                d,
                // TODO: Delete this argument when we remove the legacy root API.
                P
              );
              break;
            }
          }
        }
      }
      return y;
    }
    function ZR(i) {
      if (!Zi)
        throw new Error("Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.memoizedState, d = a !== null ? a.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      Zp(d, i);
    }
    function JR(i) {
      if (!Zi)
        throw new Error("Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.");
      var a = i.memoizedState, d = a !== null ? a.dehydrated : null;
      if (!d)
        throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
      return Jp(d);
    }
    function yM(i) {
      for (var a = i.return; a !== null && a.tag !== K && a.tag !== N && a.tag !== ne; )
        a = a.return;
      Qi = a;
    }
    function mh(i) {
      if (!Zi || i !== Qi)
        return !1;
      if (!as)
        return yM(i), as = !0, !1;
      if (i.tag !== N && (i.tag !== K || $p(i.type) && !Td(i.type, i.memoizedProps))) {
        var a = za;
        if (a)
          if (Hy(i))
            _M(i), Vy();
          else
            for (; a; )
              mM(i, a), a = ru(a);
      }
      return yM(i), i.tag === ne ? za = JR(i) : za = Qi ? ru(i.stateNode) : null, !0;
    }
    function QR() {
      return as && za !== null;
    }
    function _M(i) {
      for (var a = za; a; )
        pM(i, a), a = ru(a);
    }
    function pf() {
      Zi && (Qi = null, za = null, as = !1, Nu = !1);
    }
    function xM() {
      El !== null && (s1(El), El = null);
    }
    function cr() {
      return as;
    }
    function Gy(i) {
      El === null ? El = [i] : El.push(i);
    }
    var Wy, Xy, qy, Yy, jy, SM = function(i, a) {
    };
    Wy = !1, Xy = !1, qy = {}, Yy = {}, jy = {}, SM = function(i, a) {
      if (!(i === null || typeof i != "object") && !(!i._store || i._store.validated || i.key != null)) {
        if (typeof i._store != "object")
          throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        i._store.validated = !0;
        var d = G(a) || "Component";
        Yy[d] || (Yy[d] = !0, h('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.'));
      }
    };
    function vh(i, a, d) {
      var m = d.ref;
      if (m !== null && typeof m != "function" && typeof m != "object") {
        if ((i.mode & jn || C) && // We warn in ReactElement.js if owner and self are equal for string refs
        // because these cannot be automatically converted to an arrow function
        // using a codemod. Therefore, we don't have to warn about string refs again.
        !(d._owner && d._self && d._owner.stateNode !== d._self)) {
          var y = G(i) || "Component";
          qy[y] || (h('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', m), qy[y] = !0);
        }
        if (d._owner) {
          var w = d._owner, P;
          if (w) {
            var I = w;
            if (I.tag !== k)
              throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
            P = I.stateNode;
          }
          if (!P)
            throw new Error("Missing owner for string ref " + m + ". This error is likely caused by a bug in React. Please file an issue.");
          var z = P;
          gm(m, "ref");
          var Z = "" + m;
          if (a !== null && a.ref !== null && typeof a.ref == "function" && a.ref._stringRef === Z)
            return a.ref;
          var $ = function(oe) {
            var ye = z.refs;
            ye === sM && (ye = z.refs = {}), oe === null ? delete ye[Z] : ye[Z] = oe;
          };
          return $._stringRef = Z, $;
        } else {
          if (typeof m != "string")
            throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
          if (!d._owner)
            throw new Error("Element ref was specified as a string (" + m + `) but no owner was set. This could happen for one of the following reasons:
1. You may be adding a ref to a function component
2. You may be adding a ref to a component that was not created inside a component's render method
3. You have multiple copies of React loaded
See https://reactjs.org/link/refs-must-have-owner for more information.`);
        }
      }
      return m;
    }
    function Em(i, a) {
      var d = Object.prototype.toString.call(a);
      throw new Error("Objects are not valid as a React child (found: " + (d === "[object Object]" ? "object with keys {" + Object.keys(a).join(", ") + "}" : d) + "). If you meant to render a collection of children, use an array instead.");
    }
    function Tm(i) {
      {
        var a = G(i) || "Component";
        if (jy[a])
          return;
        jy[a] = !0, h("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
      }
    }
    function MM(i) {
      var a = i._payload, d = i._init;
      return d(a);
    }
    function EM(i) {
      function a(fe, Ce) {
        if (i) {
          var le = fe.deletions;
          le === null ? (fe.deletions = [Ce], fe.flags |= an) : le.push(Ce);
        }
      }
      function d(fe, Ce) {
        if (!i)
          return null;
        for (var le = Ce; le !== null; )
          a(fe, le), le = le.sibling;
        return null;
      }
      function m(fe, Ce) {
        for (var le = /* @__PURE__ */ new Map(), je = Ce; je !== null; )
          je.key !== null ? le.set(je.key, je) : le.set(je.index, je), je = je.sibling;
        return le;
      }
      function y(fe, Ce) {
        var le = Hu(fe, Ce);
        return le.index = 0, le.sibling = null, le;
      }
      function w(fe, Ce, le) {
        if (fe.index = le, !i)
          return fe.flags |= Sc, Ce;
        var je = fe.alternate;
        if (je !== null) {
          var Tt = je.index;
          return Tt < Ce ? (fe.flags |= Ke, Ce) : Tt;
        } else
          return fe.flags |= Ke, Ce;
      }
      function P(fe) {
        return i && fe.alternate === null && (fe.flags |= Ke), fe;
      }
      function I(fe, Ce, le, je) {
        if (Ce === null || Ce.tag !== J) {
          var Tt = g_(le, fe.mode, je);
          return Tt.return = fe, Tt;
        } else {
          var dt = y(Ce, le);
          return dt.return = fe, dt;
        }
      }
      function z(fe, Ce, le, je) {
        var Tt = le.type;
        if (Tt === He)
          return $(fe, Ce, le.props.children, je, le.key);
        if (Ce !== null && (Ce.elementType === Tt || // Keep this check inline so it only runs on the false path:
        S1(Ce, le) || // Lazy types should reconcile their resolved type.
        // We need to do this after the Hot Reloading check above,
        // because hot reloading has different semantics than prod because
        // it doesn't resuspend. So we can't let the call below suspend.
        typeof Tt == "object" && Tt !== null && Tt.$$typeof === st && MM(Tt) === Ce.type)) {
          var dt = y(Ce, le.props);
          return dt.ref = vh(fe, Ce, le), dt.return = fe, dt._debugSource = le._source, dt._debugOwner = le._owner, dt;
        }
        var rn = v_(le, fe.mode, je);
        return rn.ref = vh(fe, Ce, le), rn.return = fe, rn;
      }
      function Z(fe, Ce, le, je) {
        if (Ce === null || Ce.tag !== X || Ce.stateNode.containerInfo !== le.containerInfo || Ce.stateNode.implementation !== le.implementation) {
          var Tt = y_(le, fe.mode, je);
          return Tt.return = fe, Tt;
        } else {
          var dt = y(Ce, le.children || []);
          return dt.return = fe, dt;
        }
      }
      function $(fe, Ce, le, je, Tt) {
        if (Ce === null || Ce.tag !== ae) {
          var dt = Dl(le, fe.mode, je, Tt);
          return dt.return = fe, dt;
        } else {
          var rn = y(Ce, le);
          return rn.return = fe, rn;
        }
      }
      function oe(fe, Ce, le) {
        if (typeof Ce == "string" && Ce !== "" || typeof Ce == "number") {
          var je = g_("" + Ce, fe.mode, le);
          return je.return = fe, je;
        }
        if (typeof Ce == "object" && Ce !== null) {
          switch (Ce.$$typeof) {
            case Re: {
              var Tt = v_(Ce, fe.mode, le);
              return Tt.ref = vh(fe, null, Ce), Tt.return = fe, Tt;
            }
            case Se: {
              var dt = y_(Ce, fe.mode, le);
              return dt.return = fe, dt;
            }
            case st: {
              var rn = Ce._payload, En = Ce._init;
              return oe(fe, En(rn), le);
            }
          }
          if (Sn(Ce) || Xe(Ce)) {
            var zn = Dl(Ce, fe.mode, le, null);
            return zn.return = fe, zn;
          }
          Em(fe, Ce);
        }
        return typeof Ce == "function" && Tm(fe), null;
      }
      function ye(fe, Ce, le, je) {
        var Tt = Ce !== null ? Ce.key : null;
        if (typeof le == "string" && le !== "" || typeof le == "number")
          return Tt !== null ? null : I(fe, Ce, "" + le, je);
        if (typeof le == "object" && le !== null) {
          switch (le.$$typeof) {
            case Re:
              return le.key === Tt ? z(fe, Ce, le, je) : null;
            case Se:
              return le.key === Tt ? Z(fe, Ce, le, je) : null;
            case st: {
              var dt = le._payload, rn = le._init;
              return ye(fe, Ce, rn(dt), je);
            }
          }
          if (Sn(le) || Xe(le))
            return Tt !== null ? null : $(fe, Ce, le, je, null);
          Em(fe, le);
        }
        return typeof le == "function" && Tm(fe), null;
      }
      function we(fe, Ce, le, je, Tt) {
        if (typeof je == "string" && je !== "" || typeof je == "number") {
          var dt = fe.get(le) || null;
          return I(Ce, dt, "" + je, Tt);
        }
        if (typeof je == "object" && je !== null) {
          switch (je.$$typeof) {
            case Re: {
              var rn = fe.get(je.key === null ? le : je.key) || null;
              return z(Ce, rn, je, Tt);
            }
            case Se: {
              var En = fe.get(je.key === null ? le : je.key) || null;
              return Z(Ce, En, je, Tt);
            }
            case st: {
              var zn = je._payload, Tn = je._init;
              return we(fe, Ce, le, Tn(zn), Tt);
            }
          }
          if (Sn(je) || Xe(je)) {
            var ni = fe.get(le) || null;
            return $(Ce, ni, je, Tt, null);
          }
          Em(Ce, je);
        }
        return typeof je == "function" && Tm(Ce), null;
      }
      function ze(fe, Ce, le) {
        {
          if (typeof fe != "object" || fe === null)
            return Ce;
          switch (fe.$$typeof) {
            case Re:
            case Se:
              SM(fe, le);
              var je = fe.key;
              if (typeof je != "string")
                break;
              if (Ce === null) {
                Ce = /* @__PURE__ */ new Set(), Ce.add(je);
                break;
              }
              if (!Ce.has(je)) {
                Ce.add(je);
                break;
              }
              h("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", je);
              break;
            case st: {
              var Tt = fe._payload, dt = fe._init;
              ze(dt(Tt), Ce, le);
              break;
            }
          }
        }
        return Ce;
      }
      function We(fe, Ce, le, je) {
        for (var Tt = null, dt = 0; dt < le.length; dt++) {
          var rn = le[dt];
          Tt = ze(rn, Tt, fe);
        }
        for (var En = null, zn = null, Tn = Ce, ni = 0, mn = 0, nn = null; Tn !== null && mn < le.length; mn++) {
          Tn.index > mn ? (nn = Tn, Tn = null) : nn = Tn.sibling;
          var yi = ye(fe, Tn, le[mn], je);
          if (yi === null) {
            Tn === null && (Tn = nn);
            break;
          }
          i && Tn && yi.alternate === null && a(fe, Tn), ni = w(yi, ni, mn), zn === null ? En = yi : zn.sibling = yi, zn = yi, Tn = nn;
        }
        if (mn === le.length) {
          if (d(fe, Tn), cr()) {
            var ii = mn;
            Pu(fe, ii);
          }
          return En;
        }
        if (Tn === null) {
          for (; mn < le.length; mn++) {
            var Wa = oe(fe, le[mn], je);
            Wa !== null && (ni = w(Wa, ni, mn), zn === null ? En = Wa : zn.sibling = Wa, zn = Wa);
          }
          if (cr()) {
            var nr = mn;
            Pu(fe, nr);
          }
          return En;
        }
        for (var da = m(fe, Tn); mn < le.length; mn++) {
          var ha = we(da, fe, mn, le[mn], je);
          ha !== null && (i && ha.alternate !== null && da.delete(ha.key === null ? mn : ha.key), ni = w(ha, ni, mn), zn === null ? En = ha : zn.sibling = ha, zn = ha);
        }
        if (i && da.forEach(function(Lf) {
          return a(fe, Lf);
        }), cr()) {
          var Vs = mn;
          Pu(fe, Vs);
        }
        return En;
      }
      function Rt(fe, Ce, le, je) {
        var Tt = Xe(le);
        if (typeof Tt != "function")
          throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
        {
          typeof Symbol == "function" && // $FlowFixMe Flow doesn't know about toStringTag
          le[Symbol.toStringTag] === "Generator" && (Xy || h("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), Xy = !0), le.entries === Tt && (Wy || h("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), Wy = !0);
          var dt = Tt.call(le);
          if (dt)
            for (var rn = null, En = dt.next(); !En.done; En = dt.next()) {
              var zn = En.value;
              rn = ze(zn, rn, fe);
            }
        }
        var Tn = Tt.call(le);
        if (Tn == null)
          throw new Error("An iterable object provided no iterator.");
        for (var ni = null, mn = null, nn = Ce, yi = 0, ii = 0, Wa = null, nr = Tn.next(); nn !== null && !nr.done; ii++, nr = Tn.next()) {
          nn.index > ii ? (Wa = nn, nn = null) : Wa = nn.sibling;
          var da = ye(fe, nn, nr.value, je);
          if (da === null) {
            nn === null && (nn = Wa);
            break;
          }
          i && nn && da.alternate === null && a(fe, nn), yi = w(da, yi, ii), mn === null ? ni = da : mn.sibling = da, mn = da, nn = Wa;
        }
        if (nr.done) {
          if (d(fe, nn), cr()) {
            var ha = ii;
            Pu(fe, ha);
          }
          return ni;
        }
        if (nn === null) {
          for (; !nr.done; ii++, nr = Tn.next()) {
            var Vs = oe(fe, nr.value, je);
            Vs !== null && (yi = w(Vs, yi, ii), mn === null ? ni = Vs : mn.sibling = Vs, mn = Vs);
          }
          if (cr()) {
            var Lf = ii;
            Pu(fe, Lf);
          }
          return ni;
        }
        for (var Pf = m(fe, nn); !nr.done; ii++, nr = Tn.next()) {
          var pa = we(Pf, fe, ii, nr.value, je);
          pa !== null && (i && pa.alternate !== null && Pf.delete(pa.key === null ? ii : pa.key), yi = w(pa, yi, ii), mn === null ? ni = pa : mn.sibling = pa, mn = pa);
        }
        if (i && Pf.forEach(function(E_) {
          return a(fe, E_);
        }), cr()) {
          var Vu = ii;
          Pu(fe, Vu);
        }
        return ni;
      }
      function Xt(fe, Ce, le, je) {
        if (Ce !== null && Ce.tag === J) {
          d(fe, Ce.sibling);
          var Tt = y(Ce, le);
          return Tt.return = fe, Tt;
        }
        d(fe, Ce);
        var dt = g_(le, fe.mode, je);
        return dt.return = fe, dt;
      }
      function It(fe, Ce, le, je) {
        for (var Tt = le.key, dt = Ce; dt !== null; ) {
          if (dt.key === Tt) {
            var rn = le.type;
            if (rn === He) {
              if (dt.tag === ae) {
                d(fe, dt.sibling);
                var En = y(dt, le.props.children);
                return En.return = fe, En._debugSource = le._source, En._debugOwner = le._owner, En;
              }
            } else if (dt.elementType === rn || // Keep this check inline so it only runs on the false path:
            S1(dt, le) || // Lazy types should reconcile their resolved type.
            // We need to do this after the Hot Reloading check above,
            // because hot reloading has different semantics than prod because
            // it doesn't resuspend. So we can't let the call below suspend.
            typeof rn == "object" && rn !== null && rn.$$typeof === st && MM(rn) === dt.type) {
              d(fe, dt.sibling);
              var zn = y(dt, le.props);
              return zn.ref = vh(fe, dt, le), zn.return = fe, zn._debugSource = le._source, zn._debugOwner = le._owner, zn;
            }
            d(fe, dt);
            break;
          } else
            a(fe, dt);
          dt = dt.sibling;
        }
        if (le.type === He) {
          var Tn = Dl(le.props.children, fe.mode, je, le.key);
          return Tn.return = fe, Tn;
        } else {
          var ni = v_(le, fe.mode, je);
          return ni.ref = vh(fe, Ce, le), ni.return = fe, ni;
        }
      }
      function Gn(fe, Ce, le, je) {
        for (var Tt = le.key, dt = Ce; dt !== null; ) {
          if (dt.key === Tt)
            if (dt.tag === X && dt.stateNode.containerInfo === le.containerInfo && dt.stateNode.implementation === le.implementation) {
              d(fe, dt.sibling);
              var rn = y(dt, le.children || []);
              return rn.return = fe, rn;
            } else {
              d(fe, dt);
              break;
            }
          else
            a(fe, dt);
          dt = dt.sibling;
        }
        var En = y_(le, fe.mode, je);
        return En.return = fe, En;
      }
      function Wn(fe, Ce, le, je) {
        var Tt = typeof le == "object" && le !== null && le.type === He && le.key === null;
        if (Tt && (le = le.props.children), typeof le == "object" && le !== null) {
          switch (le.$$typeof) {
            case Re:
              return P(It(fe, Ce, le, je));
            case Se:
              return P(Gn(fe, Ce, le, je));
            case st: {
              var dt = le._payload, rn = le._init;
              return Wn(fe, Ce, rn(dt), je);
            }
          }
          if (Sn(le))
            return We(fe, Ce, le, je);
          if (Xe(le))
            return Rt(fe, Ce, le, je);
          Em(fe, le);
        }
        return typeof le == "string" && le !== "" || typeof le == "number" ? P(Xt(fe, Ce, "" + le, je)) : (typeof le == "function" && Tm(fe), d(fe, Ce));
      }
      return Wn;
    }
    var mf = EM(!0), TM = EM(!1);
    function KR(i, a) {
      if (i !== null && a.child !== i.child)
        throw new Error("Resuming work not yet implemented.");
      if (a.child !== null) {
        var d = a.child, m = Hu(d, d.pendingProps);
        for (a.child = m, m.return = a; d.sibling !== null; )
          d = d.sibling, m = m.sibling = Hu(d, d.pendingProps), m.return = a;
        m.sibling = null;
      }
    }
    function $R(i, a) {
      for (var d = i.child; d !== null; )
        kL(d, a), d = d.sibling;
    }
    var gh = {}, Tl = Aa(gh), yh = Aa(gh), bm = Aa(gh);
    function wm(i) {
      if (i === gh)
        throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
      return i;
    }
    function Zy() {
      var i = wm(bm.current);
      return i;
    }
    function Jy(i, a) {
      wn(bm, a, i), wn(yh, i, i), wn(Tl, gh, i);
      var d = Sa(a);
      di(Tl, i), wn(Tl, d, i);
    }
    function vf(i) {
      di(Tl, i), di(yh, i), di(bm, i);
    }
    function _h() {
      var i = wm(Tl.current);
      return i;
    }
    function bM(i) {
      var a = wm(bm.current), d = wm(Tl.current), m = hn(d, i.type, a);
      d !== m && (wn(yh, i, i), wn(Tl, m, i));
    }
    function Qy(i) {
      yh.current === i && (di(Tl, i), di(yh, i));
    }
    var eC = 0, wM = 1, AM = 1, xh = 2, ss = Aa(eC);
    function Ky(i, a) {
      return (i & a) !== 0;
    }
    function gf(i) {
      return i & wM;
    }
    function $y(i, a) {
      return i & wM | a;
    }
    function tC(i, a) {
      return i | a;
    }
    function bl(i, a) {
      wn(ss, a, i);
    }
    function yf(i) {
      di(ss, i);
    }
    function nC(i, a) {
      var d = i.memoizedState;
      return d !== null ? d.dehydrated !== null : (i.memoizedProps, !0);
    }
    function Am(i) {
      for (var a = i; a !== null; ) {
        if (a.tag === ne) {
          var d = a.memoizedState;
          if (d !== null) {
            var m = d.dehydrated;
            if (m === null || na(m) || wa(m))
              return a;
          }
        } else if (a.tag === Ye && // revealOrder undefined can't be trusted because it don't
        // keep track of whether it suspended or not.
        a.memoizedProps.revealOrder !== void 0) {
          var y = (a.flags & _t) !== de;
          if (y)
            return a;
        } else if (a.child !== null) {
          a.child.return = a, a = a.child;
          continue;
        }
        if (a === i)
          return null;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === i)
            return null;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
      return null;
    }
    var Is = (
      /*   */
      0
    ), $n = (
      /* */
      1
    ), wl = (
      /*  */
      2
    ), gi = (
      /*    */
      4
    ), Ki = (
      /*   */
      8
    ), e0 = [];
    function t0() {
      for (var i = 0; i < e0.length; i++) {
        var a = e0[i];
        Ss ? a._workInProgressVersionPrimary = null : a._workInProgressVersionSecondary = null;
      }
      e0.length = 0;
    }
    function iC(i, a) {
      var d = a._getVersion, m = d(a._source);
      i.mutableSourceEagerHydrationData == null ? i.mutableSourceEagerHydrationData = [a, m] : i.mutableSourceEagerHydrationData.push(a, m);
    }
    var ct = o.ReactCurrentDispatcher, qr = o.ReactCurrentBatchConfig, n0, _f;
    n0 = /* @__PURE__ */ new Set();
    var xf = Ie, Un = null, fr = null, Li = null, Rm = !1, Sh = !1, Mh = 0, rC = 0, aC = 25, Le = null, Ba = null, Al = -1, i0 = !1;
    function _n() {
      {
        var i = Le;
        Ba === null ? Ba = [i] : Ba.push(i);
      }
    }
    function $e() {
      {
        var i = Le;
        Ba !== null && (Al++, Ba[Al] !== i && sC(i));
      }
    }
    function Sf(i) {
      i != null && !Sn(i) && h("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", Le, typeof i);
    }
    function sC(i) {
      {
        var a = G(Un);
        if (!n0.has(a) && (n0.add(a), Ba !== null)) {
          for (var d = "", m = 30, y = 0; y <= Al; y++) {
            for (var w = Ba[y], P = y === Al ? i : w, I = y + 1 + ". " + w; I.length < m; )
              I += " ";
            I += P + `
`, d += I;
          }
          h(`React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks

   Previous render            Next render
   ------------------------------------------------------
%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
`, a, d);
        }
      }
    }
    function dr() {
      throw new Error(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`);
    }
    function r0(i, a) {
      if (i0)
        return !1;
      if (a === null)
        return h("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", Le), !1;
      i.length !== a.length && h(`The final argument passed to %s changed size between renders. The order and size of this array must remain constant.

Previous: %s
Incoming: %s`, Le, "[" + a.join(", ") + "]", "[" + i.join(", ") + "]");
      for (var d = 0; d < a.length && d < i.length; d++)
        if (!br(i[d], a[d]))
          return !1;
      return !0;
    }
    function Mf(i, a, d, m, y, w) {
      xf = w, Un = a, Ba = i !== null ? i._debugHookTypes : null, Al = -1, i0 = i !== null && i.type !== a.type, a.memoizedState = null, a.updateQueue = null, a.lanes = Ie, i !== null && i.memoizedState !== null ? ct.current = ZM : Ba !== null ? ct.current = jM : ct.current = YM;
      var P = d(m, y);
      if (Sh) {
        var I = 0;
        do {
          if (Sh = !1, Mh = 0, I >= aC)
            throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
          I += 1, i0 = !1, fr = null, Li = null, a.updateQueue = null, Al = -1, ct.current = JM, P = d(m, y);
        } while (Sh);
      }
      ct.current = Vm, a._debugHookTypes = Ba;
      var z = fr !== null && fr.next !== null;
      if (xf = Ie, Un = null, fr = null, Li = null, Le = null, Ba = null, Al = -1, i !== null && (i.flags & Ct) !== (a.flags & Ct) && // Disable this warning in legacy mode, because legacy Suspense is weird
      // and creates false positives. To make this work in legacy mode, we'd
      // need to mark fibers that commit in an incomplete state, somehow. For
      // now I'll disable the warning that most of the bugs that would trigger
      // it are either exclusive to concurrent mode or exist in both.
      (i.mode & Mn) !== Vt && h("Internal React error: Expected static flag was missing. Please notify the React team."), Rm = !1, z)
        throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
      return P;
    }
    function Ef() {
      var i = Mh !== 0;
      return Mh = 0, i;
    }
    function RM(i, a, d) {
      a.updateQueue = i.updateQueue, (a.mode & Hr) !== Vt ? a.flags &= ~(he | pe | rr | Ze) : a.flags &= ~(rr | Ze), i.lanes = so(i.lanes, d);
    }
    function CM() {
      if (ct.current = Vm, Rm) {
        for (var i = Un.memoizedState; i !== null; ) {
          var a = i.queue;
          a !== null && (a.pending = null), i = i.next;
        }
        Rm = !1;
      }
      xf = Ie, Un = null, fr = null, Li = null, Ba = null, Al = -1, Le = null, VM = !1, Sh = !1, Mh = 0;
    }
    function xo() {
      var i = {
        memoizedState: null,
        baseState: null,
        baseQueue: null,
        queue: null,
        next: null
      };
      return Li === null ? Un.memoizedState = Li = i : Li = Li.next = i, Li;
    }
    function Os() {
      var i;
      if (fr === null) {
        var a = Un.alternate;
        a !== null ? i = a.memoizedState : i = null;
      } else
        i = fr.next;
      var d;
      if (Li === null ? d = Un.memoizedState : d = Li.next, d !== null)
        Li = d, d = Li.next, fr = i;
      else {
        if (i === null)
          throw new Error("Rendered more hooks than during the previous render.");
        fr = i;
        var m = {
          memoizedState: fr.memoizedState,
          baseState: fr.baseState,
          baseQueue: fr.baseQueue,
          queue: fr.queue,
          next: null
        };
        Li === null ? Un.memoizedState = Li = m : Li = Li.next = m;
      }
      return Li;
    }
    function LM() {
      return {
        lastEffect: null,
        stores: null
      };
    }
    function a0(i, a) {
      return typeof a == "function" ? a(i) : a;
    }
    function s0(i, a, d) {
      var m = xo(), y;
      d !== void 0 ? y = d(a) : y = a, m.memoizedState = m.baseState = y;
      var w = {
        pending: null,
        interleaved: null,
        lanes: Ie,
        dispatch: null,
        lastRenderedReducer: i,
        lastRenderedState: y
      };
      m.queue = w;
      var P = w.dispatch = cC.bind(null, Un, w);
      return [m.memoizedState, P];
    }
    function o0(i, a, d) {
      var m = Os(), y = m.queue;
      if (y === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      y.lastRenderedReducer = i;
      var w = fr, P = w.baseQueue, I = y.pending;
      if (I !== null) {
        if (P !== null) {
          var z = P.next, Z = I.next;
          P.next = Z, I.next = z;
        }
        w.baseQueue !== P && h("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."), w.baseQueue = P = I, y.pending = null;
      }
      if (P !== null) {
        var $ = P.next, oe = w.baseState, ye = null, we = null, ze = null, We = $;
        do {
          var Rt = We.lane;
          if (ul(xf, Rt)) {
            if (ze !== null) {
              var It = {
                // This update is going to be committed so we never want uncommit
                // it. Using NoLane works because 0 is a subset of all bitmasks, so
                // this will never be skipped by the check above.
                lane: pi,
                action: We.action,
                hasEagerState: We.hasEagerState,
                eagerState: We.eagerState,
                next: null
              };
              ze = ze.next = It;
            }
            if (We.hasEagerState)
              oe = We.eagerState;
            else {
              var Gn = We.action;
              oe = i(oe, Gn);
            }
          } else {
            var Xt = {
              lane: Rt,
              action: We.action,
              hasEagerState: We.hasEagerState,
              eagerState: We.eagerState,
              next: null
            };
            ze === null ? (we = ze = Xt, ye = oe) : ze = ze.next = Xt, Un.lanes = Gt(Un.lanes, Rt), Ev(Rt);
          }
          We = We.next;
        } while (We !== null && We !== $);
        ze === null ? ye = oe : ze.next = we, br(oe, m.memoizedState) || ev(), m.memoizedState = oe, m.baseState = ye, m.baseQueue = ze, y.lastRenderedState = oe;
      }
      var Wn = y.interleaved;
      if (Wn !== null) {
        var fe = Wn;
        do {
          var Ce = fe.lane;
          Un.lanes = Gt(Un.lanes, Ce), Ev(Ce), fe = fe.next;
        } while (fe !== Wn);
      } else
        P === null && (y.lanes = Ie);
      var le = y.dispatch;
      return [m.memoizedState, le];
    }
    function l0(i, a, d) {
      var m = Os(), y = m.queue;
      if (y === null)
        throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
      y.lastRenderedReducer = i;
      var w = y.dispatch, P = y.pending, I = m.memoizedState;
      if (P !== null) {
        y.pending = null;
        var z = P.next, Z = z;
        do {
          var $ = Z.action;
          I = i(I, $), Z = Z.next;
        } while (Z !== z);
        br(I, m.memoizedState) || ev(), m.memoizedState = I, m.baseQueue === null && (m.baseState = I), y.lastRenderedState = I;
      }
      return [I, w];
    }
    function fB(i, a, d) {
    }
    function dB(i, a, d) {
    }
    function u0(i, a, d) {
      var m = Un, y = xo(), w, P = cr();
      if (P) {
        if (d === void 0)
          throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
        w = d(), _f || w !== d() && (h("The result of getServerSnapshot should be cached to avoid an infinite loop"), _f = !0);
      } else {
        if (w = a(), !_f) {
          var I = a();
          br(w, I) || (h("The result of getSnapshot should be cached to avoid an infinite loop"), _f = !0);
        }
        var z = _v();
        if (z === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        ao(z, xf) || PM(m, a, w);
      }
      y.memoizedState = w;
      var Z = {
        value: w,
        getSnapshot: a
      };
      return y.queue = Z, wh(NM.bind(null, m, Z, i), [i]), m.flags |= rr, Th($n | Ki, DM.bind(null, m, Z, w, a), void 0, null), w;
    }
    function Cm(i, a, d) {
      var m = Un, y = Os(), w = a();
      if (!_f) {
        var P = a();
        br(w, P) || (h("The result of getSnapshot should be cached to avoid an infinite loop"), _f = !0);
      }
      var I = y.memoizedState, z = !br(I, w);
      z && (y.memoizedState = w, ev());
      var Z = y.queue;
      if (Uu(NM.bind(null, m, Z, i), [i]), Z.getSnapshot !== a || z || // Check if the susbcribe function changed. We can save some memory by
      // checking whether we scheduled a subscription effect above.
      Li !== null && Li.memoizedState.tag & $n) {
        m.flags |= rr, Th($n | Ki, DM.bind(null, m, Z, w, a), void 0, null);
        var $ = _v();
        if ($ === null)
          throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
        ao($, xf) || PM(m, a, w);
      }
      return w;
    }
    function PM(i, a, d) {
      i.flags |= Zs;
      var m = {
        getSnapshot: a,
        value: d
      }, y = Un.updateQueue;
      if (y === null)
        y = LM(), Un.updateQueue = y, y.stores = [m];
      else {
        var w = y.stores;
        w === null ? y.stores = [m] : w.push(m);
      }
    }
    function DM(i, a, d, m) {
      a.value = d, a.getSnapshot = m, UM(a) && IM(i);
    }
    function NM(i, a, d) {
      var m = function() {
        UM(a) && IM(i);
      };
      return d(m);
    }
    function UM(i) {
      var a = i.getSnapshot, d = i.value;
      try {
        var m = a();
        return !br(d, m);
      } catch {
        return !0;
      }
    }
    function IM(i) {
      Ni(i, tn, Nn);
    }
    function Eh(i) {
      var a = xo();
      typeof i == "function" && (i = i()), a.memoizedState = a.baseState = i;
      var d = {
        pending: null,
        interleaved: null,
        lanes: Ie,
        dispatch: null,
        lastRenderedReducer: a0,
        lastRenderedState: i
      };
      a.queue = d;
      var m = d.dispatch = fC.bind(null, Un, d);
      return [a.memoizedState, m];
    }
    function Lm(i) {
      return o0(a0);
    }
    function Pm(i) {
      return l0(a0);
    }
    function Th(i, a, d, m) {
      var y = {
        tag: i,
        create: a,
        destroy: d,
        deps: m,
        // Circular
        next: null
      }, w = Un.updateQueue;
      if (w === null)
        w = LM(), Un.updateQueue = w, w.lastEffect = y.next = y;
      else {
        var P = w.lastEffect;
        if (P === null)
          w.lastEffect = y.next = y;
        else {
          var I = P.next;
          P.next = y, y.next = I, w.lastEffect = y;
        }
      }
      return y;
    }
    function c0(i) {
      var a = xo();
      {
        var d = {
          current: i
        };
        return a.memoizedState = d, d;
      }
    }
    function Dm(i) {
      var a = Os();
      return a.memoizedState;
    }
    function bh(i, a, d, m) {
      var y = xo(), w = m === void 0 ? null : m;
      Un.flags |= i, y.memoizedState = Th($n | a, d, void 0, w);
    }
    function Nm(i, a, d, m) {
      var y = Os(), w = m === void 0 ? null : m, P = void 0;
      if (fr !== null) {
        var I = fr.memoizedState;
        if (P = I.destroy, w !== null) {
          var z = I.deps;
          if (r0(w, z)) {
            y.memoizedState = Th(a, d, P, w);
            return;
          }
        }
      }
      Un.flags |= i, y.memoizedState = Th($n | a, d, P, w);
    }
    function wh(i, a) {
      return (Un.mode & Hr) !== Vt ? bh(he | rr | me, Ki, i, a) : bh(rr | me, Ki, i, a);
    }
    function Uu(i, a) {
      return Nm(rr, Ki, i, a);
    }
    function f0(i, a) {
      return bh(Ze, wl, i, a);
    }
    function Um(i, a) {
      return Nm(Ze, wl, i, a);
    }
    function d0(i, a) {
      var d = Ze;
      return d |= re, (Un.mode & Hr) !== Vt && (d |= pe), bh(d, gi, i, a);
    }
    function Im(i, a) {
      return Nm(Ze, gi, i, a);
    }
    function OM(i, a) {
      if (typeof a == "function") {
        var d = a, m = i();
        return d(m), function() {
          d(null);
        };
      } else if (a != null) {
        var y = a;
        y.hasOwnProperty("current") || h("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(y).join(", ") + "}");
        var w = i();
        return y.current = w, function() {
          y.current = null;
        };
      }
    }
    function h0(i, a, d) {
      typeof a != "function" && h("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", a !== null ? typeof a : "null");
      var m = d != null ? d.concat([i]) : null, y = Ze;
      return y |= re, (Un.mode & Hr) !== Vt && (y |= pe), bh(y, gi, OM.bind(null, a, i), m);
    }
    function Om(i, a, d) {
      typeof a != "function" && h("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", a !== null ? typeof a : "null");
      var m = d != null ? d.concat([i]) : null;
      return Nm(Ze, gi, OM.bind(null, a, i), m);
    }
    function oC(i, a) {
    }
    var Fm = oC;
    function p0(i, a) {
      var d = xo(), m = a === void 0 ? null : a;
      return d.memoizedState = [i, m], i;
    }
    function zm(i, a) {
      var d = Os(), m = a === void 0 ? null : a, y = d.memoizedState;
      if (y !== null && m !== null) {
        var w = y[1];
        if (r0(m, w))
          return y[0];
      }
      return d.memoizedState = [i, m], i;
    }
    function m0(i, a) {
      var d = xo(), m = a === void 0 ? null : a, y = i();
      return d.memoizedState = [y, m], y;
    }
    function Bm(i, a) {
      var d = Os(), m = a === void 0 ? null : a, y = d.memoizedState;
      if (y !== null && m !== null) {
        var w = y[1];
        if (r0(m, w))
          return y[0];
      }
      var P = i();
      return d.memoizedState = [P, m], P;
    }
    function v0(i) {
      var a = Eh(i), d = a[0], m = a[1];
      return wh(function() {
        var y = qr.transition;
        qr.transition = {};
        try {
          m(i);
        } finally {
          qr.transition = y;
        }
      }, [i]), d;
    }
    function FM(i) {
      var a = Lm(), d = a[0], m = a[1];
      return Uu(function() {
        var y = qr.transition;
        qr.transition = {};
        try {
          m(i);
        } finally {
          qr.transition = y;
        }
      }, [i]), d;
    }
    function zM(i) {
      var a = Pm(), d = a[0], m = a[1];
      return Uu(function() {
        var y = qr.transition;
        qr.transition = {};
        try {
          m(i);
        } finally {
          qr.transition = y;
        }
      }, [i]), d;
    }
    function lC(i, a, d) {
      var m = Er();
      mi(rf(m, fl)), i(!0);
      var y = qr.transition;
      qr.transition = {};
      var w = qr.transition;
      qr.transition._updatedFibers = /* @__PURE__ */ new Set();
      try {
        i(!1), a();
      } finally {
        if (mi(m), qr.transition = y, y === null && w._updatedFibers) {
          var P = w._updatedFibers.size;
          P > 10 && p("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."), w._updatedFibers.clear();
        }
      }
    }
    function g0() {
      var i = Eh(!1), a = i[0], d = i[1], m = lC.bind(null, d), y = xo();
      return y.memoizedState = m, [a, m];
    }
    function BM() {
      var i = Lm(), a = i[0], d = Os(), m = d.memoizedState;
      return [a, m];
    }
    function HM() {
      var i = Pm(), a = i[0], d = Os(), m = d.memoizedState;
      return [a, m];
    }
    var VM = !1;
    function uC() {
      return VM;
    }
    function y0() {
      var i = xo(), a = _v(), d = a.identifierPrefix, m;
      if (cr()) {
        var y = BR();
        m = ":" + d + "R" + y;
        var w = Mh++;
        w > 0 && (m += "H" + w.toString(32)), m += ":";
      } else {
        var P = rC++;
        m = ":" + d + "r" + P.toString(32) + ":";
      }
      return i.memoizedState = m, m;
    }
    function Hm() {
      var i = Os(), a = i.memoizedState;
      return a;
    }
    function cC(i, a, d) {
      typeof arguments[3] == "function" && h("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Ll(i), y = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (kM(i))
        GM(a, y);
      else {
        WM(i, a, y);
        var w = Rr(), P = Ni(i, m, w);
        P !== null && XM(P, a, m);
      }
      qM(i, m);
    }
    function fC(i, a, d) {
      typeof arguments[3] == "function" && h("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
      var m = Ll(i), y = {
        lane: m,
        action: d,
        hasEagerState: !1,
        eagerState: null,
        next: null
      };
      if (kM(i))
        GM(a, y);
      else {
        WM(i, a, y);
        var w = i.alternate;
        if (i.lanes === Ie && (w === null || w.lanes === Ie)) {
          var P = a.lastRenderedReducer;
          if (P !== null) {
            var I;
            I = ct.current, ct.current = os;
            try {
              var z = a.lastRenderedState, Z = P(z, d);
              if (y.hasEagerState = !0, y.eagerState = Z, br(Z, z))
                return;
            } catch {
            } finally {
              ct.current = I;
            }
          }
        }
        var $ = Rr(), oe = Ni(i, m, $);
        oe !== null && XM(oe, a, m);
      }
      qM(i, m);
    }
    function kM(i) {
      var a = i.alternate;
      return i === Un || a !== null && a === Un;
    }
    function GM(i, a) {
      Sh = Rm = !0;
      var d = i.pending;
      d === null ? a.next = a : (a.next = d.next, d.next = a), i.pending = a;
    }
    function WM(i, a, d, m) {
      if (r1(i)) {
        var y = a.interleaved;
        y === null ? (d.next = d, Lt(a)) : (d.next = y.next, y.next = d), a.interleaved = d;
      } else {
        var w = a.pending;
        w === null ? d.next = d : (d.next = w.next, w.next = d), a.pending = d;
      }
    }
    function XM(i, a, d) {
      if (ef(d)) {
        var m = a.lanes;
        m = As(m, i.pendingLanes);
        var y = Gt(m, d);
        a.lanes = y, uo(i, y);
      }
    }
    function qM(i, a, d) {
      gl(i, a);
    }
    var Vm = {
      readContext: Qe,
      useCallback: dr,
      useContext: dr,
      useEffect: dr,
      useImperativeHandle: dr,
      useInsertionEffect: dr,
      useLayoutEffect: dr,
      useMemo: dr,
      useReducer: dr,
      useRef: dr,
      useState: dr,
      useDebugValue: dr,
      useDeferredValue: dr,
      useTransition: dr,
      useMutableSource: dr,
      useSyncExternalStore: dr,
      useId: dr,
      unstable_isNewReconciler: R
    }, YM = null, jM = null, ZM = null, JM = null, Fs = null, os = null, km = null;
    {
      var _0 = function() {
        h("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      }, kt = function() {
        h("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      };
      YM = {
        readContext: function(i) {
          return Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", _n(), Sf(a), p0(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", _n(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", _n(), Sf(a), wh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", _n(), Sf(d), h0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", _n(), Sf(a), f0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", _n(), Sf(a), d0(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", _n(), Sf(a);
          var d = ct.current;
          ct.current = Fs;
          try {
            return m0(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", _n();
          var m = ct.current;
          ct.current = Fs;
          try {
            return s0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", _n(), c0(i);
        },
        useState: function(i) {
          Le = "useState", _n();
          var a = ct.current;
          ct.current = Fs;
          try {
            return Eh(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", _n(), void 0;
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", _n(), v0(i);
        },
        useTransition: function() {
          return Le = "useTransition", _n(), g0();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", _n(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", _n(), u0(i, a, d);
        },
        useId: function() {
          return Le = "useId", _n(), y0();
        },
        unstable_isNewReconciler: R
      }, jM = {
        readContext: function(i) {
          return Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", $e(), p0(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", $e(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", $e(), wh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", $e(), h0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", $e(), f0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", $e(), d0(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", $e();
          var d = ct.current;
          ct.current = Fs;
          try {
            return m0(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", $e();
          var m = ct.current;
          ct.current = Fs;
          try {
            return s0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", $e(), c0(i);
        },
        useState: function(i) {
          Le = "useState", $e();
          var a = ct.current;
          ct.current = Fs;
          try {
            return Eh(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", $e(), void 0;
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", $e(), v0(i);
        },
        useTransition: function() {
          return Le = "useTransition", $e(), g0();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", $e(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", $e(), u0(i, a, d);
        },
        useId: function() {
          return Le = "useId", $e(), y0();
        },
        unstable_isNewReconciler: R
      }, ZM = {
        readContext: function(i) {
          return Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", $e(), zm(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", $e(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", $e(), Uu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", $e(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", $e(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", $e(), Im(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", $e();
          var d = ct.current;
          ct.current = os;
          try {
            return Bm(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", $e();
          var m = ct.current;
          ct.current = os;
          try {
            return o0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", $e(), Dm();
        },
        useState: function(i) {
          Le = "useState", $e();
          var a = ct.current;
          ct.current = os;
          try {
            return Lm(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", $e(), Fm();
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", $e(), FM(i);
        },
        useTransition: function() {
          return Le = "useTransition", $e(), BM();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", $e(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", $e(), Cm(i, a);
        },
        useId: function() {
          return Le = "useId", $e(), Hm();
        },
        unstable_isNewReconciler: R
      }, JM = {
        readContext: function(i) {
          return Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", $e(), zm(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", $e(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", $e(), Uu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", $e(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", $e(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", $e(), Im(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", $e();
          var d = ct.current;
          ct.current = km;
          try {
            return Bm(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", $e();
          var m = ct.current;
          ct.current = km;
          try {
            return l0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", $e(), Dm();
        },
        useState: function(i) {
          Le = "useState", $e();
          var a = ct.current;
          ct.current = km;
          try {
            return Pm(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", $e(), Fm();
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", $e(), zM(i);
        },
        useTransition: function() {
          return Le = "useTransition", $e(), HM();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", $e(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", $e(), Cm(i, a);
        },
        useId: function() {
          return Le = "useId", $e(), Hm();
        },
        unstable_isNewReconciler: R
      }, Fs = {
        readContext: function(i) {
          return _0(), Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", kt(), _n(), p0(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", kt(), _n(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", kt(), _n(), wh(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", kt(), _n(), h0(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", kt(), _n(), f0(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", kt(), _n(), d0(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", kt(), _n();
          var d = ct.current;
          ct.current = Fs;
          try {
            return m0(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", kt(), _n();
          var m = ct.current;
          ct.current = Fs;
          try {
            return s0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", kt(), _n(), c0(i);
        },
        useState: function(i) {
          Le = "useState", kt(), _n();
          var a = ct.current;
          ct.current = Fs;
          try {
            return Eh(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", kt(), _n(), void 0;
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", kt(), _n(), v0(i);
        },
        useTransition: function() {
          return Le = "useTransition", kt(), _n(), g0();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", kt(), _n(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", kt(), _n(), u0(i, a, d);
        },
        useId: function() {
          return Le = "useId", kt(), _n(), y0();
        },
        unstable_isNewReconciler: R
      }, os = {
        readContext: function(i) {
          return _0(), Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", kt(), $e(), zm(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", kt(), $e(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", kt(), $e(), Uu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", kt(), $e(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", kt(), $e(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", kt(), $e(), Im(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", kt(), $e();
          var d = ct.current;
          ct.current = os;
          try {
            return Bm(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", kt(), $e();
          var m = ct.current;
          ct.current = os;
          try {
            return o0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", kt(), $e(), Dm();
        },
        useState: function(i) {
          Le = "useState", kt(), $e();
          var a = ct.current;
          ct.current = os;
          try {
            return Lm(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", kt(), $e(), Fm();
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", kt(), $e(), FM(i);
        },
        useTransition: function() {
          return Le = "useTransition", kt(), $e(), BM();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", kt(), $e(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", kt(), $e(), Cm(i, a);
        },
        useId: function() {
          return Le = "useId", kt(), $e(), Hm();
        },
        unstable_isNewReconciler: R
      }, km = {
        readContext: function(i) {
          return _0(), Qe(i);
        },
        useCallback: function(i, a) {
          return Le = "useCallback", kt(), $e(), zm(i, a);
        },
        useContext: function(i) {
          return Le = "useContext", kt(), $e(), Qe(i);
        },
        useEffect: function(i, a) {
          return Le = "useEffect", kt(), $e(), Uu(i, a);
        },
        useImperativeHandle: function(i, a, d) {
          return Le = "useImperativeHandle", kt(), $e(), Om(i, a, d);
        },
        useInsertionEffect: function(i, a) {
          return Le = "useInsertionEffect", kt(), $e(), Um(i, a);
        },
        useLayoutEffect: function(i, a) {
          return Le = "useLayoutEffect", kt(), $e(), Im(i, a);
        },
        useMemo: function(i, a) {
          Le = "useMemo", kt(), $e();
          var d = ct.current;
          ct.current = os;
          try {
            return Bm(i, a);
          } finally {
            ct.current = d;
          }
        },
        useReducer: function(i, a, d) {
          Le = "useReducer", kt(), $e();
          var m = ct.current;
          ct.current = os;
          try {
            return l0(i, a, d);
          } finally {
            ct.current = m;
          }
        },
        useRef: function(i) {
          return Le = "useRef", kt(), $e(), Dm();
        },
        useState: function(i) {
          Le = "useState", kt(), $e();
          var a = ct.current;
          ct.current = os;
          try {
            return Pm(i);
          } finally {
            ct.current = a;
          }
        },
        useDebugValue: function(i, a) {
          return Le = "useDebugValue", kt(), $e(), Fm();
        },
        useDeferredValue: function(i) {
          return Le = "useDeferredValue", kt(), $e(), zM(i);
        },
        useTransition: function() {
          return Le = "useTransition", kt(), $e(), HM();
        },
        useMutableSource: function(i, a, d) {
          return Le = "useMutableSource", kt(), $e(), void 0;
        },
        useSyncExternalStore: function(i, a, d) {
          return Le = "useSyncExternalStore", kt(), $e(), Cm(i, a);
        },
        useId: function() {
          return Le = "useId", kt(), $e(), Hm();
        },
        unstable_isNewReconciler: R
      };
    }
    var Rl = r.unstable_now, QM = 0, Gm = -1, Ah = -1, Wm = -1, x0 = !1, Xm = !1;
    function KM() {
      return x0;
    }
    function dC() {
      Xm = !0;
    }
    function hC() {
      x0 = !1, Xm = !1;
    }
    function pC() {
      x0 = Xm, Xm = !1;
    }
    function $M() {
      return QM;
    }
    function eE() {
      QM = Rl();
    }
    function S0(i) {
      Ah = Rl(), i.actualStartTime < 0 && (i.actualStartTime = Rl());
    }
    function tE(i) {
      Ah = -1;
    }
    function qm(i, a) {
      if (Ah >= 0) {
        var d = Rl() - Ah;
        i.actualDuration += d, a && (i.selfBaseDuration = d), Ah = -1;
      }
    }
    function Ha(i) {
      if (Gm >= 0) {
        var a = Rl() - Gm;
        Gm = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case N:
              var m = d.stateNode;
              m.effectDuration += a;
              return;
            case ue:
              var y = d.stateNode;
              y.effectDuration += a;
              return;
          }
          d = d.return;
        }
      }
    }
    function M0(i) {
      if (Wm >= 0) {
        var a = Rl() - Wm;
        Wm = -1;
        for (var d = i.return; d !== null; ) {
          switch (d.tag) {
            case N:
              var m = d.stateNode;
              m !== null && (m.passiveEffectDuration += a);
              return;
            case ue:
              var y = d.stateNode;
              y !== null && (y.passiveEffectDuration += a);
              return;
          }
          d = d.return;
        }
      }
    }
    function Va() {
      Gm = Rl();
    }
    function E0() {
      Wm = Rl();
    }
    function T0(i) {
      for (var a = i.child; a; )
        i.actualDuration += a.actualDuration, a = a.sibling;
    }
    function Ym(i, a) {
      return {
        value: i,
        source: a,
        stack: vm(a)
      };
    }
    function mC(i, a) {
      return !0;
    }
    function b0(i, a) {
      try {
        var d = mC(i, a);
        if (d === !1)
          return;
        var m = a.value, y = a.source, w = a.stack, P = w !== null ? w : "";
        if (m != null && m._suppressLogging) {
          if (i.tag === k)
            return;
          console.error(m);
        }
        var I = y ? G(y) : null, z = I ? "The above error occurred in the <" + I + "> component:" : "The above error occurred in one of your React components:", Z;
        if (i.tag === N)
          Z = `Consider adding an error boundary to your tree to customize error handling behavior.
Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.`;
        else {
          var $ = G(i) || "Anonymous";
          Z = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + $ + ".");
        }
        var oe = z + `
` + P + `

` + ("" + Z);
        console.error(oe);
      } catch (ye) {
        setTimeout(function() {
          throw ye;
        });
      }
    }
    var vC = typeof WeakMap == "function" ? WeakMap : Map;
    function nE(i, a, d) {
      var m = Ut(Nn, d);
      m.tag = ce, m.payload = {
        element: null
      };
      var y = a.value;
      return m.callback = function() {
        ML(y), b0(i, a);
      }, m;
    }
    function w0(i, a, d) {
      var m = Ut(Nn, d);
      m.tag = ce;
      var y = i.type.getDerivedStateFromError;
      if (typeof y == "function") {
        var w = a.value;
        m.payload = function() {
          return y(w);
        }, m.callback = function() {
          M1(i), b0(i, a);
        };
      }
      var P = i.stateNode;
      return P !== null && typeof P.componentDidCatch == "function" && (m.callback = function() {
        M1(i), b0(i, a), typeof y != "function" && xL(this);
        var z = a.value, Z = a.stack;
        this.componentDidCatch(z, {
          componentStack: Z !== null ? Z : ""
        }), typeof y != "function" && (Zn(i.lanes, tn) || h("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", G(i) || "Unknown"));
      }), m;
    }
    function iE(i, a, d) {
      var m = i.pingCache, y;
      if (m === null ? (m = i.pingCache = new vC(), y = /* @__PURE__ */ new Set(), m.set(a, y)) : (y = m.get(a), y === void 0 && (y = /* @__PURE__ */ new Set(), m.set(a, y))), !y.has(d)) {
        y.add(d);
        var w = EL.bind(null, i, a, d);
        sr && Gh(i, d), a.then(w, w);
      }
    }
    function gC(i, a, d, m) {
      var y = i.updateQueue;
      if (y === null) {
        var w = /* @__PURE__ */ new Set();
        w.add(d), i.updateQueue = w;
      } else
        y.add(d);
    }
    function yC(i, a) {
      var d = i.tag;
      if ((i.mode & Mn) === Vt && (d === H || d === Q || d === Oe)) {
        var m = i.alternate;
        m ? (i.updateQueue = m.updateQueue, i.memoizedState = m.memoizedState, i.lanes = m.lanes) : (i.updateQueue = null, i.memoizedState = null);
      }
    }
    function rE(i) {
      var a = i;
      do {
        if (a.tag === ne && nC(a))
          return a;
        a = a.return;
      } while (a !== null);
      return null;
    }
    function aE(i, a, d, m, y) {
      if ((i.mode & Mn) === Vt) {
        if (i === a)
          i.flags |= Oi;
        else {
          if (i.flags |= _t, d.flags |= Kl, d.flags &= ~(xa | xs), eu && T) {
            var w = i.alternate;
            if (w === null) {
              var P = i.child, I = P.child;
              if (I !== null) {
                var z = I.memoizedProps.children, Z = Pd("hidden", z);
                I.pendingProps = Z, I.memoizedProps = Z;
              }
            }
          }
          if (d.tag === k) {
            var $ = d.alternate;
            if ($ === null)
              d.tag = ve;
            else {
              var oe = Ut(Nn, tn);
              oe.tag = Ji, Jt(d, oe);
            }
          }
          d.lanes = Gt(d.lanes, tn);
        }
        return i;
      }
      return i.flags |= Oi, i.lanes = y, i;
    }
    function _C(i, a, d, m, y) {
      if (d.flags |= xs, sr && Gh(i, y), m !== null && typeof m == "object" && typeof m.then == "function") {
        var w = m;
        yC(d);
        var P = rE(a);
        if (P !== null) {
          P.flags &= ~Yn, aE(P, a, d, i, y), P.mode & Mn && iE(i, w, y), gC(P, i, w);
          return;
        } else {
          if (!Zd(y)) {
            iE(i, w, y), a_();
            return;
          }
          var I = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
          m = I;
        }
      } else if (cr() && d.mode & Mn) {
        WR();
        var z = rE(a);
        if (z !== null) {
          (z.flags & Oi) === de && (z.flags |= Yn), aE(z, a, d, i, y), Gy(m);
          return;
        }
      }
      dL(m), m = Ym(m, d);
      var Z = a;
      do {
        switch (Z.tag) {
          case N: {
            var $ = m;
            Z.flags |= Oi;
            var oe = ll(y);
            Z.lanes = Gt(Z.lanes, oe);
            var ye = nE(Z, $, oe);
            cn(Z, ye);
            return;
          }
          case k:
            var we = m, ze = Z.type, We = Z.stateNode;
            if ((Z.flags & _t) === de && (typeof ze.getDerivedStateFromError == "function" || We !== null && typeof We.componentDidCatch == "function" && !h1(We))) {
              Z.flags |= Oi;
              var Rt = ll(y);
              Z.lanes = Gt(Z.lanes, Rt);
              var Xt = w0(Z, we, Rt);
              cn(Z, Xt);
              return;
            }
            break;
        }
        Z = Z.return;
      } while (Z !== null);
    }
    function xC() {
      return null;
    }
    function zs(i) {
      i.flags |= Ze;
    }
    function sE(i) {
      i.flags |= fi, i.flags |= V;
    }
    function oE(i, a) {
      var d = i !== null && i.child === a.child;
      if (d)
        return !0;
      if ((a.flags & an) !== de)
        return !1;
      for (var m = a.child; m !== null; ) {
        if ((m.flags & yt) !== de || (m.subtreeFlags & yt) !== de)
          return !1;
        m = m.sibling;
      }
      return !0;
    }
    var Rh, Ch, jm, Zm;
    if (ea)
      Rh = function(i, a, d, m) {
        for (var y = a.child; y !== null; ) {
          if (y.tag === K || y.tag === J)
            Ma(i, y.stateNode);
          else if (y.tag !== X) {
            if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y === a)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === a)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      }, Ch = function(i, a) {
      }, jm = function(i, a, d, m, y) {
        var w = i.memoizedProps;
        if (w !== m) {
          var P = a.stateNode, I = _h(), z = ji(P, d, w, m, y, I);
          a.updateQueue = z, z && zs(a);
        }
      }, Zm = function(i, a, d, m) {
        d !== m && zs(a);
      };
    else if (eu) {
      Rh = function(i, a, d, m) {
        for (var y = a.child; y !== null; ) {
          if (y.tag === K) {
            var w = y.stateNode;
            if (d && m) {
              var P = y.memoizedProps, I = y.type;
              w = Dd(w, I, P, y);
            }
            Ma(i, w);
          } else if (y.tag === J) {
            var z = y.stateNode;
            if (d && m) {
              var Z = y.memoizedProps;
              z = Rc(z, Z, y);
            }
            Ma(i, z);
          } else if (y.tag !== X) {
            if (y.tag === gt && y.memoizedState !== null) {
              var $ = y.child;
              $ !== null && ($.return = y), Rh(i, y, !0, !0);
            } else if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y = y, y === a)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === a)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      };
      var lE = function(i, a, d, m) {
        for (var y = a.child; y !== null; ) {
          if (y.tag === K) {
            var w = y.stateNode;
            if (d && m) {
              var P = y.memoizedProps, I = y.type;
              w = Dd(w, I, P, y);
            }
            iu(i, w);
          } else if (y.tag === J) {
            var z = y.stateNode;
            if (d && m) {
              var Z = y.memoizedProps;
              z = Rc(z, Z, y);
            }
            iu(i, z);
          } else if (y.tag !== X) {
            if (y.tag === gt && y.memoizedState !== null) {
              var $ = y.child;
              $ !== null && ($.return = y), lE(i, y, !0, !0);
            } else if (y.child !== null) {
              y.child.return = y, y = y.child;
              continue;
            }
          }
          if (y = y, y === a)
            return;
          for (; y.sibling === null; ) {
            if (y.return === null || y.return === a)
              return;
            y = y.return;
          }
          y.sibling.return = y.return, y = y.sibling;
        }
      };
      Ch = function(i, a) {
        var d = a.stateNode, m = oE(i, a);
        if (!m) {
          var y = d.containerInfo, w = nu(y);
          lE(w, a, !1, !1), d.pendingChildren = w, zs(a), Go(y, w);
        }
      }, jm = function(i, a, d, m, y) {
        var w = i.stateNode, P = i.memoizedProps, I = oE(i, a);
        if (I && P === m) {
          a.stateNode = w;
          return;
        }
        var z = a.stateNode, Z = _h(), $ = null;
        if (P !== m && ($ = ji(z, d, P, m, y, Z)), I && $ === null) {
          a.stateNode = w;
          return;
        }
        var oe = ta(w, $, d, P, m, a, I, z);
        $l(oe, d, m, y, Z) && zs(a), a.stateNode = oe, I ? zs(a) : Rh(oe, a, !1, !1);
      }, Zm = function(i, a, d, m) {
        if (d !== m) {
          var y = Zy(), w = _h();
          a.stateNode = Wp(m, y, w, a), zs(a);
        } else
          a.stateNode = i.stateNode;
      };
    } else
      Ch = function(i, a) {
      }, jm = function(i, a, d, m, y) {
      }, Zm = function(i, a, d, m) {
      };
    function Lh(i, a) {
      if (!cr())
        switch (i.tailMode) {
          case "hidden": {
            for (var d = i.tail, m = null; d !== null; )
              d.alternate !== null && (m = d), d = d.sibling;
            m === null ? i.tail = null : m.sibling = null;
            break;
          }
          case "collapsed": {
            for (var y = i.tail, w = null; y !== null; )
              y.alternate !== null && (w = y), y = y.sibling;
            w === null ? !a && i.tail !== null ? i.tail.sibling = null : i.tail = null : w.sibling = null;
            break;
          }
        }
    }
    function $i(i) {
      var a = i.alternate !== null && i.alternate.child === i.child, d = Ie, m = de;
      if (a) {
        if ((i.mode & fn) !== Vt) {
          for (var z = i.selfBaseDuration, Z = i.child; Z !== null; )
            d = Gt(d, Gt(Z.lanes, Z.childLanes)), m |= Z.subtreeFlags & Ct, m |= Z.flags & Ct, z += Z.treeBaseDuration, Z = Z.sibling;
          i.treeBaseDuration = z;
        } else
          for (var $ = i.child; $ !== null; )
            d = Gt(d, Gt($.lanes, $.childLanes)), m |= $.subtreeFlags & Ct, m |= $.flags & Ct, $.return = i, $ = $.sibling;
        i.subtreeFlags |= m;
      } else {
        if ((i.mode & fn) !== Vt) {
          for (var y = i.actualDuration, w = i.selfBaseDuration, P = i.child; P !== null; )
            d = Gt(d, Gt(P.lanes, P.childLanes)), m |= P.subtreeFlags, m |= P.flags, y += P.actualDuration, w += P.treeBaseDuration, P = P.sibling;
          i.actualDuration = y, i.treeBaseDuration = w;
        } else
          for (var I = i.child; I !== null; )
            d = Gt(d, Gt(I.lanes, I.childLanes)), m |= I.subtreeFlags, m |= I.flags, I.return = i, I = I.sibling;
        i.subtreeFlags |= m;
      }
      return i.childLanes = d, a;
    }
    function uE(i, a, d) {
      var m = a.pendingProps;
      switch (zy(a), a.tag) {
        case F:
        case ht:
        case Oe:
        case H:
        case Q:
        case ae:
        case _e:
        case ue:
        case Me:
        case be:
          return $i(a), null;
        case k: {
          var y = a.type;
          return Br(y) && $o(a), $i(a), null;
        }
        case N: {
          var w = a.stateNode;
          if (vf(a), fu(a), t0(), w.pendingContext && (w.context = w.pendingContext, w.pendingContext = null), i === null || i.child === null) {
            var P = mh(a);
            if (P)
              zs(a);
            else if (i !== null) {
              var I = i.memoizedState;
              // Check if this is a client root
              (!I.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
              (a.flags & Yn) !== de) && (a.flags |= Gi, xM());
            }
          }
          return Ch(i, a), $i(a), null;
        }
        case K: {
          Qy(a);
          var z = Zy(), Z = a.type;
          if (i !== null && a.stateNode != null)
            jm(i, a, Z, m, z), i.ref !== a.ref && sE(a);
          else {
            if (!m) {
              if (a.stateNode === null)
                throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
              return $i(a), null;
            }
            var $ = _h(), oe = mh(a);
            if (oe)
              YR(a, z, $) && zs(a);
            else {
              var ye = Yi(Z, m, z, $, a);
              Rh(ye, a, !1, !1), a.stateNode = ye, $l(ye, Z, m, z, $) && zs(a);
            }
            a.ref !== null && sE(a);
          }
          return $i(a), null;
        }
        case J: {
          var we = m;
          if (i && a.stateNode != null) {
            var ze = i.memoizedProps;
            Zm(i, a, ze, we);
          } else {
            if (typeof we != "string" && a.stateNode === null)
              throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
            var We = Zy(), Rt = _h(), Xt = mh(a);
            Xt ? jR(a) && zs(a) : a.stateNode = Wp(we, We, Rt, a);
          }
          return $i(a), null;
        }
        case ne: {
          yf(a);
          var It = a.memoizedState;
          {
            if (QR() && (a.mode & Mn) !== Vt && (a.flags & _t) === de)
              return _M(a), pf(), a.flags |= Yn | xs | Oi, a;
            if (It !== null && It.dehydrated !== null) {
              var Gn = mh(a);
              if (i === null) {
                if (!Gn)
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                if (ZR(a), $i(a), (a.mode & fn) !== Vt) {
                  var Wn = It !== null;
                  if (Wn) {
                    var fe = a.child;
                    fe !== null && (a.treeBaseDuration -= fe.treeBaseDuration);
                  }
                }
                return null;
              } else {
                if (pf(), (a.flags & _t) === de && (a.memoizedState = null), a.flags |= Ze, $i(a), (a.mode & fn) !== Vt) {
                  var Ce = It !== null;
                  if (Ce) {
                    var le = a.child;
                    le !== null && (a.treeBaseDuration -= le.treeBaseDuration);
                  }
                }
                return null;
              }
            }
            xM();
          }
          if ((a.flags & _t) !== de)
            return a.lanes = d, (a.mode & fn) !== Vt && T0(a), a;
          var je = It !== null, Tt = !1;
          if (i === null)
            mh(a);
          else {
            var dt = i.memoizedState;
            Tt = dt !== null;
          }
          if (je && !Tt) {
            var rn = a.child;
            if (rn.flags |= _r, (a.mode & Mn) !== Vt) {
              var En = i === null && (a.memoizedProps.unstable_avoidThisFallback !== !0 || !L);
              En || Ky(ss.current, AM) ? fL() : a_();
            }
          }
          var zn = a.updateQueue;
          if (zn !== null && (a.flags |= Ze), $i(a), (a.mode & fn) !== Vt && je) {
            var Tn = a.child;
            Tn !== null && (a.treeBaseDuration -= Tn.treeBaseDuration);
          }
          return null;
        }
        case X:
          return vf(a), Ch(i, a), i === null && tu(a.stateNode.containerInfo), $i(a), null;
        case Fe:
          var ni = a.type._context;
          return D(ni, a), $i(a), null;
        case ve: {
          var mn = a.type;
          return Br(mn) && $o(a), $i(a), null;
        }
        case Ye: {
          yf(a);
          var nn = a.memoizedState;
          if (nn === null)
            return $i(a), null;
          var yi = (a.flags & _t) !== de, ii = nn.rendering;
          if (ii === null)
            if (yi)
              Lh(nn, !1);
            else {
              var Wa = hL() && (i === null || (i.flags & _t) === de);
              if (!Wa)
                for (var nr = a.child; nr !== null; ) {
                  var da = Am(nr);
                  if (da !== null) {
                    yi = !0, a.flags |= _t, Lh(nn, !1);
                    var ha = da.updateQueue;
                    return ha !== null && (a.updateQueue = ha, a.flags |= Ze), a.subtreeFlags = de, $R(a, d), bl(a, $y(ss.current, xh)), a.child;
                  }
                  nr = nr.sibling;
                }
              nn.tail !== null && Jn() > i1() && (a.flags |= _t, yi = !0, Lh(nn, !1), a.lanes = al);
            }
          else {
            if (!yi) {
              var Vs = Am(ii);
              if (Vs !== null) {
                a.flags |= _t, yi = !0;
                var Lf = Vs.updateQueue;
                if (Lf !== null && (a.updateQueue = Lf, a.flags |= Ze), Lh(nn, !0), nn.tail === null && nn.tailMode === "hidden" && !ii.alternate && !cr())
                  return $i(a), null;
              } else
                // The time it took to render last row is greater than the remaining
                // time we have to render. So rendering one more row would likely
                // exceed it.
                Jn() * 2 - nn.renderingStartTime > i1() && d !== An && (a.flags |= _t, yi = !0, Lh(nn, !1), a.lanes = al);
            }
            if (nn.isBackwards)
              ii.sibling = a.child, a.child = ii;
            else {
              var Pf = nn.last;
              Pf !== null ? Pf.sibling = ii : a.child = ii, nn.last = ii;
            }
          }
          if (nn.tail !== null) {
            var pa = nn.tail;
            nn.rendering = pa, nn.tail = pa.sibling, nn.renderingStartTime = Jn(), pa.sibling = null;
            var Vu = ss.current;
            return yi ? Vu = $y(Vu, xh) : Vu = gf(Vu), bl(a, Vu), pa;
          }
          return $i(a), null;
        }
        case Ge:
          break;
        case gt:
        case Pt: {
          r_(a);
          var E_ = a.memoizedState, Z1 = E_ !== null;
          if (i !== null) {
            var fP = i.memoizedState, dP = fP !== null;
            dP !== Z1 && // LegacyHidden doesn't do any hiding — it only pre-renders.
            !E && (a.flags |= _r);
          }
          return !Z1 || (a.mode & Mn) === Vt ? $i(a) : Zn(Bs, An) && ($i(a), ea && a.subtreeFlags & (Ke | Ze) && (a.flags |= _r)), null;
        }
        case Dt:
          return null;
        case ie:
          return null;
      }
      throw new Error("Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    var Ph = o.ReactCurrentOwner, ls = !1, A0, Dh, R0, C0, L0, Iu, P0, Jm;
    A0 = {}, Dh = {}, R0 = {}, C0 = {}, L0 = {}, Iu = !1, P0 = {}, Jm = {};
    function Ar(i, a, d, m) {
      i === null ? a.child = TM(a, null, d, m) : a.child = mf(a, i.child, d, m);
    }
    function SC(i, a, d, m) {
      a.child = mf(a, i.child, null, m), a.child = mf(a, null, d, m);
    }
    function cE(i, a, d, m, y) {
      if (a.type !== a.elementType) {
        var w = d.propTypes;
        w && Mr(
          w,
          m,
          // Resolved props
          "prop",
          et(d)
        );
      }
      var P = d.render, I = a.ref, z, Z;
      ke(a, y), Ua(a);
      {
        if (Ph.current = a, Ia(!0), z = Mf(i, a, P, m, I, y), Z = Ef(), a.mode & jn) {
          un(!0);
          try {
            z = Mf(i, a, P, m, I, y), Z = Ef();
          } finally {
            un(!1);
          }
        }
        Ia(!1);
      }
      return is(), i !== null && !ls ? (RM(i, a, y), So(i, a, y)) : (cr() && Z && Fy(a), a.flags |= qe, Ar(i, a, z, y), a.child);
    }
    function fE(i, a, d, m, y) {
      if (i === null) {
        var w = d.type;
        if (HL(w) && d.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        d.defaultProps === void 0) {
          var P = w;
          return P = Cf(w), a.tag = Oe, a.type = P, U0(a, w), dE(i, a, P, m, y);
        }
        {
          var I = w.propTypes;
          I && Mr(
            I,
            m,
            // Resolved props
            "prop",
            et(w)
          );
        }
        var z = m_(d.type, null, m, a, a.mode, y);
        return z.ref = a.ref, z.return = a, a.child = z, z;
      }
      {
        var Z = d.type, $ = Z.propTypes;
        $ && Mr(
          $,
          m,
          // Resolved props
          "prop",
          et(Z)
        );
      }
      var oe = i.child, ye = z0(i, y);
      if (!ye) {
        var we = oe.memoizedProps, ze = d.compare;
        if (ze = ze !== null ? ze : ho, ze(we, m) && i.ref === a.ref)
          return So(i, a, y);
      }
      a.flags |= qe;
      var We = Hu(oe, m);
      return We.ref = a.ref, We.return = a, a.child = We, We;
    }
    function dE(i, a, d, m, y) {
      if (a.type !== a.elementType) {
        var w = a.elementType;
        if (w.$$typeof === st) {
          var P = w, I = P._payload, z = P._init;
          try {
            w = z(I);
          } catch {
            w = null;
          }
          var Z = w && w.propTypes;
          Z && Mr(
            Z,
            m,
            // Resolved (SimpleMemoComponent has no defaultProps)
            "prop",
            et(w)
          );
        }
      }
      if (i !== null) {
        var $ = i.memoizedProps;
        if (ho($, m) && i.ref === a.ref && // Prevent bailout if the implementation changed due to hot reload.
        a.type === i.type)
          if (ls = !1, z0(i, y))
            (i.flags & Kl) !== de && (ls = !0);
          else
            return a.lanes = i.lanes, So(i, a, y);
      }
      return D0(i, a, d, m, y);
    }
    function hE(i, a, d) {
      var m = a.pendingProps, y = m.children, w = i !== null ? i.memoizedState : null;
      if (m.mode === "hidden" || E)
        if ((a.mode & Mn) === Vt) {
          var P = {
            baseLanes: Ie,
            cachePool: null
          };
          a.memoizedState = P, Mv(a, d);
        } else if (Zn(d, An)) {
          var oe = {
            baseLanes: Ie,
            cachePool: null
          };
          a.memoizedState = oe;
          var ye = w !== null ? w.baseLanes : d;
          Mv(a, ye);
        } else {
          var I = null, z;
          if (w !== null) {
            var Z = w.baseLanes;
            z = Gt(Z, d);
          } else
            z = d;
          a.lanes = a.childLanes = An;
          var $ = {
            baseLanes: z,
            cachePool: I
          };
          return a.memoizedState = $, a.updateQueue = null, Mv(a, z), null;
        }
      else {
        var we;
        w !== null ? (we = Gt(w.baseLanes, d), a.memoizedState = null) : we = d, Mv(a, we);
      }
      return Ar(i, a, y, d), a.child;
    }
    function MC(i, a, d) {
      var m = a.pendingProps;
      return Ar(i, a, m, d), a.child;
    }
    function EC(i, a, d) {
      var m = a.pendingProps.children;
      return Ar(i, a, m, d), a.child;
    }
    function TC(i, a, d) {
      {
        a.flags |= Ze;
        {
          var m = a.stateNode;
          m.effectDuration = 0, m.passiveEffectDuration = 0;
        }
      }
      var y = a.pendingProps, w = y.children;
      return Ar(i, a, w, d), a.child;
    }
    function pE(i, a) {
      var d = a.ref;
      (i === null && d !== null || i !== null && i.ref !== d) && (a.flags |= fi, a.flags |= V);
    }
    function D0(i, a, d, m, y) {
      if (a.type !== a.elementType) {
        var w = d.propTypes;
        w && Mr(
          w,
          m,
          // Resolved props
          "prop",
          et(d)
        );
      }
      var P;
      {
        var I = Ra(a, d, !0);
        P = Ko(a, I);
      }
      var z, Z;
      ke(a, y), Ua(a);
      {
        if (Ph.current = a, Ia(!0), z = Mf(i, a, d, m, P, y), Z = Ef(), a.mode & jn) {
          un(!0);
          try {
            z = Mf(i, a, d, m, P, y), Z = Ef();
          } finally {
            un(!1);
          }
        }
        Ia(!1);
      }
      return is(), i !== null && !ls ? (RM(i, a, y), So(i, a, y)) : (cr() && Z && Fy(a), a.flags |= qe, Ar(i, a, z, y), a.child);
    }
    function mE(i, a, d, m, y) {
      {
        switch (P1(a)) {
          case !1: {
            var w = a.stateNode, P = a.type, I = new P(a.memoizedProps, w.context), z = I.state;
            w.updater.enqueueSetState(w, z, null);
            break;
          }
          case !0: {
            a.flags |= _t, a.flags |= Oi;
            var Z = new Error("Simulated error coming from DevTools"), $ = ll(y);
            a.lanes = Gt(a.lanes, $);
            var oe = w0(a, Ym(Z, a), $);
            cn(a, oe);
            break;
          }
        }
        if (a.type !== a.elementType) {
          var ye = d.propTypes;
          ye && Mr(
            ye,
            m,
            // Resolved props
            "prop",
            et(d)
          );
        }
      }
      var we;
      Br(d) ? (we = !0, La(a)) : we = !1, ke(a, y);
      var ze = a.stateNode, We;
      ze === null ? (i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ke), fM(a, d, m), Oy(a, d, m, y), We = !0) : i === null ? We = IR(a, d, m, y) : We = OR(i, a, d, m, y);
      var Rt = N0(i, a, d, We, we, y);
      {
        var Xt = a.stateNode;
        We && Xt.props !== m && (Iu || h("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", G(a) || "a component"), Iu = !0);
      }
      return Rt;
    }
    function N0(i, a, d, m, y, w) {
      pE(i, a);
      var P = (a.flags & _t) !== de;
      if (!m && !P)
        return y && du(a, d, !1), So(i, a, w);
      var I = a.stateNode;
      Ph.current = a;
      var z;
      if (P && typeof d.getDerivedStateFromError != "function")
        z = null, tE();
      else {
        Ua(a);
        {
          if (Ia(!0), z = I.render(), a.mode & jn) {
            un(!0);
            try {
              I.render();
            } finally {
              un(!1);
            }
          }
          Ia(!1);
        }
        is();
      }
      return a.flags |= qe, i !== null && P ? SC(i, a, z, w) : Ar(i, a, z, w), a.memoizedState = I.state, y && du(a, d, !0), a.child;
    }
    function vE(i) {
      var a = i.stateNode;
      a.pendingContext ? Ca(i, a.pendingContext, a.pendingContext !== a.context) : a.context && Ca(i, a.context, !1), Jy(i, a.containerInfo);
    }
    function bC(i, a, d) {
      if (vE(a), i === null)
        throw new Error("Should have a current fiber. This is a bug in React.");
      var m = a.pendingProps, y = a.memoizedState, w = y.element;
      Wt(i, a), ff(a, m, null, d);
      var P = a.memoizedState;
      a.stateNode;
      var I = P.element;
      if (Zi && y.isDehydrated) {
        var z = {
          element: I,
          isDehydrated: !1,
          cache: P.cache,
          transitions: P.transitions
        }, Z = a.updateQueue;
        if (Z.baseState = z, a.memoizedState = z, a.flags & Yn) {
          var $ = new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering.");
          return gE(i, a, I, d, $);
        } else if (I !== w) {
          var oe = new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering.");
          return gE(i, a, I, d, oe);
        } else {
          XR(a);
          var ye = TM(a, null, I, d);
          a.child = ye;
          for (var we = ye; we; )
            we.flags = we.flags & ~Ke | Wi, we = we.sibling;
        }
      } else {
        if (pf(), I === w)
          return So(i, a, d);
        Ar(i, a, I, d);
      }
      return a.child;
    }
    function gE(i, a, d, m, y) {
      return pf(), Gy(y), a.flags |= Yn, Ar(i, a, d, m), a.child;
    }
    function wC(i, a, d) {
      bM(a), i === null && ky(a);
      var m = a.type, y = a.pendingProps, w = i !== null ? i.memoizedProps : null, P = y.children, I = Td(m, y);
      return I ? P = null : w !== null && Td(m, w) && (a.flags |= gn), pE(i, a), Ar(i, a, P, d), a.child;
    }
    function AC(i, a) {
      return i === null && ky(a), null;
    }
    function RC(i, a, d, m) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ke);
      var y = a.pendingProps, w = d, P = w._payload, I = w._init, z = I(P);
      a.type = z;
      var Z = a.tag = VL(z), $ = Xr(z, y), oe;
      switch (Z) {
        case H:
          return U0(a, z), a.type = z = Cf(z), oe = D0(null, a, z, $, m), oe;
        case k:
          return a.type = z = u_(z), oe = mE(null, a, z, $, m), oe;
        case Q:
          return a.type = z = c_(z), oe = cE(null, a, z, $, m), oe;
        case be: {
          if (a.type !== a.elementType) {
            var ye = z.propTypes;
            ye && Mr(
              ye,
              $,
              // Resolved for outer only
              "prop",
              et(z)
            );
          }
          return oe = fE(
            null,
            a,
            z,
            Xr(z.type, $),
            // The inner type can have defaults too
            m
          ), oe;
        }
      }
      var we = "";
      throw z !== null && typeof z == "object" && z.$$typeof === st && (we = " Did you wrap a component in React.lazy() more than once?"), new Error("Element type is invalid. Received a promise that resolves to: " + z + ". " + ("Lazy element type must resolve to a class or function." + we));
    }
    function CC(i, a, d, m, y) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ke), a.tag = k;
      var w;
      return Br(d) ? (w = !0, La(a)) : w = !1, ke(a, y), fM(a, d, m), Oy(a, d, m, y), N0(null, a, d, !0, w, y);
    }
    function LC(i, a, d, m) {
      i !== null && (i.alternate = null, a.alternate = null, a.flags |= Ke);
      var y = a.pendingProps, w;
      {
        var P = Ra(a, d, !1);
        w = Ko(a, P);
      }
      ke(a, m);
      var I, z;
      Ua(a);
      {
        if (d.prototype && typeof d.prototype.render == "function") {
          var Z = et(d) || "Unknown";
          A0[Z] || (h("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", Z, Z), A0[Z] = !0);
        }
        a.mode & jn && Wr.recordLegacyContextWarning(a, null), Ia(!0), Ph.current = a, I = Mf(null, a, d, y, w, m), z = Ef(), Ia(!1);
      }
      if (is(), a.flags |= qe, typeof I == "object" && I !== null && typeof I.render == "function" && I.$$typeof === void 0) {
        var $ = et(d) || "Unknown";
        Dh[$] || (h("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", $, $, $), Dh[$] = !0);
      }
      if (
        // Run these checks in production only if the flag is off.
        // Eventually we'll delete this branch altogether.
        typeof I == "object" && I !== null && typeof I.render == "function" && I.$$typeof === void 0
      ) {
        {
          var oe = et(d) || "Unknown";
          Dh[oe] || (h("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", oe, oe, oe), Dh[oe] = !0);
        }
        a.tag = k, a.memoizedState = null, a.updateQueue = null;
        var ye = !1;
        return Br(d) ? (ye = !0, La(a)) : ye = !1, a.memoizedState = I.state !== null && I.state !== void 0 ? I.state : null, xt(a), cM(a, I), Oy(a, d, y, m), N0(null, a, d, !0, ye, m);
      } else {
        if (a.tag = H, a.mode & jn) {
          un(!0);
          try {
            I = Mf(null, a, d, y, w, m), z = Ef();
          } finally {
            un(!1);
          }
        }
        return cr() && z && Fy(a), Ar(null, a, I, m), U0(a, d), a.child;
      }
    }
    function U0(i, a) {
      {
        if (a && a.childContextTypes && h("%s(...): childContextTypes cannot be defined on a function component.", a.displayName || a.name || "Component"), i.ref !== null) {
          var d = "", m = My();
          m && (d += `

Check the render method of \`` + m + "`.");
          var y = m || "", w = i._debugSource;
          w && (y = w.fileName + ":" + w.lineNumber), L0[y] || (L0[y] = !0, h("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", d));
        }
        if (typeof a.getDerivedStateFromProps == "function") {
          var P = et(a) || "Unknown";
          C0[P] || (h("%s: Function components do not support getDerivedStateFromProps.", P), C0[P] = !0);
        }
        if (typeof a.contextType == "object" && a.contextType !== null) {
          var I = et(a) || "Unknown";
          R0[I] || (h("%s: Function components do not support contextType.", I), R0[I] = !0);
        }
      }
    }
    var Qm = {
      dehydrated: null,
      treeContext: null,
      retryLane: pi
    };
    function Km(i) {
      return {
        baseLanes: i,
        cachePool: xC()
      };
    }
    function yE(i, a) {
      var d = null;
      return {
        baseLanes: Gt(i.baseLanes, a),
        cachePool: d
      };
    }
    function PC(i, a, d, m) {
      if (a !== null) {
        var y = a.memoizedState;
        if (y === null)
          return !1;
      }
      return Ky(i, xh);
    }
    function _E(i, a) {
      return so(i.childLanes, a);
    }
    function xE(i, a, d) {
      var m = a.pendingProps;
      N1(a) && (a.flags |= _t);
      var y = ss.current, w = !1, P = (a.flags & _t) !== de;
      if (P || PC(y, i) ? (w = !0, a.flags &= ~_t) : (i === null || i.memoizedState !== null) && (y = tC(y, AM)), y = gf(y), bl(a, y), i === null) {
        ky(a);
        {
          var I = a.memoizedState;
          if (I !== null) {
            var z = I.dehydrated;
            if (z !== null)
              return UC(a, z);
          }
        }
        var Z = m.children, $ = m.fallback;
        if (w) {
          var oe = DC(a, Z, $, d), ye = a.child;
          return ye.memoizedState = Km(d), a.memoizedState = Qm, oe;
        } else
          return I0(a, Z);
      } else {
        var we = i.memoizedState;
        if (we !== null) {
          {
            var ze = we.dehydrated;
            if (ze !== null)
              if (P) {
                if (a.flags & Yn)
                  return a.flags &= ~Yn, $m(i, a, d, new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                if (a.memoizedState !== null)
                  return a.child = i.child, a.flags |= _t, null;
                var We = m.children, Rt = m.fallback, Xt = NC(i, a, We, Rt, d), It = a.child;
                return It.memoizedState = Km(d), a.memoizedState = Qm, Xt;
              } else
                return IC(i, a, ze, we, d);
          }
          if (w) {
            var Gn = m.fallback, Wn = m.children, fe = EE(i, a, Wn, Gn, d), Ce = a.child, le = i.child.memoizedState;
            return Ce.memoizedState = le === null ? Km(d) : yE(le, d), Ce.childLanes = _E(i, d), a.memoizedState = Qm, fe;
          } else {
            var je = m.children, Tt = ME(i, a, je, d);
            return a.memoizedState = null, Tt;
          }
        } else if (w) {
          var dt = m.fallback, rn = m.children, En = EE(i, a, rn, dt, d), zn = a.child, Tn = i.child.memoizedState;
          return zn.memoizedState = Tn === null ? Km(d) : yE(Tn, d), zn.childLanes = _E(i, d), a.memoizedState = Qm, En;
        } else {
          var ni = m.children, mn = ME(i, a, ni, d);
          return a.memoizedState = null, mn;
        }
      }
    }
    function I0(i, a, d) {
      var m = i.mode, y = {
        mode: "visible",
        children: a
      }, w = O0(y, m);
      return w.return = i, i.child = w, w;
    }
    function DC(i, a, d, m) {
      var y = i.mode, w = i.child, P = {
        mode: "hidden",
        children: a
      }, I, z;
      return (y & Mn) === Vt && w !== null ? (I = w, I.childLanes = Ie, I.pendingProps = P, i.mode & fn && (I.actualDuration = 0, I.actualStartTime = -1, I.selfBaseDuration = 0, I.treeBaseDuration = 0), z = Dl(d, y, m, null)) : (I = O0(P, y), z = Dl(d, y, m, null)), I.return = i, z.return = i, I.sibling = z, i.child = I, z;
    }
    function O0(i, a, d) {
      return T1(i, a, Ie, null);
    }
    function SE(i, a) {
      return Hu(i, a);
    }
    function ME(i, a, d, m) {
      var y = i.child, w = y.sibling, P = SE(y, {
        mode: "visible",
        children: d
      });
      if ((a.mode & Mn) === Vt && (P.lanes = m), P.return = a, P.sibling = null, w !== null) {
        var I = a.deletions;
        I === null ? (a.deletions = [w], a.flags |= an) : I.push(w);
      }
      return a.child = P, P;
    }
    function EE(i, a, d, m, y) {
      var w = a.mode, P = i.child, I = P.sibling, z = {
        mode: "hidden",
        children: d
      }, Z;
      if (
        // In legacy mode, we commit the primary tree as if it successfully
        // completed, even though it's in an inconsistent state.
        (w & Mn) === Vt && // Make sure we're on the second pass, i.e. the primary child fragment was
        // already cloned. In legacy mode, the only case where this isn't true is
        // when DevTools forces us to display a fallback; we skip the first render
        // pass entirely and go straight to rendering the fallback. (In Concurrent
        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
        // only codepath.)
        a.child !== P
      ) {
        var $ = a.child;
        Z = $, Z.childLanes = Ie, Z.pendingProps = z, a.mode & fn && (Z.actualDuration = 0, Z.actualStartTime = -1, Z.selfBaseDuration = P.selfBaseDuration, Z.treeBaseDuration = P.treeBaseDuration), a.deletions = null;
      } else
        Z = SE(P, z), Z.subtreeFlags = P.subtreeFlags & Ct;
      var oe;
      return I !== null ? oe = Hu(I, m) : (oe = Dl(m, w, y, null), oe.flags |= Ke), oe.return = a, Z.return = a, Z.sibling = oe, a.child = Z, oe;
    }
    function $m(i, a, d, m) {
      m !== null && Gy(m), mf(a, i.child, null, d);
      var y = a.pendingProps, w = y.children, P = I0(a, w);
      return P.flags |= Ke, a.memoizedState = null, P;
    }
    function NC(i, a, d, m, y) {
      var w = a.mode, P = {
        mode: "visible",
        children: d
      }, I = O0(P, w), z = Dl(m, w, y, null);
      return z.flags |= Ke, I.return = a, z.return = a, I.sibling = z, a.child = I, (a.mode & Mn) !== Vt && mf(a, i.child, null, y), z;
    }
    function UC(i, a, d) {
      return (i.mode & Mn) === Vt ? (h("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components."), i.lanes = tn) : wa(a) ? i.lanes = es : i.lanes = An, null;
    }
    function IC(i, a, d, m, y) {
      if (GR(), (a.mode & Mn) === Vt)
        return $m(
          i,
          a,
          y,
          // TODO: When we delete legacy mode, we should make this error argument
          // required — every concurrent mode path that causes hydration to
          // de-opt to client rendering should have an error message.
          null
        );
      if (wa(d))
        return $m(
          i,
          a,
          y,
          // TODO: The server should serialize the error message so we can log it
          // here on the client. Or, in production, a hash/id that corresponds to
          // the error.
          new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.")
        );
      var w = Zn(y, i.childLanes);
      if (ls || w) {
        var P = _v();
        if (P !== null) {
          var I = Qd(P, y);
          if (I !== pi && I !== m.retryLane) {
            m.retryLane = I;
            var z = Nn;
            Ni(i, I, z);
          }
        }
        return a_(), $m(i, a, y, new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
      } else if (na(d)) {
        a.flags |= _t, a.child = i.child;
        var Z = TL.bind(null, i);
        return Ud(d, Z), null;
      } else {
        qR(a, d, m.treeContext);
        var $ = a.pendingProps, oe = $.children, ye = I0(a, oe);
        return ye.flags |= Wi, ye;
      }
    }
    function TE(i, a, d) {
      i.lanes = Gt(i.lanes, a);
      var m = i.alternate;
      m !== null && (m.lanes = Gt(m.lanes, a)), j(i.return, a, d);
    }
    function OC(i, a, d) {
      for (var m = a; m !== null; ) {
        if (m.tag === ne) {
          var y = m.memoizedState;
          y !== null && TE(m, d, i);
        } else if (m.tag === Ye)
          TE(m, d, i);
        else if (m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === i)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === i)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function FC(i) {
      for (var a = i, d = null; a !== null; ) {
        var m = a.alternate;
        m !== null && Am(m) === null && (d = a), a = a.sibling;
      }
      return d;
    }
    function zC(i) {
      if (i !== void 0 && i !== "forwards" && i !== "backwards" && i !== "together" && !P0[i])
        if (P0[i] = !0, typeof i == "string")
          switch (i.toLowerCase()) {
            case "together":
            case "forwards":
            case "backwards": {
              h('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', i, i.toLowerCase());
              break;
            }
            case "forward":
            case "backward": {
              h('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', i, i.toLowerCase());
              break;
            }
            default:
              h('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
              break;
          }
        else
          h('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', i);
    }
    function BC(i, a) {
      i !== void 0 && !Jm[i] && (i !== "collapsed" && i !== "hidden" ? (Jm[i] = !0, h('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', i)) : a !== "forwards" && a !== "backwards" && (Jm[i] = !0, h('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', i)));
    }
    function bE(i, a) {
      {
        var d = Sn(i), m = !d && typeof Xe(i) == "function";
        if (d || m) {
          var y = d ? "array" : "iterable";
          return h("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", y, a, y), !1;
        }
      }
      return !0;
    }
    function HC(i, a) {
      if ((a === "forwards" || a === "backwards") && i !== void 0 && i !== null && i !== !1)
        if (Sn(i)) {
          for (var d = 0; d < i.length; d++)
            if (!bE(i[d], d))
              return;
        } else {
          var m = Xe(i);
          if (typeof m == "function") {
            var y = m.call(i);
            if (y)
              for (var w = y.next(), P = 0; !w.done; w = y.next()) {
                if (!bE(w.value, P))
                  return;
                P++;
              }
          } else
            h('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', a);
        }
    }
    function F0(i, a, d, m, y) {
      var w = i.memoizedState;
      w === null ? i.memoizedState = {
        isBackwards: a,
        rendering: null,
        renderingStartTime: 0,
        last: m,
        tail: d,
        tailMode: y
      } : (w.isBackwards = a, w.rendering = null, w.renderingStartTime = 0, w.last = m, w.tail = d, w.tailMode = y);
    }
    function wE(i, a, d) {
      var m = a.pendingProps, y = m.revealOrder, w = m.tail, P = m.children;
      zC(y), BC(w, y), HC(P, y), Ar(i, a, P, d);
      var I = ss.current, z = Ky(I, xh);
      if (z)
        I = $y(I, xh), a.flags |= _t;
      else {
        var Z = i !== null && (i.flags & _t) !== de;
        Z && OC(a, a.child, d), I = gf(I);
      }
      if (bl(a, I), (a.mode & Mn) === Vt)
        a.memoizedState = null;
      else
        switch (y) {
          case "forwards": {
            var $ = FC(a.child), oe;
            $ === null ? (oe = a.child, a.child = null) : (oe = $.sibling, $.sibling = null), F0(
              a,
              !1,
              // isBackwards
              oe,
              $,
              w
            );
            break;
          }
          case "backwards": {
            var ye = null, we = a.child;
            for (a.child = null; we !== null; ) {
              var ze = we.alternate;
              if (ze !== null && Am(ze) === null) {
                a.child = we;
                break;
              }
              var We = we.sibling;
              we.sibling = ye, ye = we, we = We;
            }
            F0(
              a,
              !0,
              // isBackwards
              ye,
              null,
              // last
              w
            );
            break;
          }
          case "together": {
            F0(
              a,
              !1,
              // isBackwards
              null,
              // tail
              null,
              // last
              void 0
            );
            break;
          }
          default:
            a.memoizedState = null;
        }
      return a.child;
    }
    function VC(i, a, d) {
      Jy(a, a.stateNode.containerInfo);
      var m = a.pendingProps;
      return i === null ? a.child = mf(a, null, m, d) : Ar(i, a, m, d), a.child;
    }
    var AE = !1;
    function kC(i, a, d) {
      var m = a.type, y = m._context, w = a.pendingProps, P = a.memoizedProps, I = w.value;
      {
        "value" in w || AE || (AE = !0, h("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"));
        var z = a.type.propTypes;
        z && Mr(z, w, "prop", "Context.Provider");
      }
      if (A(a, y, I), P !== null) {
        var Z = P.value;
        if (br(Z, I)) {
          if (P.children === w.children && !hi())
            return So(i, a, d);
        } else
          ee(a, y, d);
      }
      var $ = w.children;
      return Ar(i, a, $, d), a.child;
    }
    var RE = !1;
    function GC(i, a, d) {
      var m = a.type;
      m._context === void 0 ? m !== m.Consumer && (RE || (RE = !0, h("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?"))) : m = m._context;
      var y = a.pendingProps, w = y.children;
      typeof w != "function" && h("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."), ke(a, d);
      var P = Qe(m);
      Ua(a);
      var I;
      return Ph.current = a, Ia(!0), I = w(P), Ia(!1), is(), a.flags |= qe, Ar(i, a, I, d), a.child;
    }
    function ev() {
      ls = !0;
    }
    function So(i, a, d) {
      return i !== null && (a.dependencies = i.dependencies), tE(), Ev(a.lanes), Zn(d, a.childLanes) ? (KR(i, a), a.child) : null;
    }
    function WC(i, a, d) {
      {
        var m = a.return;
        if (m === null)
          throw new Error("Cannot swap the root fiber.");
        if (i.alternate = null, a.alternate = null, d.index = a.index, d.sibling = a.sibling, d.return = a.return, d.ref = a.ref, a === m.child)
          m.child = d;
        else {
          var y = m.child;
          if (y === null)
            throw new Error("Expected parent to have a child.");
          for (; y.sibling !== a; )
            if (y = y.sibling, y === null)
              throw new Error("Expected to find the previous sibling.");
          y.sibling = d;
        }
        var w = m.deletions;
        return w === null ? (m.deletions = [i], m.flags |= an) : w.push(i), d.flags |= Ke, d;
      }
    }
    function z0(i, a) {
      var d = i.lanes;
      return !!Zn(d, a);
    }
    function XC(i, a, d) {
      switch (a.tag) {
        case N:
          vE(a), a.stateNode, pf();
          break;
        case K:
          bM(a);
          break;
        case k: {
          var m = a.type;
          Br(m) && La(a);
          break;
        }
        case X:
          Jy(a, a.stateNode.containerInfo);
          break;
        case Fe: {
          var y = a.memoizedProps.value, w = a.type._context;
          A(a, w, y);
          break;
        }
        case ue:
          {
            var P = Zn(d, a.childLanes);
            P && (a.flags |= Ze);
            {
              var I = a.stateNode;
              I.effectDuration = 0, I.passiveEffectDuration = 0;
            }
          }
          break;
        case ne: {
          var z = a.memoizedState;
          if (z !== null) {
            if (z.dehydrated !== null)
              return bl(a, gf(ss.current)), a.flags |= _t, null;
            var Z = a.child, $ = Z.childLanes;
            if (Zn(d, $))
              return xE(i, a, d);
            bl(a, gf(ss.current));
            var oe = So(i, a, d);
            return oe !== null ? oe.sibling : null;
          } else
            bl(a, gf(ss.current));
          break;
        }
        case Ye: {
          var ye = (i.flags & _t) !== de, we = Zn(d, a.childLanes);
          if (ye) {
            if (we)
              return wE(i, a, d);
            a.flags |= _t;
          }
          var ze = a.memoizedState;
          if (ze !== null && (ze.rendering = null, ze.tail = null, ze.lastEffect = null), bl(a, ss.current), we)
            break;
          return null;
        }
        case gt:
        case Pt:
          return a.lanes = Ie, hE(i, a, d);
      }
      return So(i, a, d);
    }
    function CE(i, a, d) {
      if (a._debugNeedsRemount && i !== null)
        return WC(i, a, m_(a.type, a.key, a.pendingProps, a._debugOwner || null, a.mode, a.lanes));
      if (i !== null) {
        var m = i.memoizedProps, y = a.pendingProps;
        if (m !== y || hi() || // Force a re-render if the implementation changed due to hot reload:
        a.type !== i.type)
          ls = !0;
        else {
          var w = z0(i, d);
          if (!w && // If this is the second pass of an error or suspense boundary, there
          // may not be work scheduled on `current`, so we check for this flag.
          (a.flags & _t) === de)
            return ls = !1, XC(i, a, d);
          (i.flags & Kl) !== de ? ls = !0 : ls = !1;
        }
      } else if (ls = !1, cr() && FR(a)) {
        var P = a.index, I = zR();
        hM(a, I, P);
      }
      switch (a.lanes = Ie, a.tag) {
        case F:
          return LC(i, a, a.type, d);
        case ht: {
          var z = a.elementType;
          return RC(i, a, z, d);
        }
        case H: {
          var Z = a.type, $ = a.pendingProps, oe = a.elementType === Z ? $ : Xr(Z, $);
          return D0(i, a, Z, oe, d);
        }
        case k: {
          var ye = a.type, we = a.pendingProps, ze = a.elementType === ye ? we : Xr(ye, we);
          return mE(i, a, ye, ze, d);
        }
        case N:
          return bC(i, a, d);
        case K:
          return wC(i, a, d);
        case J:
          return AC(i, a);
        case ne:
          return xE(i, a, d);
        case X:
          return VC(i, a, d);
        case Q: {
          var We = a.type, Rt = a.pendingProps, Xt = a.elementType === We ? Rt : Xr(We, Rt);
          return cE(i, a, We, Xt, d);
        }
        case ae:
          return MC(i, a, d);
        case _e:
          return EC(i, a, d);
        case ue:
          return TC(i, a, d);
        case Fe:
          return kC(i, a, d);
        case Me:
          return GC(i, a, d);
        case be: {
          var It = a.type, Gn = a.pendingProps, Wn = Xr(It, Gn);
          if (a.type !== a.elementType) {
            var fe = It.propTypes;
            fe && Mr(
              fe,
              Wn,
              // Resolved for outer only
              "prop",
              et(It)
            );
          }
          return Wn = Xr(It.type, Wn), fE(i, a, It, Wn, d);
        }
        case Oe:
          return dE(i, a, a.type, a.pendingProps, d);
        case ve: {
          var Ce = a.type, le = a.pendingProps, je = a.elementType === Ce ? le : Xr(Ce, le);
          return CC(i, a, Ce, je, d);
        }
        case Ye:
          return wE(i, a, d);
        case Ge:
          break;
        case gt:
          return hE(i, a, d);
      }
      throw new Error("Unknown unit of work tag (" + a.tag + "). This error is likely caused by a bug in React. Please file an issue.");
    }
    function qC(i, a, d) {
      switch (zy(a), a.tag) {
        case k: {
          var m = a.type;
          Br(m) && $o(a);
          var y = a.flags;
          return y & Oi ? (a.flags = y & ~Oi | _t, (a.mode & fn) !== Vt && T0(a), a) : null;
        }
        case N: {
          vf(a), fu(a), t0();
          var w = a.flags;
          return (w & Oi) !== de && (w & _t) === de ? (a.flags = w & ~Oi | _t, a) : null;
        }
        case K:
          return Qy(a), null;
        case ne: {
          yf(a);
          {
            var P = a.memoizedState;
            if (P !== null && P.dehydrated !== null) {
              if (a.alternate === null)
                throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
              pf();
            }
          }
          var I = a.flags;
          return I & Oi ? (a.flags = I & ~Oi | _t, (a.mode & fn) !== Vt && T0(a), a) : null;
        }
        case Ye:
          return yf(a), null;
        case X:
          return vf(a), null;
        case Fe:
          var z = a.type._context;
          return D(z, a), null;
        case gt:
        case Pt:
          return r_(a), null;
        case Dt:
          return null;
        default:
          return null;
      }
    }
    function LE(i, a, d) {
      switch (zy(a), a.tag) {
        case k: {
          var m = a.type.childContextTypes;
          m != null && $o(a);
          break;
        }
        case N: {
          vf(a), fu(a), t0();
          break;
        }
        case K: {
          Qy(a);
          break;
        }
        case X:
          vf(a);
          break;
        case ne:
          yf(a);
          break;
        case Ye:
          yf(a);
          break;
        case Fe:
          var y = a.type._context;
          D(y, a);
          break;
        case gt:
        case Pt:
          r_(a);
          break;
      }
    }
    function PE(i, a, d, m, y, w, P, I, z) {
      var Z = Array.prototype.slice.call(arguments, 3);
      try {
        a.apply(d, Z);
      } catch ($) {
        this.onError($);
      }
    }
    var DE = PE;
    if (typeof window < "u" && typeof window.dispatchEvent == "function" && typeof document < "u" && typeof document.createEvent == "function") {
      var B0 = document.createElement("react");
      DE = function(a, d, m, y, w, P, I, z, Z) {
        if (typeof document > "u" || document === null)
          throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
        var $ = document.createEvent("Event"), oe = !1, ye = !0, we = window.event, ze = Object.getOwnPropertyDescriptor(window, "event");
        function We() {
          B0.removeEventListener(Ce, Xt, !1), typeof window.event < "u" && window.hasOwnProperty("event") && (window.event = we);
        }
        var Rt = Array.prototype.slice.call(arguments, 3);
        function Xt() {
          oe = !0, We(), d.apply(m, Rt), ye = !1;
        }
        var It, Gn = !1, Wn = !1;
        function fe(le) {
          if (It = le.error, Gn = !0, It === null && le.colno === 0 && le.lineno === 0 && (Wn = !0), le.defaultPrevented && It != null && typeof It == "object")
            try {
              It._suppressLogging = !0;
            } catch {
            }
        }
        var Ce = "react-" + (a || "invokeguardedcallback");
        if (window.addEventListener("error", fe), B0.addEventListener(Ce, Xt, !1), $.initEvent(Ce, !1, !1), B0.dispatchEvent($), ze && Object.defineProperty(window, "event", ze), oe && ye && (Gn ? Wn && (It = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.")) : It = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`), this.onError(It)), window.removeEventListener("error", fe), !oe)
          return We(), PE.apply(this, arguments);
      };
    }
    var YC = DE, Nh = !1, tv = null, jC = {
      onError: function(i) {
        Nh = !0, tv = i;
      }
    };
    function NE(i, a, d, m, y, w, P, I, z) {
      Nh = !1, tv = null, YC.apply(jC, arguments);
    }
    function ZC() {
      return Nh;
    }
    function UE() {
      if (Nh) {
        var i = tv;
        return Nh = !1, tv = null, i;
      } else
        throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    var IE = null;
    IE = /* @__PURE__ */ new Set();
    var nv = !1, Cl = !1, JC = typeof WeakSet == "function" ? WeakSet : Set, lt = null, Tf = null, bf = null;
    function er(i) {
      NE(null, function() {
        throw i;
      }), UE();
    }
    var QC = function(i, a) {
      if (a.props = i.memoizedProps, a.state = i.memoizedState, i.mode & fn)
        try {
          Va(), a.componentWillUnmount();
        } finally {
          Ha(i);
        }
      else
        a.componentWillUnmount();
    };
    function OE(i, a) {
      try {
        Mo(gi, i);
      } catch (d) {
        er(d), tr(i, a, d);
      }
    }
    function H0(i, a, d) {
      try {
        QC(i, d);
      } catch (m) {
        er(m), tr(i, a, m);
      }
    }
    function KC(i, a, d) {
      try {
        d.componentDidMount();
      } catch (m) {
        er(m), tr(i, a, m);
      }
    }
    function FE(i, a) {
      try {
        BE(i);
      } catch (d) {
        er(d), tr(i, a, d);
      }
    }
    function iv(i, a) {
      var d = i.ref;
      if (d !== null)
        if (typeof d == "function") {
          var m;
          try {
            if (Y && B && i.mode & fn)
              try {
                Va(), m = d(null);
              } finally {
                Ha(i);
              }
            else
              m = d(null);
          } catch (y) {
            er(y), tr(i, a, y);
          }
          typeof m == "function" && h("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", G(i));
        } else
          d.current = null;
    }
    function rv(i, a, d) {
      try {
        d();
      } catch (m) {
        er(m), tr(i, a, m);
      }
    }
    var zE = !1;
    function $C(i, a) {
      xr(i.containerInfo), lt = a, e2();
      var d = zE;
      return zE = !1, d;
    }
    function e2() {
      for (; lt !== null; ) {
        var i = lt, a = i.child;
        (i.subtreeFlags & tt) !== de && a !== null ? (ka(a, i), lt = a) : t2();
      }
    }
    function t2() {
      for (; lt !== null; ) {
        var i = lt;
        pn(i);
        try {
          n2(i);
        } catch (d) {
          er(d), tr(i, i.return, d);
        }
        Ri();
        var a = i.sibling;
        if (a !== null) {
          ka(a, i.return), lt = a;
          return;
        }
        lt = i.return;
      }
    }
    function n2(i) {
      var a = i.alternate, d = i.flags;
      if ((d & Gi) !== de) {
        switch (pn(i), i.tag) {
          case H:
          case Q:
          case Oe:
            break;
          case k: {
            if (a !== null) {
              var m = a.memoizedProps, y = a.memoizedState, w = i.stateNode;
              i.type === i.elementType && !Iu && (w.props !== i.memoizedProps && h("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", G(i) || "instance"), w.state !== i.memoizedState && h("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", G(i) || "instance"));
              var P = w.getSnapshotBeforeUpdate(i.elementType === i.type ? m : Xr(i.type, m), y);
              {
                var I = IE;
                P === void 0 && !I.has(i.type) && (I.add(i.type), h("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", G(i)));
              }
              w.__reactInternalSnapshotBeforeUpdate = P;
            }
            break;
          }
          case N: {
            if (ea) {
              var z = i.stateNode;
              yy(z.containerInfo);
            }
            break;
          }
          case K:
          case J:
          case X:
          case ve:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        Ri();
      }
    }
    function Yr(i, a, d) {
      var m = a.updateQueue, y = m !== null ? m.lastEffect : null;
      if (y !== null) {
        var w = y.next, P = w;
        do {
          if ((P.tag & i) === i) {
            var I = P.destroy;
            P.destroy = void 0, I !== void 0 && ((i & Ki) !== Is ? or(a) : (i & gi) !== Is && Su(a), rv(a, d, I), (i & Ki) !== Is ? oh() : (i & gi) !== Is && sf());
          }
          P = P.next;
        } while (P !== w);
      }
    }
    function Mo(i, a) {
      var d = a.updateQueue, m = d !== null ? d.lastEffect : null;
      if (m !== null) {
        var y = m.next, w = y;
        do {
          if ((w.tag & i) === i) {
            (i & Ki) !== Is ? sh(a) : (i & gi) !== Is && lh(a);
            var P = w.create;
            w.destroy = P(), (i & Ki) !== Is ? xu() : (i & gi) !== Is && vl();
            {
              var I = w.destroy;
              if (I !== void 0 && typeof I != "function") {
                var z = void 0;
                (w.tag & gi) !== de ? z = "useLayoutEffect" : (w.tag & wl) !== de ? z = "useInsertionEffect" : z = "useEffect";
                var Z = void 0;
                I === null ? Z = " You returned null. If your effect does not require clean up, return undefined (or nothing)." : typeof I.then == "function" ? Z = `

It looks like you wrote ` + z + `(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:

` + z + `(() => {
  async function fetchData() {
    // You can await here
    const response = await MyAPI.getData(someId);
    // ...
  }
  fetchData();
}, [someId]); // Or [] if effect doesn't need props or state

Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching` : Z = " You returned: " + I, h("%s must not return anything besides a function, which is used for clean-up.%s", z, Z);
              }
            }
          }
          w = w.next;
        } while (w !== y);
      }
    }
    function i2(i, a) {
      if ((a.flags & Ze) !== de)
        switch (a.tag) {
          case ue: {
            var d = a.stateNode.passiveEffectDuration, m = a.memoizedProps, y = m.id, w = m.onPostCommit, P = $M(), I = a.alternate === null ? "mount" : "update";
            KM() && (I = "nested-update"), typeof w == "function" && w(y, I, d, P);
            var z = a.return;
            e:
              for (; z !== null; ) {
                switch (z.tag) {
                  case N:
                    var Z = z.stateNode;
                    Z.passiveEffectDuration += d;
                    break e;
                  case ue:
                    var $ = z.stateNode;
                    $.passiveEffectDuration += d;
                    break e;
                }
                z = z.return;
              }
            break;
          }
        }
    }
    function r2(i, a, d, m) {
      if ((d.flags & At) !== de)
        switch (d.tag) {
          case H:
          case Q:
          case Oe: {
            if (!Cl)
              if (d.mode & fn)
                try {
                  Va(), Mo(gi | $n, d);
                } finally {
                  Ha(d);
                }
              else
                Mo(gi | $n, d);
            break;
          }
          case k: {
            var y = d.stateNode;
            if (d.flags & Ze && !Cl)
              if (a === null)
                if (d.type === d.elementType && !Iu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", G(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", G(d) || "instance")), d.mode & fn)
                  try {
                    Va(), y.componentDidMount();
                  } finally {
                    Ha(d);
                  }
                else
                  y.componentDidMount();
              else {
                var w = d.elementType === d.type ? a.memoizedProps : Xr(d.type, a.memoizedProps), P = a.memoizedState;
                if (d.type === d.elementType && !Iu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", G(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", G(d) || "instance")), d.mode & fn)
                  try {
                    Va(), y.componentDidUpdate(w, P, y.__reactInternalSnapshotBeforeUpdate);
                  } finally {
                    Ha(d);
                  }
                else
                  y.componentDidUpdate(w, P, y.__reactInternalSnapshotBeforeUpdate);
              }
            var I = d.updateQueue;
            I !== null && (d.type === d.elementType && !Iu && (y.props !== d.memoizedProps && h("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", G(d) || "instance"), y.state !== d.memoizedState && h("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", G(d) || "instance")), aM(d, I, y));
            break;
          }
          case N: {
            var z = d.updateQueue;
            if (z !== null) {
              var Z = null;
              if (d.child !== null)
                switch (d.child.tag) {
                  case K:
                    Z = qi(d.child.stateNode);
                    break;
                  case k:
                    Z = d.child.stateNode;
                    break;
                }
              aM(d, z, Z);
            }
            break;
          }
          case K: {
            var $ = d.stateNode;
            if (a === null && d.flags & Ze) {
              var oe = d.type, ye = d.memoizedProps;
              py($, oe, ye, d);
            }
            break;
          }
          case J:
            break;
          case X:
            break;
          case ue: {
            {
              var we = d.memoizedProps, ze = we.onCommit, We = we.onRender, Rt = d.stateNode.effectDuration, Xt = $M(), It = a === null ? "mount" : "update";
              KM() && (It = "nested-update"), typeof We == "function" && We(d.memoizedProps.id, It, d.actualDuration, d.treeBaseDuration, d.actualStartTime, Xt);
              {
                typeof ze == "function" && ze(d.memoizedProps.id, It, Rt, Xt), yL(d);
                var Gn = d.return;
                e:
                  for (; Gn !== null; ) {
                    switch (Gn.tag) {
                      case N:
                        var Wn = Gn.stateNode;
                        Wn.effectDuration += Rt;
                        break e;
                      case ue:
                        var fe = Gn.stateNode;
                        fe.effectDuration += Rt;
                        break e;
                    }
                    Gn = Gn.return;
                  }
              }
            }
            break;
          }
          case ne: {
            h2(i, d);
            break;
          }
          case Ye:
          case ve:
          case Ge:
          case gt:
          case Pt:
            break;
          default:
            throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
      Cl || d.flags & fi && BE(d);
    }
    function a2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          if (i.mode & fn)
            try {
              Va(), OE(i, i.return);
            } finally {
              Ha(i);
            }
          else
            OE(i, i.return);
          break;
        }
        case k: {
          var a = i.stateNode;
          typeof a.componentDidMount == "function" && KC(i, i.return, a), FE(i, i.return);
          break;
        }
        case K: {
          FE(i, i.return);
          break;
        }
      }
    }
    function s2(i, a) {
      var d = null;
      if (ea)
        for (var m = i; ; ) {
          if (m.tag === K) {
            if (d === null) {
              d = m;
              var y = m.stateNode;
              a ? vy(y) : gy(m.stateNode, m.memoizedProps);
            }
          } else if (m.tag === J) {
            if (d === null) {
              var w = m.stateNode;
              a ? ba(w) : wc(w, m.memoizedProps);
            }
          } else if (!((m.tag === gt || m.tag === Pt) && m.memoizedState !== null && m !== i)) {
            if (m.child !== null) {
              m.child.return = m, m = m.child;
              continue;
            }
          }
          if (m === i)
            return;
          for (; m.sibling === null; ) {
            if (m.return === null || m.return === i)
              return;
            d === m && (d = null), m = m.return;
          }
          d === m && (d = null), m.sibling.return = m.return, m = m.sibling;
        }
    }
    function BE(i) {
      var a = i.ref;
      if (a !== null) {
        var d = i.stateNode, m;
        switch (i.tag) {
          case K:
            m = qi(d);
            break;
          default:
            m = d;
        }
        if (typeof a == "function") {
          var y;
          if (i.mode & fn)
            try {
              Va(), y = a(m);
            } finally {
              Ha(i);
            }
          else
            y = a(m);
          typeof y == "function" && h("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", G(i));
        } else
          a.hasOwnProperty("current") || h("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", G(i)), a.current = m;
      }
    }
    function o2(i) {
      var a = i.ref;
      if (a !== null)
        if (typeof a == "function")
          if (i.mode & fn)
            try {
              Va(), a(null);
            } finally {
              Ha(i);
            }
          else
            a(null);
        else
          a.current = null;
    }
    function HE(i, a, d) {
      switch (li(a), a.tag) {
        case H:
        case Q:
        case be:
        case Oe: {
          var m = a.updateQueue;
          if (m !== null) {
            var y = m.lastEffect;
            if (y !== null) {
              var w = y.next, P = w;
              do {
                var I = P, z = I.destroy, Z = I.tag;
                z !== void 0 && ((Z & wl) !== Is ? rv(a, d, z) : (Z & gi) !== Is && (Su(a), a.mode & fn ? (Va(), rv(a, d, z), Ha(a)) : rv(a, d, z), sf())), P = P.next;
              } while (P !== w);
            }
          }
          return;
        }
        case k: {
          iv(a, d);
          var $ = a.stateNode;
          typeof $.componentWillUnmount == "function" && H0(a, d, $);
          return;
        }
        case K: {
          iv(a, d);
          return;
        }
        case X: {
          ea ? qE(i, a, d) : eu && u2(a);
          return;
        }
        case Ue:
          return;
        case Ge:
          return;
      }
    }
    function VE(i, a, d) {
      for (var m = a; ; ) {
        if (HE(i, m, d), m.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        (!ea || m.tag !== X)) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === a)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === a)
            return;
          m = m.return;
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function l2(i) {
      var a = i.alternate;
      a !== null && (a.return = null), i.return = null;
    }
    function kE(i) {
      var a = i.alternate;
      a !== null && (i.alternate = null, kE(a));
      {
        if (i.child = null, i.deletions = null, i.sibling = null, i.tag === K) {
          var d = i.stateNode;
          d !== null && wd(d);
        }
        i.stateNode = null, i._debugOwner = null, i.return = null, i.dependencies = null, i.memoizedProps = null, i.memoizedState = null, i.pendingProps = null, i.stateNode = null, i.updateQueue = null;
      }
    }
    function u2(i) {
      if (eu) {
        var a = i.stateNode, d = a.containerInfo, m = nu(d);
        Ac(d, m);
      }
    }
    function c2(i) {
      if (eu) {
        switch (i.tag) {
          case k:
          case K:
          case J:
            return;
          case N:
          case X: {
            var a = i.stateNode, d = a.containerInfo, m = a.pendingChildren;
            Ac(d, m);
            return;
          }
        }
        throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
      }
    }
    function f2(i) {
      for (var a = i.return; a !== null; ) {
        if (GE(a))
          return a;
        a = a.return;
      }
      throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function GE(i) {
      return i.tag === K || i.tag === N || i.tag === X;
    }
    function WE(i) {
      var a = i;
      e:
        for (; ; ) {
          for (; a.sibling === null; ) {
            if (a.return === null || GE(a.return))
              return null;
            a = a.return;
          }
          for (a.sibling.return = a.return, a = a.sibling; a.tag !== K && a.tag !== J && a.tag !== Ue; ) {
            if (a.flags & Ke || a.child === null || a.tag === X)
              continue e;
            a.child.return = a, a = a.child;
          }
          if (!(a.flags & Ke))
            return a.stateNode;
        }
    }
    function XE(i) {
      if (ea) {
        var a = f2(i);
        switch (a.tag) {
          case K: {
            var d = a.stateNode;
            a.flags & gn && (Ld(d), a.flags &= ~gn);
            var m = WE(i);
            k0(i, m, d);
            break;
          }
          case N:
          case X: {
            var y = a.stateNode.containerInfo, w = WE(i);
            V0(i, w, y);
            break;
          }
          default:
            throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
      }
    }
    function V0(i, a, d) {
      var m = i.tag, y = m === K || m === J;
      if (y) {
        var w = i.stateNode;
        a ? Za(d, w, a) : Tc(d, w);
      } else if (m !== X) {
        var P = i.child;
        if (P !== null) {
          V0(P, a, d);
          for (var I = P.sibling; I !== null; )
            V0(I, a, d), I = I.sibling;
        }
      }
    }
    function k0(i, a, d) {
      var m = i.tag, y = m === K || m === J;
      if (y) {
        var w = i.stateNode;
        a ? Ta(d, w, a) : hy(d, w);
      } else if (m !== X) {
        var P = i.child;
        if (P !== null) {
          k0(P, a, d);
          for (var I = P.sibling; I !== null; )
            k0(I, a, d), I = I.sibling;
        }
      }
    }
    function qE(i, a, d) {
      for (var m = a, y = !1, w, P; ; ) {
        if (!y) {
          var I = m.return;
          e:
            for (; ; ) {
              if (I === null)
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              var z = I.stateNode;
              switch (I.tag) {
                case K:
                  w = z, P = !1;
                  break e;
                case N:
                  w = z.containerInfo, P = !0;
                  break e;
                case X:
                  w = z.containerInfo, P = !0;
                  break e;
              }
              I = I.return;
            }
          y = !0;
        }
        if (m.tag === K || m.tag === J)
          VE(i, m, d), P ? Cd(w, m.stateNode) : bc(w, m.stateNode);
        else if (m.tag === Ue)
          P ? Kp(w, m.stateNode) : Qp(w, m.stateNode);
        else if (m.tag === X) {
          if (m.child !== null) {
            w = m.stateNode.containerInfo, P = !0, m.child.return = m, m = m.child;
            continue;
          }
        } else if (HE(i, m, d), m.child !== null) {
          m.child.return = m, m = m.child;
          continue;
        }
        if (m === a)
          return;
        for (; m.sibling === null; ) {
          if (m.return === null || m.return === a)
            return;
          m = m.return, m.tag === X && (y = !1);
        }
        m.sibling.return = m.return, m = m.sibling;
      }
    }
    function d2(i, a, d) {
      ea ? qE(i, a, d) : VE(i, a, d), l2(a);
    }
    function G0(i, a) {
      if (!ea) {
        switch (a.tag) {
          case H:
          case Q:
          case be:
          case Oe: {
            if (Yr(wl | $n, a, a.return), Mo(wl | $n, a), a.mode & fn)
              try {
                Va(), Yr(gi | $n, a, a.return);
              } finally {
                Ha(a);
              }
            else
              Yr(gi | $n, a, a.return);
            return;
          }
          case ue:
            return;
          case ne: {
            YE(a), av(a);
            return;
          }
          case Ye: {
            av(a);
            return;
          }
          case N: {
            if (Zi && i !== null) {
              var d = i.memoizedState;
              if (d.isDehydrated) {
                var m = a.stateNode;
                Pc(m.containerInfo);
              }
            }
            break;
          }
          case gt:
          case Pt:
            return;
        }
        c2(a);
        return;
      }
      switch (a.tag) {
        case H:
        case Q:
        case be:
        case Oe: {
          if (Yr(wl | $n, a, a.return), Mo(wl | $n, a), a.mode & fn)
            try {
              Va(), Yr(gi | $n, a, a.return);
            } finally {
              Ha(a);
            }
          else
            Yr(gi | $n, a, a.return);
          return;
        }
        case k:
          return;
        case K: {
          var y = a.stateNode;
          if (y != null) {
            var w = a.memoizedProps, P = i !== null ? i.memoizedProps : w, I = a.type, z = a.updateQueue;
            a.updateQueue = null, z !== null && my(y, z, I, P, w, a);
          }
          return;
        }
        case J: {
          if (a.stateNode === null)
            throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
          var Z = a.stateNode, $ = a.memoizedProps, oe = i !== null ? i.memoizedProps : $;
          Ea(Z, oe, $);
          return;
        }
        case N: {
          if (Zi && i !== null) {
            var ye = i.memoizedState;
            if (ye.isDehydrated) {
              var we = a.stateNode;
              Pc(we.containerInfo);
            }
          }
          return;
        }
        case ue:
          return;
        case ne: {
          YE(a), av(a);
          return;
        }
        case Ye: {
          av(a);
          return;
        }
        case ve:
          return;
      }
      throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
    }
    function YE(i) {
      i.memoizedState;
    }
    function h2(i, a) {
      if (Zi) {
        var d = a.memoizedState;
        if (d === null) {
          var m = a.alternate;
          if (m !== null) {
            var y = m.memoizedState;
            if (y !== null) {
              var w = y.dehydrated;
              w !== null && Dc(w);
            }
          }
        }
      }
    }
    function av(i) {
      var a = i.updateQueue;
      if (a !== null) {
        i.updateQueue = null;
        var d = i.stateNode;
        d === null && (d = i.stateNode = new JC()), a.forEach(function(m) {
          var y = bL.bind(null, i, m);
          if (!d.has(m)) {
            if (d.add(m), sr)
              if (Tf !== null && bf !== null)
                Gh(bf, Tf);
              else
                throw Error("Expected finished root and lanes to be set. This is a bug in React.");
            m.then(y, y);
          }
        });
      }
    }
    function p2(i) {
      ea && Ld(i.stateNode);
    }
    function m2(i, a, d) {
      Tf = d, bf = i, lt = a, v2(i, d), Tf = null, bf = null;
    }
    function v2(i, a) {
      for (; lt !== null; ) {
        var d = lt, m = d.deletions;
        if (m !== null)
          for (var y = 0; y < m.length; y++) {
            var w = m[y];
            try {
              d2(i, w, d);
            } catch (I) {
              er(I), tr(w, d, I);
            }
          }
        var P = d.child;
        (d.subtreeFlags & yt) !== de && P !== null ? (ka(P, d), lt = P) : g2(i, a);
      }
    }
    function g2(i, a) {
      for (; lt !== null; ) {
        var d = lt;
        pn(d);
        try {
          y2(d, i, a);
        } catch (y) {
          er(y), tr(d, d.return, y);
        }
        Ri();
        var m = d.sibling;
        if (m !== null) {
          ka(m, d.return), lt = m;
          return;
        }
        lt = d.return;
      }
    }
    function y2(i, a, d) {
      var m = i.flags;
      if (m & gn && p2(i), m & fi) {
        var y = i.alternate;
        y !== null && o2(y);
      }
      if (m & _r)
        switch (i.tag) {
          case ne: {
            var w = i.memoizedState, P = w !== null;
            if (P) {
              var I = i.alternate, z = I !== null && I.memoizedState !== null;
              z || cL();
            }
            break;
          }
          case gt: {
            var Z = i.memoizedState, $ = Z !== null, oe = i.alternate, ye = oe !== null && oe.memoizedState !== null, we = i;
            ea && s2(we, $);
            {
              if ($ && !ye && (we.mode & Mn) !== Vt) {
                lt = we;
                for (var ze = we.child; ze !== null; )
                  lt = ze, x2(ze), ze = ze.sibling;
              }
              break;
            }
          }
        }
      var We = m & (Ke | Ze | Wi);
      switch (We) {
        case Ke: {
          XE(i), i.flags &= ~Ke;
          break;
        }
        case bn: {
          XE(i), i.flags &= ~Ke;
          var Rt = i.alternate;
          G0(Rt, i);
          break;
        }
        case Wi: {
          i.flags &= ~Wi;
          break;
        }
        case _c: {
          i.flags &= ~Wi;
          var Xt = i.alternate;
          G0(Xt, i);
          break;
        }
        case Ze: {
          var It = i.alternate;
          G0(It, i);
          break;
        }
      }
    }
    function _2(i, a, d) {
      Tf = d, bf = a, lt = i, jE(i, a, d), Tf = null, bf = null;
    }
    function jE(i, a, d) {
      for (var m = (i.mode & Mn) !== Vt; lt !== null; ) {
        var y = lt, w = y.child;
        if (y.tag === gt && m) {
          var P = y.memoizedState !== null, I = P || nv;
          if (I) {
            W0(i, a, d);
            continue;
          } else {
            var z = y.alternate, Z = z !== null && z.memoizedState !== null, $ = Z || Cl, oe = nv, ye = Cl;
            nv = I, Cl = $, Cl && !ye && (lt = y, S2(y));
            for (var we = w; we !== null; )
              lt = we, jE(
                we,
                // New root; bubble back up to here and stop.
                a,
                d
              ), we = we.sibling;
            lt = y, nv = oe, Cl = ye, W0(i, a, d);
            continue;
          }
        }
        (y.subtreeFlags & At) !== de && w !== null ? (ka(w, y), lt = w) : W0(i, a, d);
      }
    }
    function W0(i, a, d) {
      for (; lt !== null; ) {
        var m = lt;
        if ((m.flags & At) !== de) {
          var y = m.alternate;
          pn(m);
          try {
            r2(a, y, m, d);
          } catch (P) {
            er(P), tr(m, m.return, P);
          }
          Ri();
        }
        if (m === i) {
          lt = null;
          return;
        }
        var w = m.sibling;
        if (w !== null) {
          ka(w, m.return), lt = w;
          return;
        }
        lt = m.return;
      }
    }
    function x2(i) {
      for (; lt !== null; ) {
        var a = lt, d = a.child;
        switch (a.tag) {
          case H:
          case Q:
          case be:
          case Oe: {
            if (a.mode & fn)
              try {
                Va(), Yr(gi, a, a.return);
              } finally {
                Ha(a);
              }
            else
              Yr(gi, a, a.return);
            break;
          }
          case k: {
            iv(a, a.return);
            var m = a.stateNode;
            typeof m.componentWillUnmount == "function" && H0(a, a.return, m);
            break;
          }
          case K: {
            iv(a, a.return);
            break;
          }
          case gt: {
            var y = a.memoizedState !== null;
            if (y) {
              ZE(i);
              continue;
            }
            break;
          }
        }
        d !== null ? (d.return = a, lt = d) : ZE(i);
      }
    }
    function ZE(i) {
      for (; lt !== null; ) {
        var a = lt;
        if (a === i) {
          lt = null;
          return;
        }
        var d = a.sibling;
        if (d !== null) {
          d.return = a.return, lt = d;
          return;
        }
        lt = a.return;
      }
    }
    function S2(i) {
      for (; lt !== null; ) {
        var a = lt, d = a.child;
        if (a.tag === gt) {
          var m = a.memoizedState !== null;
          if (m) {
            JE(i);
            continue;
          }
        }
        d !== null ? (d.return = a, lt = d) : JE(i);
      }
    }
    function JE(i) {
      for (; lt !== null; ) {
        var a = lt;
        pn(a);
        try {
          a2(a);
        } catch (m) {
          er(m), tr(a, a.return, m);
        }
        if (Ri(), a === i) {
          lt = null;
          return;
        }
        var d = a.sibling;
        if (d !== null) {
          d.return = a.return, lt = d;
          return;
        }
        lt = a.return;
      }
    }
    function M2(i, a) {
      lt = a, E2(a, i);
    }
    function E2(i, a) {
      for (; lt !== null; ) {
        var d = lt, m = d.child;
        (d.subtreeFlags & Nt) !== de && m !== null ? (ka(m, d), lt = m) : T2(i, a);
      }
    }
    function T2(i, a) {
      for (; lt !== null; ) {
        var d = lt;
        if ((d.flags & rr) !== de) {
          pn(d);
          try {
            b2(a, d);
          } catch (y) {
            er(y), tr(d, d.return, y);
          }
          Ri();
        }
        if (d === i) {
          lt = null;
          return;
        }
        var m = d.sibling;
        if (m !== null) {
          ka(m, d.return), lt = m;
          return;
        }
        lt = d.return;
      }
    }
    function b2(i, a) {
      switch (a.tag) {
        case H:
        case Q:
        case Oe: {
          if (a.mode & fn) {
            E0();
            try {
              Mo(Ki | $n, a);
            } finally {
              M0(a);
            }
          } else
            Mo(Ki | $n, a);
          break;
        }
      }
    }
    function w2(i) {
      lt = i, A2();
    }
    function A2() {
      for (; lt !== null; ) {
        var i = lt, a = i.child;
        if ((lt.flags & an) !== de) {
          var d = i.deletions;
          if (d !== null) {
            for (var m = 0; m < d.length; m++) {
              var y = d[m];
              lt = y, L2(y, i);
            }
            {
              var w = i.alternate;
              if (w !== null) {
                var P = w.child;
                if (P !== null) {
                  w.child = null;
                  do {
                    var I = P.sibling;
                    P.sibling = null, P = I;
                  } while (P !== null);
                }
              }
            }
            lt = i;
          }
        }
        (i.subtreeFlags & Nt) !== de && a !== null ? (ka(a, i), lt = a) : R2();
      }
    }
    function R2() {
      for (; lt !== null; ) {
        var i = lt;
        (i.flags & rr) !== de && (pn(i), C2(i), Ri());
        var a = i.sibling;
        if (a !== null) {
          ka(a, i.return), lt = a;
          return;
        }
        lt = i.return;
      }
    }
    function C2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          i.mode & fn ? (E0(), Yr(Ki | $n, i, i.return), M0(i)) : Yr(Ki | $n, i, i.return);
          break;
        }
      }
    }
    function L2(i, a) {
      for (; lt !== null; ) {
        var d = lt;
        pn(d), D2(d, a), Ri();
        var m = d.child;
        m !== null ? (ka(m, d), lt = m) : P2(i);
      }
    }
    function P2(i) {
      for (; lt !== null; ) {
        var a = lt, d = a.sibling, m = a.return;
        if (kE(a), a === i) {
          lt = null;
          return;
        }
        if (d !== null) {
          ka(d, m), lt = d;
          return;
        }
        lt = m;
      }
    }
    function D2(i, a) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          i.mode & fn ? (E0(), Yr(Ki, i, a), M0(i)) : Yr(Ki, i, a);
          break;
        }
      }
    }
    var QE = !1;
    function ka(i, a) {
      !QE && i.return !== a && (QE = !0, h("Internal React error: Return pointer is inconsistent with parent.")), i.return = a;
    }
    function N2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          try {
            Mo(gi | $n, i);
          } catch (d) {
            er(d), tr(i, i.return, d);
          }
          break;
        }
        case k: {
          var a = i.stateNode;
          try {
            a.componentDidMount();
          } catch (d) {
            er(d), tr(i, i.return, d);
          }
          break;
        }
      }
    }
    function U2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          try {
            Mo(Ki | $n, i);
          } catch (a) {
            er(a), tr(i, i.return, a);
          }
          break;
        }
      }
    }
    function I2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe: {
          try {
            Yr(gi | $n, i, i.return);
          } catch (d) {
            er(d), tr(i, i.return, d);
          }
          break;
        }
        case k: {
          var a = i.stateNode;
          typeof a.componentWillUnmount == "function" && H0(i, i.return, a);
          break;
        }
      }
    }
    function O2(i) {
      switch (i.tag) {
        case H:
        case Q:
        case Oe:
          try {
            Yr(Ki | $n, i, i.return);
          } catch (a) {
            er(a), tr(i, i.return, a);
          }
      }
    }
    var sv = 0, ov = 1, lv = 2, uv = 3, cv = 4;
    if (typeof Symbol == "function" && Symbol.for) {
      var Uh = Symbol.for;
      sv = Uh("selector.component"), ov = Uh("selector.has_pseudo_class"), lv = Uh("selector.role"), uv = Uh("selector.test_id"), cv = Uh("selector.text");
    }
    function F2(i) {
      return {
        $$typeof: sv,
        value: i
      };
    }
    function z2(i) {
      return {
        $$typeof: ov,
        value: i
      };
    }
    function B2(i) {
      return {
        $$typeof: lv,
        value: i
      };
    }
    function H2(i) {
      return {
        $$typeof: cv,
        value: i
      };
    }
    function V2(i) {
      return {
        $$typeof: uv,
        value: i
      };
    }
    function X0(i) {
      var a = bd(i);
      if (a != null) {
        if (typeof a.memoizedProps["data-testname"] != "string")
          throw new Error("Invalid host root specified. Should be either a React container or a node with a testname attribute.");
        return a;
      } else {
        var d = Yp(i);
        if (d === null)
          throw new Error("Could not find React container within specified host subtree.");
        return d.stateNode.current;
      }
    }
    function q0(i, a) {
      switch (a.$$typeof) {
        case sv:
          if (i.type === a.value)
            return !0;
          break;
        case ov:
          return k2(i, a.value);
        case lv:
          if (i.tag === K) {
            var d = i.stateNode;
            if (Ad(d, a.value))
              return !0;
          }
          break;
        case cv:
          if (i.tag === K || i.tag === J) {
            var m = fy(i);
            if (m !== null && m.indexOf(a.value) >= 0)
              return !0;
          }
          break;
        case uv:
          if (i.tag === K) {
            var y = i.memoizedProps["data-testname"];
            if (typeof y == "string" && y.toLowerCase() === a.value.toLowerCase())
              return !0;
          }
          break;
        default:
          throw new Error("Invalid selector type specified.");
      }
      return !1;
    }
    function Y0(i) {
      switch (i.$$typeof) {
        case sv:
          var a = et(i.value) || "Unknown";
          return "<" + a + ">";
        case ov:
          return ":has(" + (Y0(i) || "") + ")";
        case lv:
          return '[role="' + i.value + '"]';
        case cv:
          return '"' + i.value + '"';
        case uv:
          return '[data-testname="' + i.value + '"]';
        default:
          throw new Error("Invalid selector type specified.");
      }
    }
    function KE(i, a) {
      for (var d = [], m = [i, 0], y = 0; y < m.length; ) {
        var w = m[y++], P = m[y++], I = a[P];
        if (!(w.tag === K && Xn(w))) {
          for (; I != null && q0(w, I); )
            P++, I = a[P];
          if (P === a.length)
            d.push(w);
          else
            for (var z = w.child; z !== null; )
              m.push(z, P), z = z.sibling;
        }
      }
      return d;
    }
    function k2(i, a) {
      for (var d = [i, 0], m = 0; m < d.length; ) {
        var y = d[m++], w = d[m++], P = a[w];
        if (!(y.tag === K && Xn(y))) {
          for (; P != null && q0(y, P); )
            w++, P = a[w];
          if (w === a.length)
            return !0;
          for (var I = y.child; I !== null; )
            d.push(I, w), I = I.sibling;
        }
      }
      return !1;
    }
    function fv(i, a) {
      if (!Ms)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = X0(i), m = KE(d, a), y = [], w = Array.from(m), P = 0; P < w.length; ) {
        var I = w[P++];
        if (I.tag === K) {
          if (Xn(I))
            continue;
          y.push(I.stateNode);
        } else
          for (var z = I.child; z !== null; )
            w.push(z), z = z.sibling;
      }
      return y;
    }
    function G2(i, a) {
      if (!Ms)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = X0(i), m = 0, y = [], w = [d, 0], P = 0; P < w.length; ) {
        var I = w[P++], z = w[P++], Z = a[z];
        if (!(I.tag === K && Xn(I)) && (q0(I, Z) && (y.push(Y0(Z)), z++, z > m && (m = z)), z < a.length))
          for (var $ = I.child; $ !== null; )
            w.push($, z), $ = $.sibling;
      }
      if (m < a.length) {
        for (var oe = [], ye = m; ye < a.length; ye++)
          oe.push(Y0(a[ye]));
        return `findAllNodes was able to match part of the selector:
` + ("  " + y.join(" > ") + `

`) + `No matching component was found for:
` + ("  " + oe.join(" > "));
      }
      return null;
    }
    function W2(i, a) {
      if (!Ms)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = fv(i, a), m = [], y = 0; y < d.length; y++)
        m.push(cy(d[y]));
      for (var w = m.length - 1; w > 0; w--)
        for (var P = m[w], I = P.x, z = I + P.width, Z = P.y, $ = Z + P.height, oe = w - 1; oe >= 0; oe--)
          if (w !== oe) {
            var ye = m[oe], we = ye.x, ze = we + ye.width, We = ye.y, Rt = We + ye.height;
            if (I >= we && Z >= We && z <= ze && $ <= Rt) {
              m.splice(w, 1);
              break;
            } else if (I === we && P.width === ye.width && !(Rt < Z) && !(We > $)) {
              We > Z && (ye.height += We - Z, ye.y = Z), Rt < $ && (ye.height = $ - We), m.splice(w, 1);
              break;
            } else if (Z === We && P.height === ye.height && !(ze < I) && !(we > z)) {
              we > I && (ye.width += we - I, ye.x = I), ze < z && (ye.width = z - we), m.splice(w, 1);
              break;
            }
          }
      return m;
    }
    function X2(i, a) {
      if (!Ms)
        throw new Error("Test selector API is not supported by this renderer.");
      for (var d = X0(i), m = KE(d, a), y = Array.from(m), w = 0; w < y.length; ) {
        var P = y[w++];
        if (!Xn(P)) {
          if (P.tag === K) {
            var I = P.stateNode;
            if (dy(I))
              return !0;
          }
          for (var z = P.child; z !== null; )
            y.push(z), z = z.sibling;
        }
      }
      return !1;
    }
    var dv = [];
    function q2() {
      Ms && dv.forEach(function(i) {
        return i();
      });
    }
    function Y2(i, a, d, m) {
      if (!Ms)
        throw new Error("Test selector API is not supported by this renderer.");
      var y = fv(i, a), w = Rd(y, d, m), P = w.disconnect, I = w.observe, z = w.unobserve, Z = function() {
        var $ = fv(i, a);
        y.forEach(function(oe) {
          $.indexOf(oe) < 0 && z(oe);
        }), $.forEach(function(oe) {
          y.indexOf(oe) < 0 && I(oe);
        });
      };
      return dv.push(Z), {
        disconnect: function() {
          var $ = dv.indexOf(Z);
          $ >= 0 && dv.splice($, 1), P();
        }
      };
    }
    var j2 = o.ReactCurrentActQueue;
    function Z2(i) {
      {
        var a = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        ), d = typeof jest < "u";
        return Ec && d && a !== !1;
      }
    }
    function $E() {
      {
        var i = (
          // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
          typeof IS_REACT_ACT_ENVIRONMENT < "u" ? IS_REACT_ACT_ENVIRONMENT : void 0
        );
        return !i && j2.current !== null && h("The current testing environment is not configured to support act(...)"), i;
      }
    }
    var J2 = Math.ceil, j0 = o.ReactCurrentDispatcher, Z0 = o.ReactCurrentOwner, ei = o.ReactCurrentBatchConfig, us = o.ReactCurrentActQueue, Si = (
      /*             */
      0
    ), J0 = (
      /*               */
      1
    ), hr = (
      /*                */
      2
    ), cs = (
      /*                */
      4
    ), Eo = 0, Ih = 1, Ou = 2, hv = 3, Oh = 4, e1 = 5, Q0 = 6, Qt = Si, pr = null, ti = null, Pi = Ie, Bs = Ie, K0 = Aa(Ie), Di = Eo, Fh = null, pv = Ie, zh = Ie, mv = Ie, Bh = null, jr = null, $0 = 0, t1 = 500, n1 = 1 / 0, Q2 = 500;
    function wf() {
      n1 = Jn() + Q2;
    }
    function i1() {
      return n1;
    }
    var vv = !1, e_ = null, Af = null, Fu = !1, To = null, Hh = Ie, t_ = [], K2 = 50, Vh = 0, n_ = null, $2 = 50, gv = 0, kh = Nn, yv = Ie;
    function _v() {
      return pr;
    }
    function Rr() {
      return (Qt & (hr | cs)) !== Si ? Jn() : (kh !== Nn || (kh = Jn()), kh);
    }
    function Ll(i) {
      var a = i.mode;
      if ((a & Mn) === Vt)
        return tn;
      if ((Qt & hr) !== Si && Pi !== Ie)
        return ll(Pi);
      var d = dh() !== mm;
      if (d) {
        if (ei.transition !== null) {
          var m = ei.transition;
          m._updatedFibers || (m._updatedFibers = /* @__PURE__ */ new Set()), m._updatedFibers.add(i);
        }
        return yv === pi && (yv = sm()), yv;
      }
      var y = Er();
      if (y !== pi)
        return y;
      var w = uy();
      return w;
    }
    function eL(i) {
      var a = i.mode;
      return (a & Mn) === Vt ? tn : om();
    }
    function Ni(i, a, d) {
      AL();
      var m = xv(i, a);
      return m === null ? null : (oo(m, a, d), (Qt & hr) !== Ie && m === pr ? LL(i) : (sr && Kd(m, i, a), PL(i), m === pr && ((Qt & hr) === Si && (zh = Gt(zh, a)), Di === Oh && Pl(m, Pi)), Zr(m, d), a === tn && Qt === Si && (i.mode & Mn) === Vt && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
      !us.isBatchingLegacy && (wf(), fh())), m);
    }
    function tL(i, a, d) {
      var m = i.current;
      m.lanes = a, oo(i, a, d), Zr(i, d);
    }
    function xv(i, a) {
      i.lanes = Gt(i.lanes, a);
      var d = i.alternate;
      d !== null && (d.lanes = Gt(d.lanes, a)), d === null && (i.flags & (Ke | Wi)) !== de && g1(i);
      for (var m = i, y = i.return; y !== null; )
        y.childLanes = Gt(y.childLanes, a), d = y.alternate, d !== null ? d.childLanes = Gt(d.childLanes, a) : (y.flags & (Ke | Wi)) !== de && g1(i), m = y, y = y.return;
      if (m.tag === N) {
        var w = m.stateNode;
        return w;
      } else
        return null;
    }
    function r1(i, a) {
      return (
        // TODO: Optimize slightly by comparing to root that fiber belongs to.
        // Requires some refactoring. Not a big deal though since it's rare for
        // concurrent apps to have more than a single root.
        pr !== null && (i.mode & Mn) !== Vt && // If this is a render phase update (i.e. UNSAFE_componentWillReceiveProps),
        // then don't treat this as an interleaved update. This pattern is
        // accompanied by a warning but we haven't fully deprecated it yet. We can
        // remove once the deferRenderPhaseUpdateToNextBatch flag is enabled.
        (Qt & hr) === Si
      );
    }
    function Zr(i, a) {
      var d = i.callbackNode;
      rm(i, a);
      var m = yu(i, i === pr ? Pi : Ie);
      if (m === Ie) {
        d !== null && _1(d), i.callbackNode = null, i.callbackPriority = pi;
        return;
      }
      var y = Da(m), w = i.callbackPriority;
      if (w === y && // Special case related to `act`. If the currently scheduled task is a
      // Scheduler task, rather than an `act` task, cancel it and re-scheduled
      // on the `act` queue.
      !(us.current !== null && d !== l_)) {
        d == null && w !== tn && h("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
        return;
      }
      d != null && _1(d);
      var P;
      if (y === tn)
        i.tag === to ? (us.isBatchingLegacy !== null && (us.didScheduleLegacyUpdate = !0), hm(o1.bind(null, i))) : rs(o1.bind(null, i)), dn ? us.current !== null ? us.current.push(Gr) : qp(function() {
          Qt === Si && Gr();
        }) : Av(fo, Gr), P = null;
      else {
        var I;
        switch (th(m)) {
          case la:
            I = fo;
            break;
          case fl:
            I = _u;
            break;
          case dl:
            I = ns;
            break;
          case nf:
            I = hl;
            break;
          default:
            I = ns;
            break;
        }
        P = Av(I, a1.bind(null, i));
      }
      i.callbackPriority = y, i.callbackNode = P;
    }
    function a1(i, a) {
      if (hC(), kh = Nn, yv = Ie, (Qt & (hr | cs)) !== Si)
        throw new Error("Should not already be working.");
      var d = i.callbackNode, m = Hs();
      if (m && i.callbackNode !== d)
        return null;
      var y = yu(i, i === pr ? Pi : Ie);
      if (y === Ie)
        return null;
      var w = !ao(i, y) && !am(i, y) && !a, P = w ? mL(i, y) : Tv(i, y);
      if (P !== Eo) {
        if (P === Ou) {
          var I = Qc(i);
          I !== Ie && (y = I, P = i_(i, I));
        }
        if (P === Ih) {
          var z = Fh;
          throw zu(i, Ie), Pl(i, y), Zr(i, Jn()), z;
        }
        if (P === Q0)
          Pl(i, y);
        else {
          var Z = !ao(i, y), $ = i.current.alternate;
          if (Z && !iL($)) {
            if (P = Tv(i, y), P === Ou) {
              var oe = Qc(i);
              oe !== Ie && (y = oe, P = i_(i, oe));
            }
            if (P === Ih) {
              var ye = Fh;
              throw zu(i, Ie), Pl(i, y), Zr(i, Jn()), ye;
            }
          }
          i.finishedWork = $, i.finishedLanes = y, nL(i, P, y);
        }
      }
      return Zr(i, Jn()), i.callbackNode === d ? a1.bind(null, i) : null;
    }
    function i_(i, a) {
      var d = Bh;
      if (Ds(i)) {
        var m = zu(i, a);
        m.flags |= Yn, Sr(i.containerInfo);
      }
      var y = Tv(i, a);
      if (y !== Ou) {
        var w = jr;
        jr = d, w !== null && s1(w);
      }
      return y;
    }
    function s1(i) {
      jr === null ? jr = i : jr.push.apply(jr, i);
    }
    function nL(i, a, d) {
      switch (a) {
        case Eo:
        case Ih:
          throw new Error("Root did not complete. This is a bug in React.");
        case Ou: {
          Bu(i, jr);
          break;
        }
        case hv: {
          if (Pl(i, d), Jd(d) && // do not delay if we're inside an act() scope
          !x1()) {
            var m = $0 + t1 - Jn();
            if (m > 10) {
              var y = yu(i, Ie);
              if (y !== Ie)
                break;
              var w = i.suspendedLanes;
              if (!ul(w, d)) {
                Rr(), um(i, w);
                break;
              }
              i.timeoutHandle = Xp(Bu.bind(null, i, jr), m);
              break;
            }
          }
          Bu(i, jr);
          break;
        }
        case Oh: {
          if (Pl(i, d), $c(d))
            break;
          if (!x1()) {
            var P = nm(i, d), I = P, z = Jn() - I, Z = wL(z) - z;
            if (Z > 10) {
              i.timeoutHandle = Xp(Bu.bind(null, i, jr), Z);
              break;
            }
          }
          Bu(i, jr);
          break;
        }
        case e1: {
          Bu(i, jr);
          break;
        }
        default:
          throw new Error("Unknown root exit status.");
      }
    }
    function iL(i) {
      for (var a = i; ; ) {
        if (a.flags & Zs) {
          var d = a.updateQueue;
          if (d !== null) {
            var m = d.stores;
            if (m !== null)
              for (var y = 0; y < m.length; y++) {
                var w = m[y], P = w.getSnapshot, I = w.value;
                try {
                  if (!br(P(), I))
                    return !1;
                } catch {
                  return !1;
                }
              }
          }
        }
        var z = a.child;
        if (a.subtreeFlags & Zs && z !== null) {
          z.return = a, a = z;
          continue;
        }
        if (a === i)
          return !0;
        for (; a.sibling === null; ) {
          if (a.return === null || a.return === i)
            return !0;
          a = a.return;
        }
        a.sibling.return = a.return, a = a.sibling;
      }
      return !0;
    }
    function Pl(i, a) {
      a = so(a, mv), a = so(a, zh), lm(i, a);
    }
    function o1(i) {
      if (pC(), (Qt & (hr | cs)) !== Si)
        throw new Error("Should not already be working.");
      Hs();
      var a = yu(i, Ie);
      if (!Zn(a, tn))
        return Zr(i, Jn()), null;
      var d = Tv(i, a);
      if (i.tag !== to && d === Ou) {
        var m = Qc(i);
        m !== Ie && (a = m, d = i_(i, m));
      }
      if (d === Ih) {
        var y = Fh;
        throw zu(i, Ie), Pl(i, a), Zr(i, Jn()), y;
      }
      if (d === Q0)
        throw new Error("Root did not complete. This is a bug in React.");
      var w = i.current.alternate;
      return i.finishedWork = w, i.finishedLanes = a, Bu(i, jr), Zr(i, Jn()), null;
    }
    function rL(i, a) {
      a !== Ie && (uo(i, Gt(a, tn)), Zr(i, Jn()), (Qt & (hr | cs)) === Si && (wf(), Gr()));
    }
    function aL(i) {
      var a = Er(), d = ei.transition;
      try {
        return ei.transition = null, mi(dl), i();
      } finally {
        mi(a), ei.transition = d;
      }
    }
    function sL(i, a) {
      var d = Qt;
      Qt |= J0;
      try {
        return i(a);
      } finally {
        Qt = d, Qt === Si && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
        !us.isBatchingLegacy && (wf(), fh());
      }
    }
    function oL(i, a, d, m, y) {
      var w = Er(), P = ei.transition;
      try {
        return ei.transition = null, mi(la), i(a, d, m, y);
      } finally {
        mi(w), ei.transition = P, Qt === Si && wf();
      }
    }
    function Sv(i) {
      To !== null && To.tag === to && (Qt & (hr | cs)) === Si && Hs();
      var a = Qt;
      Qt |= J0;
      var d = ei.transition, m = Er();
      try {
        return ei.transition = null, mi(la), i ? i() : void 0;
      } finally {
        mi(m), ei.transition = d, Qt = a, (Qt & (hr | cs)) === Si && Gr();
      }
    }
    function lL() {
      return (Qt & (hr | cs)) !== Si;
    }
    function uL(i) {
      var a = Qt;
      Qt |= J0;
      var d = ei.transition, m = Er();
      try {
        ei.transition = null, mi(la), i();
      } finally {
        mi(m), ei.transition = d, Qt = a, Qt === Si && (wf(), Gr());
      }
    }
    function Mv(i, a) {
      wn(K0, Bs, i), Bs = Gt(Bs, a);
    }
    function r_(i) {
      Bs = K0.current, di(K0, i);
    }
    function zu(i, a) {
      i.finishedWork = null, i.finishedLanes = Ie;
      var d = i.timeoutHandle;
      if (d !== ko && (i.timeoutHandle = ko, Mc(d)), ti !== null)
        for (var m = ti.return; m !== null; ) {
          var y = m.alternate;
          LE(y, m), m = m.return;
        }
      pr = i;
      var w = Hu(i.current, null);
      return ti = w, Pi = Bs = a, Di = Eo, Fh = null, pv = Ie, zh = Ie, mv = Ie, Bh = null, jr = null, Cn(), Wr.discardPendingWarnings(), w;
    }
    function l1(i, a) {
      do {
        var d = ti;
        try {
          if (u(), CM(), Ri(), Z0.current = null, d === null || d.return === null) {
            Di = Ih, Fh = a, ti = null;
            return;
          }
          if (Y && d.mode & fn && qm(d, !0), U)
            if (is(), a !== null && typeof a == "object" && typeof a.then == "function") {
              var m = a;
              of(d, m, Pi);
            } else
              Cs(d, a, Pi);
          _C(i, d.return, d, a, Pi), d1(d);
        } catch (y) {
          a = y, ti === d && d !== null ? (d = d.return, ti = d) : d = ti;
          continue;
        }
        return;
      } while (!0);
    }
    function u1() {
      var i = j0.current;
      return j0.current = Vm, i === null ? Vm : i;
    }
    function c1(i) {
      j0.current = i;
    }
    function cL() {
      $0 = Jn();
    }
    function Ev(i) {
      pv = Gt(i, pv);
    }
    function fL() {
      Di === Eo && (Di = hv);
    }
    function a_() {
      (Di === Eo || Di === hv || Di === Ou) && (Di = Oh), pr !== null && (Kc(pv) || Kc(zh)) && Pl(pr, Pi);
    }
    function dL(i) {
      Di !== Oh && (Di = Ou), Bh === null ? Bh = [i] : Bh.push(i);
    }
    function hL() {
      return Di === Eo;
    }
    function Tv(i, a) {
      var d = Qt;
      Qt |= hr;
      var m = u1();
      if (pr !== i || Pi !== a) {
        if (sr) {
          var y = i.memoizedUpdaters;
          y.size > 0 && (Gh(i, Pi), y.clear()), $d(i, a);
        }
        zu(i, a);
      }
      Eu(a);
      do
        try {
          pL();
          break;
        } catch (w) {
          l1(i, w);
        }
      while (!0);
      if (u(), Qt = d, c1(m), ti !== null)
        throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
      return zi(), pr = null, Pi = Ie, Di;
    }
    function pL() {
      for (; ti !== null; )
        f1(ti);
    }
    function mL(i, a) {
      var d = Qt;
      Qt |= hr;
      var m = u1();
      if (pr !== i || Pi !== a) {
        if (sr) {
          var y = i.memoizedUpdaters;
          y.size > 0 && (Gh(i, Pi), y.clear()), $d(i, a);
        }
        wf(), zu(i, a);
      }
      Eu(a);
      do
        try {
          vL();
          break;
        } catch (w) {
          l1(i, w);
        }
      while (!0);
      return u(), c1(m), Qt = d, ti !== null ? (uf(), Eo) : (zi(), pr = null, Pi = Ie, Di);
    }
    function vL() {
      for (; ti !== null && !dm(); )
        f1(ti);
    }
    function f1(i) {
      var a = i.alternate;
      pn(i);
      var d;
      (i.mode & fn) !== Vt ? (S0(i), d = s_(a, i, Bs), qm(i, !0)) : d = s_(a, i, Bs), Ri(), i.memoizedProps = i.pendingProps, d === null ? d1(i) : ti = d, Z0.current = null;
    }
    function d1(i) {
      var a = i;
      do {
        var d = a.alternate, m = a.return;
        if ((a.flags & xs) === de) {
          pn(a);
          var y = void 0;
          if ((a.mode & fn) === Vt ? y = uE(d, a, Bs) : (S0(a), y = uE(d, a, Bs), qm(a, !1)), Ri(), y !== null) {
            ti = y;
            return;
          }
        } else {
          var w = qC(d, a);
          if (w !== null) {
            w.flags &= xc, ti = w;
            return;
          }
          if ((a.mode & fn) !== Vt) {
            qm(a, !1);
            for (var P = a.actualDuration, I = a.child; I !== null; )
              P += I.actualDuration, I = I.sibling;
            a.actualDuration = P;
          }
          if (m !== null)
            m.flags |= xs, m.subtreeFlags = de, m.deletions = null;
          else {
            Di = Q0, ti = null;
            return;
          }
        }
        var z = a.sibling;
        if (z !== null) {
          ti = z;
          return;
        }
        a = m, ti = a;
      } while (a !== null);
      Di === Eo && (Di = e1);
    }
    function Bu(i, a) {
      var d = Er(), m = ei.transition;
      try {
        ei.transition = null, mi(la), gL(i, a, d);
      } finally {
        ei.transition = m, mi(d);
      }
      return null;
    }
    function gL(i, a, d) {
      do
        Hs();
      while (To !== null);
      if (RL(), (Qt & (hr | cs)) !== Si)
        throw new Error("Should not already be working.");
      var m = i.finishedWork, y = i.finishedLanes;
      if (vi(y), m === null)
        return ml(), null;
      if (y === Ie && h("root.finishedLanes should not be empty during a commit. This is a bug in React."), i.finishedWork = null, i.finishedLanes = Ie, m === i.current)
        throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
      i.callbackNode = null, i.callbackPriority = pi;
      var w = Gt(m.lanes, m.childLanes);
      lo(i, w), i === pr && (pr = null, ti = null, Pi = Ie), ((m.subtreeFlags & Nt) !== de || (m.flags & Nt) !== de) && (Fu || (Fu = !0, Av(ns, function() {
        return Hs(), null;
      })));
      var P = (m.subtreeFlags & (tt | yt | At | Nt)) !== de, I = (m.flags & (tt | yt | At | Nt)) !== de;
      if (P || I) {
        var z = ei.transition;
        ei.transition = null;
        var Z = Er();
        mi(la);
        var $ = Qt;
        Qt |= cs, Z0.current = null, $C(i, m), eE(), m2(i, m, y), Vo(i.containerInfo), i.current = m, Ls(y), _2(m, i, y), lf(), af(), Qt = $, mi(Z), ei.transition = z;
      } else
        i.current = m, eE();
      var oe = Fu;
      if (Fu && (Fu = !1, To = i, Hh = y), w = i.pendingLanes, w === Ie && (Af = null), oe || v1(i.current, !1), Zt(m.stateNode, d), sr && i.memoizedUpdaters.clear(), q2(), Zr(i, Jn()), a !== null)
        for (var ye = i.onRecoverableError, we = 0; we < a.length; we++) {
          var ze = a[we];
          ye(ze);
        }
      if (vv) {
        vv = !1;
        var We = e_;
        throw e_ = null, We;
      }
      return Zn(Hh, tn) && i.tag !== to && Hs(), w = i.pendingLanes, Zn(w, tn) ? (dC(), i === n_ ? Vh++ : (Vh = 0, n_ = i)) : Vh = 0, Gr(), ml(), null;
    }
    function Hs() {
      if (To !== null) {
        var i = th(Hh), a = xy(dl, i), d = ei.transition, m = Er();
        try {
          return ei.transition = null, mi(a), _L();
        } finally {
          mi(m), ei.transition = d;
        }
      }
      return !1;
    }
    function yL(i) {
      t_.push(i), Fu || (Fu = !0, Av(ns, function() {
        return Hs(), null;
      }));
    }
    function _L() {
      if (To === null)
        return !1;
      var i = To, a = Hh;
      if (To = null, Hh = Ie, (Qt & (hr | cs)) !== Si)
        throw new Error("Cannot flush passive effects while already rendering.");
      Mu(a);
      var d = Qt;
      Qt |= cs, w2(i.current), M2(i, i.current);
      {
        var m = t_;
        t_ = [];
        for (var y = 0; y < m.length; y++) {
          var w = m[y];
          i2(i, w);
        }
      }
      uh(), v1(i.current, !0), Qt = d, Gr(), gv = To === null ? 0 : gv + 1, oi(i);
      {
        var P = i.current.stateNode;
        P.effectDuration = 0, P.passiveEffectDuration = 0;
      }
      return !0;
    }
    function h1(i) {
      return Af !== null && Af.has(i);
    }
    function xL(i) {
      Af === null ? Af = /* @__PURE__ */ new Set([i]) : Af.add(i);
    }
    function SL(i) {
      vv || (vv = !0, e_ = i);
    }
    var ML = SL;
    function p1(i, a, d) {
      var m = Ym(d, a), y = nE(i, m, tn);
      Jt(i, y);
      var w = Rr(), P = xv(i, tn);
      P !== null && (oo(P, tn, w), Zr(P, w));
    }
    function tr(i, a, d) {
      if (i.tag === N) {
        p1(i, i, d);
        return;
      }
      var m = null;
      for (m = a; m !== null; ) {
        if (m.tag === N) {
          p1(m, i, d);
          return;
        } else if (m.tag === k) {
          var y = m.type, w = m.stateNode;
          if (typeof y.getDerivedStateFromError == "function" || typeof w.componentDidCatch == "function" && !h1(w)) {
            var P = Ym(d, i), I = w0(m, P, tn);
            Jt(m, I);
            var z = Rr(), Z = xv(m, tn);
            Z !== null && (oo(Z, tn, z), Zr(Z, z));
            return;
          }
        }
        m = m.return;
      }
      h(`Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.

Error message:

%s`, d);
    }
    function EL(i, a, d) {
      var m = i.pingCache;
      m !== null && m.delete(a);
      var y = Rr();
      um(i, d), DL(i), pr === i && ul(Pi, d) && (Di === Oh || Di === hv && Jd(Pi) && Jn() - $0 < t1 ? zu(i, Ie) : mv = Gt(mv, d)), Zr(i, y);
    }
    function m1(i, a) {
      a === pi && (a = eL(i));
      var d = Rr(), m = xv(i, a);
      m !== null && (oo(m, a, d), Zr(m, d));
    }
    function TL(i) {
      var a = i.memoizedState, d = pi;
      a !== null && (d = a.retryLane), m1(i, d);
    }
    function bL(i, a) {
      var d = pi, m;
      switch (i.tag) {
        case ne:
          m = i.stateNode;
          var y = i.memoizedState;
          y !== null && (d = y.retryLane);
          break;
        case Ye:
          m = i.stateNode;
          break;
        default:
          throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
      }
      m !== null && m.delete(a), m1(i, d);
    }
    function wL(i) {
      return i < 120 ? 120 : i < 480 ? 480 : i < 1080 ? 1080 : i < 1920 ? 1920 : i < 3e3 ? 3e3 : i < 4320 ? 4320 : J2(i / 1960) * 1960;
    }
    function AL() {
      if (Vh > K2)
        throw Vh = 0, n_ = null, new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
      gv > $2 && (gv = 0, h("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."));
    }
    function RL() {
      Wr.flushLegacyContextWarning(), Wr.flushPendingUnsafeLifecycleWarnings();
    }
    function v1(i, a) {
      pn(i), bv(i, pe, I2), a && bv(i, he, O2), bv(i, pe, N2), a && bv(i, he, U2), Ri();
    }
    function bv(i, a, d) {
      for (var m = i, y = null; m !== null; ) {
        var w = m.subtreeFlags & a;
        m !== y && m.child !== null && w !== de ? m = m.child : ((m.flags & a) !== de && d(m), m.sibling !== null ? m = m.sibling : m = y = m.return);
      }
    }
    var wv = null;
    function g1(i) {
      {
        if ((Qt & hr) !== Si || !(i.mode & Mn))
          return;
        var a = i.tag;
        if (a !== F && a !== N && a !== k && a !== H && a !== Q && a !== be && a !== Oe)
          return;
        var d = G(i) || "ReactComponent";
        if (wv !== null) {
          if (wv.has(d))
            return;
          wv.add(d);
        } else
          wv = /* @__PURE__ */ new Set([d]);
        var m = wr;
        try {
          pn(i), h("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally {
          m ? pn(i) : Ri();
        }
      }
    }
    var s_;
    {
      var CL = null;
      s_ = function(i, a, d) {
        var m = b1(CL, a);
        try {
          return CE(i, a, d);
        } catch (w) {
          if (w !== null && typeof w == "object" && typeof w.then == "function")
            throw w;
          if (u(), CM(), LE(i, a), b1(a, m), a.mode & fn && S0(a), NE(null, CE, null, i, a, d), ZC()) {
            var y = UE();
            typeof y == "object" && y !== null && y._suppressLogging && typeof w == "object" && w !== null && !w._suppressLogging && (w._suppressLogging = !0);
          }
          throw w;
        }
      };
    }
    var y1 = !1, o_;
    o_ = /* @__PURE__ */ new Set();
    function LL(i) {
      if (ca && !uC())
        switch (i.tag) {
          case H:
          case Q:
          case Oe: {
            var a = ti && G(ti) || "Unknown", d = a;
            if (!o_.has(d)) {
              o_.add(d);
              var m = G(i) || "Unknown";
              h("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", m, a, a);
            }
            break;
          }
          case k: {
            y1 || (h("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."), y1 = !0);
            break;
          }
        }
    }
    function Gh(i, a) {
      if (sr) {
        var d = i.memoizedUpdaters;
        d.forEach(function(m) {
          Kd(i, m, a);
        });
      }
    }
    var l_ = {};
    function Av(i, a) {
      {
        var d = us.current;
        return d !== null ? (d.push(a), l_) : nh(i, a);
      }
    }
    function _1(i) {
      if (i !== l_)
        return fm(i);
    }
    function x1() {
      return us.current !== null;
    }
    function PL(i) {
      {
        if (i.mode & Mn) {
          if (!$E())
            return;
        } else if (!Z2() || Qt !== Si || i.tag !== H && i.tag !== Q && i.tag !== Oe)
          return;
        if (us.current === null) {
          var a = wr;
          try {
            pn(i), h(`An update to %s inside a test was not wrapped in act(...).

When testing, code that causes React state updates should be wrapped into act(...):

act(() => {
  /* fire events that update state */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`, G(i));
          } finally {
            a ? pn(i) : Ri();
          }
        }
      }
    }
    function DL(i) {
      i.tag !== to && $E() && us.current === null && h(`A suspended resource finished loading inside a test, but the event was not wrapped in act(...).

When testing, code that resolves suspended data should be wrapped into act(...):

act(() => {
  /* finish loading suspended data */
});
/* assert on the output */

This ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act`);
    }
    var Ga = null, Rf = null, NL = function(i) {
      Ga = i;
    };
    function Cf(i) {
      {
        if (Ga === null)
          return i;
        var a = Ga(i);
        return a === void 0 ? i : a.current;
      }
    }
    function u_(i) {
      return Cf(i);
    }
    function c_(i) {
      {
        if (Ga === null)
          return i;
        var a = Ga(i);
        if (a === void 0) {
          if (i != null && typeof i.render == "function") {
            var d = Cf(i.render);
            if (i.render !== d) {
              var m = {
                $$typeof: se,
                render: d
              };
              return i.displayName !== void 0 && (m.displayName = i.displayName), m;
            }
          }
          return i;
        }
        return a.current;
      }
    }
    function S1(i, a) {
      {
        if (Ga === null)
          return !1;
        var d = i.elementType, m = a.type, y = !1, w = typeof m == "object" && m !== null ? m.$$typeof : null;
        switch (i.tag) {
          case k: {
            typeof m == "function" && (y = !0);
            break;
          }
          case H: {
            (typeof m == "function" || w === st) && (y = !0);
            break;
          }
          case Q: {
            (w === se || w === st) && (y = !0);
            break;
          }
          case be:
          case Oe: {
            (w === Pe || w === st) && (y = !0);
            break;
          }
          default:
            return !1;
        }
        if (y) {
          var P = Ga(d);
          if (P !== void 0 && P === Ga(m))
            return !0;
        }
        return !1;
      }
    }
    function M1(i) {
      {
        if (Ga === null || typeof WeakSet != "function")
          return;
        Rf === null && (Rf = /* @__PURE__ */ new WeakSet()), Rf.add(i);
      }
    }
    var UL = function(i, a) {
      {
        if (Ga === null)
          return;
        var d = a.staleFamilies, m = a.updatedFamilies;
        Hs(), Sv(function() {
          f_(i.current, m, d);
        });
      }
    }, IL = function(i, a) {
      {
        if (i.context !== ln)
          return;
        Hs(), Sv(function() {
          R1(a, i, null, null);
        });
      }
    };
    function f_(i, a, d) {
      {
        var m = i.alternate, y = i.child, w = i.sibling, P = i.tag, I = i.type, z = null;
        switch (P) {
          case H:
          case Oe:
          case k:
            z = I;
            break;
          case Q:
            z = I.render;
            break;
        }
        if (Ga === null)
          throw new Error("Expected resolveFamily to be set during hot reload.");
        var Z = !1, $ = !1;
        if (z !== null) {
          var oe = Ga(z);
          oe !== void 0 && (d.has(oe) ? $ = !0 : a.has(oe) && (P === k ? $ = !0 : Z = !0));
        }
        Rf !== null && (Rf.has(i) || m !== null && Rf.has(m)) && ($ = !0), $ && (i._debugNeedsRemount = !0), ($ || Z) && Ni(i, tn, Nn), y !== null && !$ && f_(y, a, d), w !== null && f_(w, a, d);
      }
    }
    var OL = function(i, a) {
      {
        var d = /* @__PURE__ */ new Set(), m = new Set(a.map(function(y) {
          return y.current;
        }));
        return d_(i.current, m, d), d;
      }
    };
    function d_(i, a, d) {
      {
        var m = i.child, y = i.sibling, w = i.tag, P = i.type, I = null;
        switch (w) {
          case H:
          case Oe:
          case k:
            I = P;
            break;
          case Q:
            I = P.render;
            break;
        }
        var z = !1;
        I !== null && a.has(I) && (z = !0), z ? FL(i, d) : m !== null && d_(m, a, d), y !== null && d_(y, a, d);
      }
    }
    function FL(i, a) {
      {
        var d = zL(i, a);
        if (d)
          return;
        for (var m = i; ; ) {
          switch (m.tag) {
            case K:
              a.add(m.stateNode);
              return;
            case X:
              a.add(m.stateNode.containerInfo);
              return;
            case N:
              a.add(m.stateNode.containerInfo);
              return;
          }
          if (m.return === null)
            throw new Error("Expected to reach root first.");
          m = m.return;
        }
      }
    }
    function zL(i, a) {
      for (var d = i, m = !1; ; ) {
        if (d.tag === K)
          m = !0, a.add(d.stateNode);
        else if (d.child !== null) {
          d.child.return = d, d = d.child;
          continue;
        }
        if (d === i)
          return m;
        for (; d.sibling === null; ) {
          if (d.return === null || d.return === i)
            return m;
          d = d.return;
        }
        d.sibling.return = d.return, d = d.sibling;
      }
      return !1;
    }
    var h_;
    {
      h_ = !1;
      try {
        var E1 = Object.preventExtensions({});
      } catch {
        h_ = !0;
      }
    }
    function BL(i, a, d, m) {
      this.tag = i, this.key = d, this.elementType = null, this.type = null, this.stateNode = null, this.return = null, this.child = null, this.sibling = null, this.index = 0, this.ref = null, this.pendingProps = a, this.memoizedProps = null, this.updateQueue = null, this.memoizedState = null, this.dependencies = null, this.mode = m, this.flags = de, this.subtreeFlags = de, this.deletions = null, this.lanes = Ie, this.childLanes = Ie, this.alternate = null, this.actualDuration = Number.NaN, this.actualStartTime = Number.NaN, this.selfBaseDuration = Number.NaN, this.treeBaseDuration = Number.NaN, this.actualDuration = 0, this.actualStartTime = -1, this.selfBaseDuration = 0, this.treeBaseDuration = 0, this._debugSource = null, this._debugOwner = null, this._debugNeedsRemount = !1, this._debugHookTypes = null, !h_ && typeof Object.preventExtensions == "function" && Object.preventExtensions(this);
    }
    var fa = function(i, a, d, m) {
      return new BL(i, a, d, m);
    };
    function p_(i) {
      var a = i.prototype;
      return !!(a && a.isReactComponent);
    }
    function HL(i) {
      return typeof i == "function" && !p_(i) && i.defaultProps === void 0;
    }
    function VL(i) {
      if (typeof i == "function")
        return p_(i) ? k : H;
      if (i != null) {
        var a = i.$$typeof;
        if (a === se)
          return Q;
        if (a === Pe)
          return be;
      }
      return F;
    }
    function Hu(i, a) {
      var d = i.alternate;
      d === null ? (d = fa(i.tag, a, i.key, i.mode), d.elementType = i.elementType, d.type = i.type, d.stateNode = i.stateNode, d._debugSource = i._debugSource, d._debugOwner = i._debugOwner, d._debugHookTypes = i._debugHookTypes, d.alternate = i, i.alternate = d) : (d.pendingProps = a, d.type = i.type, d.flags = de, d.subtreeFlags = de, d.deletions = null, d.actualDuration = 0, d.actualStartTime = -1), d.flags = i.flags & Ct, d.childLanes = i.childLanes, d.lanes = i.lanes, d.child = i.child, d.memoizedProps = i.memoizedProps, d.memoizedState = i.memoizedState, d.updateQueue = i.updateQueue;
      var m = i.dependencies;
      switch (d.dependencies = m === null ? null : {
        lanes: m.lanes,
        firstContext: m.firstContext
      }, d.sibling = i.sibling, d.index = i.index, d.ref = i.ref, d.selfBaseDuration = i.selfBaseDuration, d.treeBaseDuration = i.treeBaseDuration, d._debugNeedsRemount = i._debugNeedsRemount, d.tag) {
        case F:
        case H:
        case Oe:
          d.type = Cf(i.type);
          break;
        case k:
          d.type = u_(i.type);
          break;
        case Q:
          d.type = c_(i.type);
          break;
      }
      return d;
    }
    function kL(i, a) {
      i.flags &= Ct | Ke;
      var d = i.alternate;
      if (d === null)
        i.childLanes = Ie, i.lanes = a, i.child = null, i.subtreeFlags = de, i.memoizedProps = null, i.memoizedState = null, i.updateQueue = null, i.dependencies = null, i.stateNode = null, i.selfBaseDuration = 0, i.treeBaseDuration = 0;
      else {
        i.childLanes = d.childLanes, i.lanes = d.lanes, i.child = d.child, i.subtreeFlags = de, i.deletions = null, i.memoizedProps = d.memoizedProps, i.memoizedState = d.memoizedState, i.updateQueue = d.updateQueue, i.type = d.type;
        var m = d.dependencies;
        i.dependencies = m === null ? null : {
          lanes: m.lanes,
          firstContext: m.firstContext
        }, i.selfBaseDuration = d.selfBaseDuration, i.treeBaseDuration = d.treeBaseDuration;
      }
      return i;
    }
    function GL(i, a, d) {
      var m;
      return i === Vd ? (m = Mn, a === !0 && (m |= jn, m |= Hr)) : m = Vt, sr && (m |= fn), fa(N, null, null, m);
    }
    function m_(i, a, d, m, y, w) {
      var P = F, I = i;
      if (typeof i == "function")
        p_(i) ? (P = k, I = u_(I)) : I = Cf(I);
      else if (typeof i == "string")
        P = K;
      else
        e:
          switch (i) {
            case He:
              return Dl(d.children, y, w, a);
            case Be:
              P = _e, y |= jn, (y & Mn) !== Vt && (y |= Hr);
              break;
            case Ve:
              return WL(d, y, w, a);
            case xe:
              return XL(d, y, w, a);
            case Ae:
              return qL(d, y, w, a);
            case bt:
              return T1(d, y, w, a);
            case Je:
            case Ne:
            case ft:
            case Ft:
            case St:
            default: {
              if (typeof i == "object" && i !== null)
                switch (i.$$typeof) {
                  case W:
                    P = Fe;
                    break e;
                  case O:
                    P = Me;
                    break e;
                  case se:
                    P = Q, I = c_(I);
                    break e;
                  case Pe:
                    P = be;
                    break e;
                  case st:
                    P = ht, I = null;
                    break e;
                }
              var z = "";
              {
                (i === void 0 || typeof i == "object" && i !== null && Object.keys(i).length === 0) && (z += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
                var Z = m ? G(m) : null;
                Z && (z += `

Check the render method of \`` + Z + "`.");
              }
              throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (i == null ? i : typeof i) + "." + z));
            }
          }
      var $ = fa(P, d, a, y);
      return $.elementType = i, $.type = I, $.lanes = w, $._debugOwner = m, $;
    }
    function v_(i, a, d) {
      var m = null;
      m = i._owner;
      var y = i.type, w = i.key, P = i.props, I = m_(y, w, P, m, a, d);
      return I._debugSource = i._source, I._debugOwner = i._owner, I;
    }
    function Dl(i, a, d, m) {
      var y = fa(ae, i, m, a);
      return y.lanes = d, y;
    }
    function WL(i, a, d, m) {
      typeof i.id != "string" && h('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof i.id);
      var y = fa(ue, i, m, a | fn);
      return y.elementType = Ve, y.lanes = d, y.stateNode = {
        effectDuration: 0,
        passiveEffectDuration: 0
      }, y;
    }
    function XL(i, a, d, m) {
      var y = fa(ne, i, m, a);
      return y.elementType = xe, y.lanes = d, y;
    }
    function qL(i, a, d, m) {
      var y = fa(Ye, i, m, a);
      return y.elementType = Ae, y.lanes = d, y;
    }
    function T1(i, a, d, m) {
      var y = fa(gt, i, m, a);
      y.elementType = bt, y.lanes = d;
      var w = {};
      return y.stateNode = w, y;
    }
    function g_(i, a, d) {
      var m = fa(J, i, null, a);
      return m.lanes = d, m;
    }
    function YL() {
      var i = fa(K, null, null, Vt);
      return i.elementType = "DELETED", i;
    }
    function jL(i) {
      var a = fa(Ue, null, null, Vt);
      return a.stateNode = i, a;
    }
    function y_(i, a, d) {
      var m = i.children !== null ? i.children : [], y = fa(X, m, i.key, a);
      return y.lanes = d, y.stateNode = {
        containerInfo: i.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: i.implementation
      }, y;
    }
    function b1(i, a) {
      return i === null && (i = fa(F, null, null, Vt)), i.tag = a.tag, i.key = a.key, i.elementType = a.elementType, i.type = a.type, i.stateNode = a.stateNode, i.return = a.return, i.child = a.child, i.sibling = a.sibling, i.index = a.index, i.ref = a.ref, i.pendingProps = a.pendingProps, i.memoizedProps = a.memoizedProps, i.updateQueue = a.updateQueue, i.memoizedState = a.memoizedState, i.dependencies = a.dependencies, i.mode = a.mode, i.flags = a.flags, i.subtreeFlags = a.subtreeFlags, i.deletions = a.deletions, i.lanes = a.lanes, i.childLanes = a.childLanes, i.alternate = a.alternate, i.actualDuration = a.actualDuration, i.actualStartTime = a.actualStartTime, i.selfBaseDuration = a.selfBaseDuration, i.treeBaseDuration = a.treeBaseDuration, i._debugSource = a._debugSource, i._debugOwner = a._debugOwner, i._debugNeedsRemount = a._debugNeedsRemount, i._debugHookTypes = a._debugHookTypes, i;
    }
    function ZL(i, a, d, m, y) {
      this.tag = a, this.containerInfo = i, this.pendingChildren = null, this.current = null, this.pingCache = null, this.finishedWork = null, this.timeoutHandle = ko, this.context = null, this.pendingContext = null, this.callbackNode = null, this.callbackPriority = pi, this.eventTimes = cl(Ie), this.expirationTimes = cl(Nn), this.pendingLanes = Ie, this.suspendedLanes = Ie, this.pingedLanes = Ie, this.expiredLanes = Ie, this.mutableReadLanes = Ie, this.finishedLanes = Ie, this.entangledLanes = Ie, this.entanglements = cl(Ie), this.identifierPrefix = m, this.onRecoverableError = y, Zi && (this.mutableSourceEagerHydrationData = null), this.effectDuration = 0, this.passiveEffectDuration = 0;
      {
        this.memoizedUpdaters = /* @__PURE__ */ new Set();
        for (var w = this.pendingUpdatersLaneMap = [], P = 0; P < hu; P++)
          w.push(/* @__PURE__ */ new Set());
      }
      switch (a) {
        case Vd:
          this._debugRootType = d ? "hydrateRoot()" : "createRoot()";
          break;
        case to:
          this._debugRootType = d ? "hydrate()" : "render()";
          break;
      }
    }
    function w1(i, a, d, m, y, w, P, I, z, Z) {
      var $ = new ZL(i, a, d, I, z), oe = GL(a, w);
      $.current = oe, oe.stateNode = $;
      {
        var ye = {
          element: m,
          isDehydrated: d,
          cache: null,
          // not enabled yet
          transitions: null
        };
        oe.memoizedState = ye;
      }
      return xt(oe), $;
    }
    var JL = "18.0.0-fc46dba67-20220329";
    function QL(i, a, d) {
      var m = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
      return Ty(m), {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: Se,
        key: m == null ? null : "" + m,
        children: i,
        containerInfo: a,
        implementation: d
      };
    }
    var __, x_;
    __ = !1, x_ = {};
    function A1(i) {
      if (!i)
        return ln;
      var a = x(i), d = Hc(a);
      if (a.tag === k) {
        var m = a.type;
        if (Br(m))
          return sa(a, m, d);
      }
      return d;
    }
    function KL(i) {
      var a = x(i);
      if (a === void 0) {
        if (typeof i.render == "function")
          throw new Error("Unable to find node on an unmounted component.");
        var d = Object.keys(i).join(",");
        throw new Error("Argument appears to not be a ReactComponent. Keys: " + d);
      }
      var m = sn(a);
      return m === null ? null : m.stateNode;
    }
    function $L(i, a) {
      {
        var d = x(i);
        if (d === void 0) {
          if (typeof i.render == "function")
            throw new Error("Unable to find node on an unmounted component.");
          var m = Object.keys(i).join(",");
          throw new Error("Argument appears to not be a ReactComponent. Keys: " + m);
        }
        var y = sn(d);
        if (y === null)
          return null;
        if (y.mode & jn) {
          var w = G(d) || "Component";
          if (!x_[w]) {
            x_[w] = !0;
            var P = wr;
            try {
              pn(y), d.mode & jn ? h("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", a, a, w) : h("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", a, a, w);
            } finally {
              P ? pn(P) : Ri();
            }
          }
        }
        return y.stateNode;
      }
    }
    function eP(i, a, d, m, y, w, P, I) {
      var z = !1, Z = null;
      return w1(i, a, z, Z, d, m, y, w, P);
    }
    function tP(i, a, d, m, y, w, P, I, z, Z) {
      var $ = !0, oe = w1(d, m, $, i, y, w, P, I, z);
      oe.context = A1(null);
      var ye = oe.current, we = Rr(), ze = Ll(ye), We = Ut(we, ze);
      return We.callback = a ?? null, Jt(ye, We), tL(oe, ze, we), oe;
    }
    function R1(i, a, d, m) {
      Qn(a, i);
      var y = a.current, w = Rr(), P = Ll(y);
      Ps(P);
      var I = A1(d);
      a.context === null ? a.context = I : a.pendingContext = I, ca && wr !== null && !__ && (__ = !0, h(`Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.

Check the render method of %s.`, G(wr) || "Unknown"));
      var z = Ut(w, P);
      z.payload = {
        element: i
      }, m = m === void 0 ? null : m, m !== null && (typeof m != "function" && h("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", m), z.callback = m), Jt(y, z);
      var Z = Ni(y, P, w);
      return Z !== null && Kn(Z, y, P), P;
    }
    function nP(i) {
      var a = i.current;
      if (!a.child)
        return null;
      switch (a.child.tag) {
        case K:
          return qi(a.child.stateNode);
        default:
          return a.child.stateNode;
      }
    }
    function iP(i) {
      switch (i.tag) {
        case N:
          var a = i.stateNode;
          if (Ds(a)) {
            var d = jd(a);
            rL(a, d);
          }
          break;
        case ne:
          var m = Rr();
          Sv(function() {
            return Ni(i, tn, m);
          });
          var y = tn;
          S_(i, y);
          break;
      }
    }
    function C1(i, a) {
      var d = i.memoizedState;
      d !== null && d.dehydrated !== null && (d.retryLane = rt(d.retryLane, a));
    }
    function S_(i, a) {
      C1(i, a);
      var d = i.alternate;
      d && C1(d, a);
    }
    function rP(i) {
      if (i.tag === ne) {
        var a = Rr(), d = ws;
        Ni(i, d, a), S_(i, d);
      }
    }
    function aP(i) {
      if (i.tag === ne) {
        var a = Rr(), d = Ll(i);
        Ni(i, d, a), S_(i, d);
      }
    }
    function sP(i) {
      var a = yn(i);
      return a === null ? null : a.stateNode;
    }
    var L1 = function(i) {
      return null;
    };
    function P1(i) {
      return L1(i);
    }
    var D1 = function(i) {
      return !1;
    };
    function N1(i) {
      return D1(i);
    }
    var U1 = null, I1 = null, O1 = null, F1 = null, z1 = null, B1 = null, H1 = null, V1 = null, k1 = null;
    {
      var G1 = function(i, a, d) {
        var m = a[d], y = Sn(i) ? i.slice() : _({}, i);
        return d + 1 === a.length ? (Sn(y) ? y.splice(m, 1) : delete y[m], y) : (y[m] = G1(i[m], a, d + 1), y);
      }, W1 = function(i, a) {
        return G1(i, a, 0);
      }, X1 = function(i, a, d, m) {
        var y = a[m], w = Sn(i) ? i.slice() : _({}, i);
        if (m + 1 === a.length) {
          var P = d[m];
          w[P] = w[y], Sn(w) ? w.splice(y, 1) : delete w[y];
        } else
          w[y] = X1(
            // $FlowFixMe number or string is fine here
            i[y],
            a,
            d,
            m + 1
          );
        return w;
      }, q1 = function(i, a, d) {
        if (a.length !== d.length) {
          p("copyWithRename() expects paths of the same length");
          return;
        } else
          for (var m = 0; m < d.length - 1; m++)
            if (a[m] !== d[m]) {
              p("copyWithRename() expects paths to be the same except for the deepest key");
              return;
            }
        return X1(i, a, d, 0);
      }, Y1 = function(i, a, d, m) {
        if (d >= a.length)
          return m;
        var y = a[d], w = Sn(i) ? i.slice() : _({}, i);
        return w[y] = Y1(i[y], a, d + 1, m), w;
      }, j1 = function(i, a, d) {
        return Y1(i, a, 0, d);
      }, M_ = function(i, a) {
        for (var d = i.memoizedState; d !== null && a > 0; )
          d = d.next, a--;
        return d;
      };
      U1 = function(i, a, d, m) {
        var y = M_(i, a);
        if (y !== null) {
          var w = j1(y.memoizedState, d, m);
          y.memoizedState = w, y.baseState = w, i.memoizedProps = _({}, i.memoizedProps), Ni(i, tn, Nn);
        }
      }, I1 = function(i, a, d) {
        var m = M_(i, a);
        if (m !== null) {
          var y = W1(m.memoizedState, d);
          m.memoizedState = y, m.baseState = y, i.memoizedProps = _({}, i.memoizedProps), Ni(i, tn, Nn);
        }
      }, O1 = function(i, a, d, m) {
        var y = M_(i, a);
        if (y !== null) {
          var w = q1(y.memoizedState, d, m);
          y.memoizedState = w, y.baseState = w, i.memoizedProps = _({}, i.memoizedProps), Ni(i, tn, Nn);
        }
      }, F1 = function(i, a, d) {
        i.pendingProps = j1(i.memoizedProps, a, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), Ni(i, tn, Nn);
      }, z1 = function(i, a) {
        i.pendingProps = W1(i.memoizedProps, a), i.alternate && (i.alternate.pendingProps = i.pendingProps), Ni(i, tn, Nn);
      }, B1 = function(i, a, d) {
        i.pendingProps = q1(i.memoizedProps, a, d), i.alternate && (i.alternate.pendingProps = i.pendingProps), Ni(i, tn, Nn);
      }, H1 = function(i) {
        Ni(i, tn, Nn);
      }, V1 = function(i) {
        L1 = i;
      }, k1 = function(i) {
        D1 = i;
      };
    }
    function oP(i) {
      var a = sn(i);
      return a === null ? null : a.stateNode;
    }
    function lP(i) {
      return null;
    }
    function uP() {
      return wr;
    }
    function cP(i) {
      var a = i.findFiberByHostInstance, d = o.ReactCurrentDispatcher;
      return ah({
        bundleType: i.bundleType,
        version: i.version,
        rendererPackageName: i.rendererPackageName,
        rendererConfig: i.rendererConfig,
        overrideHookState: U1,
        overrideHookStateDeletePath: I1,
        overrideHookStateRenamePath: O1,
        overrideProps: F1,
        overridePropsDeletePath: z1,
        overridePropsRenamePath: B1,
        setErrorHandler: V1,
        setSuspenseHandler: k1,
        scheduleUpdate: H1,
        currentDispatcherRef: d,
        findHostInstanceByFiber: oP,
        findFiberByHostInstance: a || lP,
        // React Refresh
        findHostInstancesForRefresh: OL,
        scheduleRefresh: UL,
        scheduleRoot: IL,
        setRefreshHandler: NL,
        // Enables DevTools to append owner stacks to error messages in DEV mode.
        getCurrentFiber: uP,
        // Enables DevTools to detect reconciler version rather than renderer version
        // which may not match for third party renderers.
        reconcilerVersion: JL
      });
    }
    return t.attemptContinuousHydration = rP, t.attemptHydrationAtCurrentPriority = aP, t.attemptSynchronousHydration = iP, t.batchedUpdates = sL, t.createComponentSelector = F2, t.createContainer = eP, t.createHasPseudoClassSelector = z2, t.createHydrationContainer = tP, t.createPortal = QL, t.createRoleSelector = B2, t.createTestNameSelector = V2, t.createTextSelector = H2, t.deferredUpdates = aL, t.discreteUpdates = oL, t.findAllNodes = fv, t.findBoundingRects = W2, t.findHostInstance = KL, t.findHostInstanceWithNoPortals = sP, t.findHostInstanceWithWarning = $L, t.flushControlled = uL, t.flushPassiveEffects = Hs, t.flushSync = Sv, t.focusWithin = X2, t.getCurrentUpdatePriority = Er, t.getFindAllNodesFailureDescription = G2, t.getPublicRootInstance = nP, t.injectIntoDevTools = cP, t.isAlreadyRendering = lL, t.observeVisibleRects = Y2, t.registerMutableSourceForHydration = iC, t.runWithPriority = eh, t.shouldError = P1, t.shouldSuspend = N1, t.updateContainer = R1, t;
  })), dx.exports;
}
process.env.NODE_ENV === "production" ? uS.exports = Sz() : uS.exports = Mz();
var Ez = uS.exports;
const Tz = /* @__PURE__ */ vR(Ez), tM = {}, bz = (s) => void Object.assign(tM, s);
function wz(s, e) {
  function t(g, {
    args: _ = [],
    attach: x,
    ...M
  }, T) {
    let R = `${g[0].toUpperCase()}${g.slice(1)}`, b;
    if (g === "primitive") {
      if (M.object === void 0)
        throw new Error("R3F: Primitives without 'object' are invalid!");
      const E = M.object;
      b = nd(E, {
        type: g,
        root: T,
        attach: x,
        primitive: !0
      });
    } else {
      const E = tM[R];
      if (!E)
        throw new Error(`R3F: ${R} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
      if (!Array.isArray(_))
        throw new Error("R3F: The args prop must be an array!");
      b = nd(new E(..._), {
        type: g,
        root: T,
        attach: x,
        // Save args in case we need to reconstruct later for HMR
        memoizedProps: {
          args: _
        }
      });
    }
    return b.__r3f.attach === void 0 && (b instanceof $t ? b.__r3f.attach = "geometry" : b instanceof ir && (b.__r3f.attach = "material")), R !== "inject" && mx(b, M), b;
  }
  function n(g, _) {
    let x = !1;
    if (_) {
      var M, T;
      (M = _.__r3f) != null && M.attach ? px(g, _, _.__r3f.attach) : _.isObject3D && g.isObject3D && (g.add(_), x = !0), x || (T = g.__r3f) == null || T.objects.push(_), _.__r3f || nd(_, {}), _.__r3f.parent = g, dS(_), id(_);
    }
  }
  function r(g, _, x) {
    let M = !1;
    if (_) {
      var T, R;
      if ((T = _.__r3f) != null && T.attach)
        px(g, _, _.__r3f.attach);
      else if (_.isObject3D && g.isObject3D) {
        _.parent = g, _.dispatchEvent({
          type: "added"
        }), g.dispatchEvent({
          type: "childadded",
          child: _
        });
        const b = g.children.filter((L) => L !== _), E = b.indexOf(x);
        g.children = [...b.slice(0, E), _, ...b.slice(E)], M = !0;
      }
      M || (R = g.__r3f) == null || R.objects.push(_), _.__r3f || nd(_, {}), _.__r3f.parent = g, dS(_), id(_);
    }
  }
  function o(g, _, x = !1) {
    g && [...g].forEach((M) => c(_, M, x));
  }
  function c(g, _, x) {
    if (_) {
      var M, T, R;
      if (_.__r3f && (_.__r3f.parent = null), (M = g.__r3f) != null && M.objects && (g.__r3f.objects = g.__r3f.objects.filter((U) => U !== _)), (T = _.__r3f) != null && T.attach)
        Hb(g, _, _.__r3f.attach);
      else if (_.isObject3D && g.isObject3D) {
        var b;
        g.remove(_), (b = _.__r3f) != null && b.root && Uz(Rg(_), _);
      }
      const L = (R = _.__r3f) == null ? void 0 : R.primitive, C = !L && (x === void 0 ? _.dispose !== null : x);
      if (!L) {
        var E;
        o((E = _.__r3f) == null ? void 0 : E.objects, _, C), o(_.children, _, C);
      }
      if (delete _.__r3f, C && _.dispose && _.type !== "Scene") {
        const U = () => {
          try {
            _.dispose();
          } catch {
          }
        };
        typeof IS_REACT_ACT_ENVIRONMENT > "u" ? Ng.unstable_scheduleCallback(Ng.unstable_IdlePriority, U) : U();
      }
      id(g);
    }
  }
  function f(g, _, x, M) {
    var T;
    const R = (T = g.__r3f) == null ? void 0 : T.parent;
    if (!R)
      return;
    const b = t(_, x, g.__r3f.root);
    if (g.children) {
      for (const E of g.children)
        E.__r3f && n(b, E);
      g.children = g.children.filter((E) => !E.__r3f);
    }
    g.__r3f.objects.forEach((E) => n(b, E)), g.__r3f.objects = [], g.__r3f.autoRemovedBeforeAppend || c(R, g), b.parent && (b.__r3f.autoRemovedBeforeAppend = !0), n(R, b), b.raycast && b.__r3f.eventCount && Rg(b).getState().internal.interaction.push(b), [M, M.alternate].forEach((E) => {
      E !== null && (E.stateNode = b, E.ref && (typeof E.ref == "function" ? E.ref(b) : E.ref.current = b));
    });
  }
  const p = () => console.warn("Text is not allowed in the R3F tree! This could be stray whitespace or characters.");
  return {
    reconciler: Tz({
      createInstance: t,
      removeChild: c,
      appendChild: n,
      appendInitialChild: n,
      insertBefore: r,
      supportsMutation: !0,
      isPrimaryRenderer: !1,
      supportsPersistence: !1,
      supportsHydration: !1,
      noTimeout: -1,
      appendChildToContainer: (g, _) => {
        if (!_)
          return;
        const x = g.getState().scene;
        x.__r3f && (x.__r3f.root = g, n(x, _));
      },
      removeChildFromContainer: (g, _) => {
        _ && c(g.getState().scene, _);
      },
      insertInContainerBefore: (g, _, x) => {
        if (!_ || !x)
          return;
        const M = g.getState().scene;
        M.__r3f && r(M, _, x);
      },
      getRootHostContext: () => null,
      getChildHostContext: (g) => g,
      finalizeInitialChildren(g) {
        var _;
        return !!((_ = g == null ? void 0 : g.__r3f) != null ? _ : {}).handlers;
      },
      prepareUpdate(g, _, x, M) {
        var T;
        if (((T = g == null ? void 0 : g.__r3f) != null ? T : {}).primitive && M.object && M.object !== g)
          return [!0];
        {
          const {
            args: b = [],
            children: E,
            ...L
          } = M, {
            args: C = [],
            children: U,
            ...Y
          } = x;
          if (!Array.isArray(b))
            throw new Error("R3F: the args prop must be an array!");
          if (b.some((H, k) => H !== C[k]))
            return [!0];
          const B = ER(g, L, Y, !0);
          return B.changes.length ? [!1, B] : null;
        }
      },
      commitUpdate(g, [_, x], M, T, R, b) {
        _ ? f(g, M, R, b) : mx(g, x);
      },
      commitMount(g, _, x, M) {
        var T;
        const R = (T = g.__r3f) != null ? T : {};
        g.raycast && R.handlers && R.eventCount && Rg(g).getState().internal.interaction.push(g);
      },
      getPublicInstance: (g) => g,
      prepareForCommit: () => null,
      preparePortalMount: (g) => nd(g.getState().scene),
      resetAfterCommit: () => {
      },
      shouldSetTextContent: () => !1,
      clearContainer: () => !1,
      hideInstance(g) {
        var _;
        const {
          attach: x,
          parent: M
        } = (_ = g.__r3f) != null ? _ : {};
        x && M && Hb(M, g, x), g.isObject3D && (g.visible = !1), id(g);
      },
      unhideInstance(g, _) {
        var x;
        const {
          attach: M,
          parent: T
        } = (x = g.__r3f) != null ? x : {};
        M && T && px(T, g, M), (g.isObject3D && _.visible == null || _.visible) && (g.visible = !0), id(g);
      },
      createTextInstance: p,
      hideTextInstance: p,
      unhideTextInstance: p,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874
      // @ts-ignore
      getCurrentEventPriority: () => e ? e() : ud.DefaultEventPriority,
      beforeActiveInstanceBlur: () => {
      },
      afterActiveInstanceBlur: () => {
      },
      detachDeletedInstance: () => {
      },
      now: typeof performance < "u" && qn.fun(performance.now) ? performance.now : qn.fun(Date.now) ? Date.now : () => 0,
      // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503
      scheduleTimeout: qn.fun(setTimeout) ? setTimeout : void 0,
      cancelTimeout: qn.fun(clearTimeout) ? clearTimeout : void 0
    }),
    applyProps: mx
  };
}
var Ob, Fb;
const hx = (s) => "colorSpace" in s || "outputColorSpace" in s, gR = () => {
  var s;
  return (s = tM.ColorManagement) != null ? s : null;
}, yR = (s) => s && s.isOrthographicCamera, Az = (s) => s && s.hasOwnProperty("current"), Gp = typeof window < "u" && ((Ob = window.document) != null && Ob.createElement || ((Fb = window.navigator) == null ? void 0 : Fb.product) === "ReactNative") ? qt.useLayoutEffect : qt.useEffect;
function _R(s) {
  const e = qt.useRef(s);
  return Gp(() => void (e.current = s), [s]), e;
}
function Rz({
  set: s
}) {
  return Gp(() => (s(new Promise(() => null)), () => s(!1)), [s]), null;
}
class xR extends qt.Component {
  constructor(...e) {
    super(...e), this.state = {
      error: !1
    };
  }
  componentDidCatch(e) {
    this.props.set(e);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}
xR.getDerivedStateFromError = () => ({
  error: !0
});
const SR = "__default", zb = /* @__PURE__ */ new Map(), Cz = (s) => s && !!s.memoized && !!s.changes;
function MR(s) {
  var e;
  const t = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(s) ? Math.min(Math.max(s[0], t), s[1]) : s;
}
const tp = (s) => {
  var e;
  return (e = s.__r3f) == null ? void 0 : e.root.getState();
};
function Rg(s) {
  let e = s.__r3f.root;
  for (; e.getState().previousRoot; )
    e = e.getState().previousRoot;
  return e;
}
const qn = {
  obj: (s) => s === Object(s) && !qn.arr(s) && typeof s != "function",
  fun: (s) => typeof s == "function",
  str: (s) => typeof s == "string",
  num: (s) => typeof s == "number",
  boo: (s) => typeof s == "boolean",
  und: (s) => s === void 0,
  arr: (s) => Array.isArray(s),
  equ(s, e, {
    arrays: t = "shallow",
    objects: n = "reference",
    strict: r = !0
  } = {}) {
    if (typeof s != typeof e || !!s != !!e)
      return !1;
    if (qn.str(s) || qn.num(s))
      return s === e;
    const o = qn.obj(s);
    if (o && n === "reference")
      return s === e;
    const c = qn.arr(s);
    if (c && t === "reference")
      return s === e;
    if ((c || o) && s === e)
      return !0;
    let f;
    for (f in s)
      if (!(f in e))
        return !1;
    if (o && t === "shallow" && n === "shallow") {
      for (f in r ? e : s)
        if (!qn.equ(s[f], e[f], {
          strict: r,
          objects: "reference"
        }))
          return !1;
    } else
      for (f in r ? e : s)
        if (s[f] !== e[f])
          return !1;
    if (qn.und(f)) {
      if (c && s.length === 0 && e.length === 0 || o && Object.keys(s).length === 0 && Object.keys(e).length === 0)
        return !0;
      if (s !== e)
        return !1;
    }
    return !0;
  }
};
function Lz(s) {
  s.dispose && s.type !== "Scene" && s.dispose();
  for (const e in s)
    e.dispose == null || e.dispose(), delete s[e];
}
function nd(s, e) {
  const t = s;
  return t.__r3f = {
    type: "",
    root: null,
    previousAttach: null,
    memoizedProps: {},
    eventCount: 0,
    handlers: {},
    objects: [],
    parent: null,
    ...e
  }, s;
}
function fS(s, e) {
  let t = s;
  if (e.includes("-")) {
    const n = e.split("-"), r = n.pop();
    return t = n.reduce((o, c) => o[c], s), {
      target: t,
      key: r
    };
  } else
    return {
      target: t,
      key: e
    };
}
const Bb = /-\d+$/;
function px(s, e, t) {
  if (qn.str(t)) {
    if (Bb.test(t)) {
      const o = t.replace(Bb, ""), {
        target: c,
        key: f
      } = fS(s, o);
      Array.isArray(c[f]) || (c[f] = []);
    }
    const {
      target: n,
      key: r
    } = fS(s, t);
    e.__r3f.previousAttach = n[r], n[r] = e;
  } else
    e.__r3f.previousAttach = t(s, e);
}
function Hb(s, e, t) {
  var n, r;
  if (qn.str(t)) {
    const {
      target: o,
      key: c
    } = fS(s, t), f = e.__r3f.previousAttach;
    f === void 0 ? delete o[c] : o[c] = f;
  } else
    (n = e.__r3f) == null || n.previousAttach == null || n.previousAttach(s, e);
  (r = e.__r3f) == null || delete r.previousAttach;
}
function ER(s, {
  children: e,
  key: t,
  ref: n,
  ...r
}, {
  children: o,
  key: c,
  ref: f,
  ...p
} = {}, h = !1) {
  var g;
  const _ = (g = s == null ? void 0 : s.__r3f) != null ? g : {}, x = Object.entries(r), M = [];
  if (h) {
    const R = Object.keys(p);
    for (let b = 0; b < R.length; b++)
      r.hasOwnProperty(R[b]) || x.unshift([R[b], SR + "remove"]);
  }
  x.forEach(([R, b]) => {
    var E;
    if ((E = s.__r3f) != null && E.primitive && R === "object" || qn.equ(b, p[R]))
      return;
    if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(R))
      return M.push([R, b, !0, []]);
    let L = [];
    R.includes("-") && (L = R.split("-")), M.push([R, b, !1, L]);
    for (const C in r) {
      const U = r[C];
      C.startsWith(`${R}-`) && M.push([C, U, !1, C.split("-")]);
    }
  });
  const T = {
    ...r
  };
  return _.memoizedProps && _.memoizedProps.args && (T.args = _.memoizedProps.args), _.memoizedProps && _.memoizedProps.attach && (T.attach = _.memoizedProps.attach), {
    memoized: T,
    changes: M
  };
}
const Pz = typeof process < "u" && process.env.NODE_ENV !== "production";
function mx(s, e) {
  var t, n, r;
  const o = (t = s.__r3f) != null ? t : {}, c = o.root, f = (n = c == null || c.getState == null ? void 0 : c.getState()) != null ? n : {}, {
    memoized: p,
    changes: h
  } = Cz(e) ? e : ER(s, e), g = o.eventCount;
  s.__r3f && (s.__r3f.memoizedProps = p);
  for (let x = 0; x < h.length; x++) {
    let [M, T, R, b] = h[x];
    if (hx(s)) {
      const U = "srgb", Y = "srgb-linear";
      M === "encoding" ? (M = "colorSpace", T = T === 3001 ? U : Y) : M === "outputEncoding" && (M = "outputColorSpace", T = T === 3001 ? U : Y);
    }
    let E = s, L = E[M];
    if (b.length && (L = b.reduce((C, U) => C[U], s), !(L && L.set))) {
      const [C, ...U] = b.reverse();
      E = U.reverse().reduce((Y, B) => Y[B], s), M = C;
    }
    if (T === SR + "remove")
      if (E.constructor) {
        let C = zb.get(E.constructor);
        C || (C = new E.constructor(), zb.set(E.constructor, C)), T = C[M];
      } else
        T = 0;
    if (R)
      T ? o.handlers[M] = T : delete o.handlers[M], o.eventCount = Object.keys(o.handlers).length;
    else if (L && L.set && (L.copy || L instanceof fc)) {
      if (Array.isArray(T))
        L.fromArray ? L.fromArray(T) : L.set(...T);
      else if (L.copy && T && T.constructor && // Some environments may break strict identity checks by duplicating versions of three.js.
      // Loosen to unminified names, ignoring descendents.
      // https://github.com/pmndrs/react-three-fiber/issues/2856
      // TODO: fix upstream and remove in v9
      (Pz ? L.constructor.name === T.constructor.name : L.constructor === T.constructor))
        L.copy(T);
      else if (T !== void 0) {
        const C = L instanceof mt;
        !C && L.setScalar ? L.setScalar(T) : L instanceof fc && T instanceof fc ? L.mask = T.mask : L.set(T), !gR() && !f.linear && C && L.convertSRGBToLinear();
      }
    } else if (E[M] = T, E[M] instanceof ai && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
    E[M].format === Qr && E[M].type === qs) {
      const C = E[M];
      hx(C) && hx(f.gl) ? C.colorSpace = f.gl.outputColorSpace : C.encoding = f.gl.outputEncoding;
    }
    id(s);
  }
  if (o.parent && s.raycast && g !== o.eventCount) {
    const x = Rg(s).getState().internal, M = x.interaction.indexOf(s);
    M > -1 && x.interaction.splice(M, 1), o.eventCount && x.interaction.push(s);
  }
  return !(h.length === 1 && h[0][0] === "onUpdate") && h.length && (r = s.__r3f) != null && r.parent && dS(s), s;
}
function id(s) {
  var e, t;
  const n = (e = s.__r3f) == null || (t = e.root) == null || t.getState == null ? void 0 : t.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function dS(s) {
  s.onUpdate == null || s.onUpdate(s);
}
function Dz(s, e) {
  s.manual || (yR(s) ? (s.left = e.width / -2, s.right = e.width / 2, s.top = e.height / 2, s.bottom = e.height / -2) : s.aspect = e.width / e.height, s.updateProjectionMatrix(), s.updateMatrixWorld());
}
function _g(s) {
  return (s.eventObject || s.object).uuid + "/" + s.index + s.instanceId;
}
function Nz() {
  var s;
  const e = typeof self < "u" && self || typeof window < "u" && window;
  if (!e)
    return ud.DefaultEventPriority;
  switch ((s = e.event) == null ? void 0 : s.type) {
    case "click":
    case "contextmenu":
    case "dblclick":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
      return ud.DiscreteEventPriority;
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "pointerenter":
    case "pointerleave":
    case "wheel":
      return ud.ContinuousEventPriority;
    default:
      return ud.DefaultEventPriority;
  }
}
function TR(s, e, t, n) {
  const r = t.get(e);
  r && (t.delete(e), t.size === 0 && (s.delete(n), r.target.releasePointerCapture(n)));
}
function Uz(s, e) {
  const {
    internal: t
  } = s.getState();
  t.interaction = t.interaction.filter((n) => n !== e), t.initialHits = t.initialHits.filter((n) => n !== e), t.hovered.forEach((n, r) => {
    (n.eventObject === e || n.object === e) && t.hovered.delete(r);
  }), t.capturedMap.forEach((n, r) => {
    TR(t.capturedMap, e, n, r);
  });
}
function Iz(s) {
  function e(p) {
    const {
      internal: h
    } = s.getState(), g = p.offsetX - h.initialClick[0], _ = p.offsetY - h.initialClick[1];
    return Math.round(Math.sqrt(g * g + _ * _));
  }
  function t(p) {
    return p.filter((h) => ["Move", "Over", "Enter", "Out", "Leave"].some((g) => {
      var _;
      return (_ = h.__r3f) == null ? void 0 : _.handlers["onPointer" + g];
    }));
  }
  function n(p, h) {
    const g = s.getState(), _ = /* @__PURE__ */ new Set(), x = [], M = h ? h(g.internal.interaction) : g.internal.interaction;
    for (let E = 0; E < M.length; E++) {
      const L = tp(M[E]);
      L && (L.raycaster.camera = void 0);
    }
    g.previousRoot || g.events.compute == null || g.events.compute(p, g);
    function T(E) {
      const L = tp(E);
      if (!L || !L.events.enabled || L.raycaster.camera === null)
        return [];
      if (L.raycaster.camera === void 0) {
        var C;
        L.events.compute == null || L.events.compute(p, L, (C = L.previousRoot) == null ? void 0 : C.getState()), L.raycaster.camera === void 0 && (L.raycaster.camera = null);
      }
      return L.raycaster.camera ? L.raycaster.intersectObject(E, !0) : [];
    }
    let R = M.flatMap(T).sort((E, L) => {
      const C = tp(E.object), U = tp(L.object);
      return !C || !U ? E.distance - L.distance : U.events.priority - C.events.priority || E.distance - L.distance;
    }).filter((E) => {
      const L = _g(E);
      return _.has(L) ? !1 : (_.add(L), !0);
    });
    g.events.filter && (R = g.events.filter(R, g));
    for (const E of R) {
      let L = E.object;
      for (; L; ) {
        var b;
        (b = L.__r3f) != null && b.eventCount && x.push({
          ...E,
          eventObject: L
        }), L = L.parent;
      }
    }
    if ("pointerId" in p && g.internal.capturedMap.has(p.pointerId))
      for (let E of g.internal.capturedMap.get(p.pointerId).values())
        _.has(_g(E.intersection)) || x.push(E.intersection);
    return x;
  }
  function r(p, h, g, _) {
    const x = s.getState();
    if (p.length) {
      const M = {
        stopped: !1
      };
      for (const T of p) {
        const R = tp(T.object) || x, {
          raycaster: b,
          pointer: E,
          camera: L,
          internal: C
        } = R, U = new q(E.x, E.y, 0).unproject(L), Y = (N) => {
          var X, K;
          return (X = (K = C.capturedMap.get(N)) == null ? void 0 : K.has(T.eventObject)) != null ? X : !1;
        }, B = (N) => {
          const X = {
            intersection: T,
            target: h.target
          };
          C.capturedMap.has(N) ? C.capturedMap.get(N).set(T.eventObject, X) : C.capturedMap.set(N, /* @__PURE__ */ new Map([[T.eventObject, X]])), h.target.setPointerCapture(N);
        }, H = (N) => {
          const X = C.capturedMap.get(N);
          X && TR(C.capturedMap, T.eventObject, X, N);
        };
        let k = {};
        for (let N in h) {
          let X = h[N];
          typeof X != "function" && (k[N] = X);
        }
        let F = {
          ...T,
          ...k,
          pointer: E,
          intersections: p,
          stopped: M.stopped,
          delta: g,
          unprojectedPoint: U,
          ray: b.ray,
          camera: L,
          // Hijack stopPropagation, which just sets a flag
          stopPropagation() {
            const N = "pointerId" in h && C.capturedMap.get(h.pointerId);
            if (
              // ...if this pointer hasn't been captured
              (!N || // ... or if the hit object is capturing the pointer
              N.has(T.eventObject)) && (F.stopped = M.stopped = !0, C.hovered.size && Array.from(C.hovered.values()).find((X) => X.eventObject === T.eventObject))
            ) {
              const X = p.slice(0, p.indexOf(T));
              o([...X, T]);
            }
          },
          // there should be a distinction between target and currentTarget
          target: {
            hasPointerCapture: Y,
            setPointerCapture: B,
            releasePointerCapture: H
          },
          currentTarget: {
            hasPointerCapture: Y,
            setPointerCapture: B,
            releasePointerCapture: H
          },
          nativeEvent: h
        };
        if (_(F), M.stopped === !0)
          break;
      }
    }
    return p;
  }
  function o(p) {
    const {
      internal: h
    } = s.getState();
    for (const g of h.hovered.values())
      if (!p.length || !p.find((_) => _.object === g.object && _.index === g.index && _.instanceId === g.instanceId)) {
        const x = g.eventObject.__r3f, M = x == null ? void 0 : x.handlers;
        if (h.hovered.delete(_g(g)), x != null && x.eventCount) {
          const T = {
            ...g,
            intersections: p
          };
          M.onPointerOut == null || M.onPointerOut(T), M.onPointerLeave == null || M.onPointerLeave(T);
        }
      }
  }
  function c(p, h) {
    for (let g = 0; g < h.length; g++) {
      const _ = h[g].__r3f;
      _ == null || _.handlers.onPointerMissed == null || _.handlers.onPointerMissed(p);
    }
  }
  function f(p) {
    switch (p) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => o([]);
      case "onLostPointerCapture":
        return (h) => {
          const {
            internal: g
          } = s.getState();
          "pointerId" in h && g.capturedMap.has(h.pointerId) && requestAnimationFrame(() => {
            g.capturedMap.has(h.pointerId) && (g.capturedMap.delete(h.pointerId), o([]));
          });
        };
    }
    return function(g) {
      const {
        onPointerMissed: _,
        internal: x
      } = s.getState();
      x.lastEvent.current = g;
      const M = p === "onPointerMove", T = p === "onClick" || p === "onContextMenu" || p === "onDoubleClick", b = n(g, M ? t : void 0), E = T ? e(g) : 0;
      p === "onPointerDown" && (x.initialClick = [g.offsetX, g.offsetY], x.initialHits = b.map((C) => C.eventObject)), T && !b.length && E <= 2 && (c(g, x.interaction), _ && _(g)), M && o(b);
      function L(C) {
        const U = C.eventObject, Y = U.__r3f, B = Y == null ? void 0 : Y.handlers;
        if (Y != null && Y.eventCount)
          if (M) {
            if (B.onPointerOver || B.onPointerEnter || B.onPointerOut || B.onPointerLeave) {
              const H = _g(C), k = x.hovered.get(H);
              k ? k.stopped && C.stopPropagation() : (x.hovered.set(H, C), B.onPointerOver == null || B.onPointerOver(C), B.onPointerEnter == null || B.onPointerEnter(C));
            }
            B.onPointerMove == null || B.onPointerMove(C);
          } else {
            const H = B[p];
            H ? (!T || x.initialHits.includes(U)) && (c(g, x.interaction.filter((k) => !x.initialHits.includes(k))), H(C)) : T && x.initialHits.includes(U) && c(g, x.interaction.filter((k) => !x.initialHits.includes(k)));
          }
      }
      r(b, g, E, L);
    };
  }
  return {
    handlePointer: f
  };
}
const bR = (s) => !!(s != null && s.render), wR = /* @__PURE__ */ qt.createContext(null), Oz = (s, e) => {
  const t = yz((f, p) => {
    const h = new q(), g = new q(), _ = new q();
    function x(E = p().camera, L = g, C = p().size) {
      const {
        width: U,
        height: Y,
        top: B,
        left: H
      } = C, k = U / Y;
      L instanceof q ? _.copy(L) : _.set(...L);
      const F = E.getWorldPosition(h).distanceTo(_);
      if (yR(E))
        return {
          width: U / E.zoom,
          height: Y / E.zoom,
          top: B,
          left: H,
          factor: 1,
          distance: F,
          aspect: k
        };
      {
        const N = E.fov * Math.PI / 180, X = 2 * Math.tan(N / 2) * F, K = X * (U / Y);
        return {
          width: K,
          height: X,
          top: B,
          left: H,
          factor: U / K,
          distance: F,
          aspect: k
        };
      }
    }
    let M;
    const T = (E) => f((L) => ({
      performance: {
        ...L.performance,
        current: E
      }
    })), R = new De();
    return {
      set: f,
      get: p,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      xr: null,
      scene: null,
      invalidate: (E = 1) => s(p(), E),
      advance: (E, L) => e(E, L, p()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new QS(),
      pointer: R,
      mouse: R,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const E = p();
          M && clearTimeout(M), E.performance.current !== E.performance.min && T(E.performance.min), M = setTimeout(() => T(p().performance.max), E.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        updateStyle: !1
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: x
      },
      setEvents: (E) => f((L) => ({
        ...L,
        events: {
          ...L.events,
          ...E
        }
      })),
      setSize: (E, L, C, U, Y) => {
        const B = p().camera, H = {
          width: E,
          height: L,
          top: U || 0,
          left: Y || 0,
          updateStyle: C
        };
        f((k) => ({
          size: H,
          viewport: {
            ...k.viewport,
            ...x(B, g, H)
          }
        }));
      },
      setDpr: (E) => f((L) => {
        const C = MR(E);
        return {
          viewport: {
            ...L.viewport,
            dpr: C,
            initialDpr: L.viewport.initialDpr || C
          }
        };
      }),
      setFrameloop: (E = "always") => {
        const L = p().clock;
        L.stop(), L.elapsedTime = 0, E !== "never" && (L.start(), L.elapsedTime = 0), f(() => ({
          frameloop: E
        }));
      },
      previousRoot: void 0,
      internal: {
        active: !1,
        priority: 0,
        frames: 0,
        lastEvent: /* @__PURE__ */ qt.createRef(),
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        subscribe: (E, L, C) => {
          const U = p().internal;
          return U.priority = U.priority + (L > 0 ? 1 : 0), U.subscribers.push({
            ref: E,
            priority: L,
            store: C
          }), U.subscribers = U.subscribers.sort((Y, B) => Y.priority - B.priority), () => {
            const Y = p().internal;
            Y != null && Y.subscribers && (Y.priority = Y.priority - (L > 0 ? 1 : 0), Y.subscribers = Y.subscribers.filter((B) => B.ref !== E));
          };
        }
      }
    };
  }), n = t.getState();
  let r = n.size, o = n.viewport.dpr, c = n.camera;
  return t.subscribe(() => {
    const {
      camera: f,
      size: p,
      viewport: h,
      gl: g,
      set: _
    } = t.getState();
    if (p.width !== r.width || p.height !== r.height || h.dpr !== o) {
      var x;
      r = p, o = h.dpr, Dz(f, p), g.setPixelRatio(h.dpr);
      const M = (x = p.updateStyle) != null ? x : typeof HTMLCanvasElement < "u" && g.domElement instanceof HTMLCanvasElement;
      g.setSize(p.width, p.height, M);
    }
    f !== c && (c = f, _((M) => ({
      viewport: {
        ...M.viewport,
        ...M.viewport.getCurrentViewport(f)
      }
    })));
  }), t.subscribe((f) => s(f)), t;
};
let xg, Fz = /* @__PURE__ */ new Set(), zz = /* @__PURE__ */ new Set(), Bz = /* @__PURE__ */ new Set();
function vx(s, e) {
  if (s.size)
    for (const {
      callback: t
    } of s.values())
      t(e);
}
function np(s, e) {
  switch (s) {
    case "before":
      return vx(Fz, e);
    case "after":
      return vx(zz, e);
    case "tail":
      return vx(Bz, e);
  }
}
let gx, yx;
function _x(s, e, t) {
  let n = e.clock.getDelta();
  for (e.frameloop === "never" && typeof s == "number" && (n = s - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = s), gx = e.internal.subscribers, xg = 0; xg < gx.length; xg++)
    yx = gx[xg], yx.ref.current(yx.store.getState(), n, t);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
function Hz(s) {
  let e = !1, t = !1, n, r, o;
  function c(h) {
    r = requestAnimationFrame(c), e = !0, n = 0, np("before", h), t = !0;
    for (const _ of s.values()) {
      var g;
      o = _.store.getState(), o.internal.active && (o.frameloop === "always" || o.internal.frames > 0) && !((g = o.gl.xr) != null && g.isPresenting) && (n += _x(h, o));
    }
    if (t = !1, np("after", h), n === 0)
      return np("tail", h), e = !1, cancelAnimationFrame(r);
  }
  function f(h, g = 1) {
    var _;
    if (!h)
      return s.forEach((x) => f(x.store.getState(), g));
    (_ = h.gl.xr) != null && _.isPresenting || !h.internal.active || h.frameloop === "never" || (g > 1 ? h.internal.frames = Math.min(60, h.internal.frames + g) : t ? h.internal.frames = 2 : h.internal.frames = 1, e || (e = !0, requestAnimationFrame(c)));
  }
  function p(h, g = !0, _, x) {
    if (g && np("before", h), _)
      _x(h, _, x);
    else
      for (const M of s.values())
        _x(h, M.store.getState());
    g && np("after", h);
  }
  return {
    loop: c,
    invalidate: f,
    advance: p
  };
}
function Vz() {
  const s = qt.useContext(wR);
  if (!s)
    throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return s;
}
function kz(s, e = 0) {
  const t = Vz(), n = t.getState().internal.subscribe, r = _R(s);
  return Gp(() => n(r, e, t), [e, n, t]), null;
}
const vd = /* @__PURE__ */ new Map(), {
  invalidate: Vb,
  advance: kb
} = Hz(vd), {
  reconciler: Ug,
  applyProps: ed
} = wz(vd, Nz), td = {
  objects: "shallow",
  strict: !1
}, Gz = (s, e) => {
  const t = typeof s == "function" ? s(e) : s;
  return bR(t) ? t : new SA({
    powerPreference: "high-performance",
    canvas: e,
    antialias: !0,
    alpha: !0,
    ...s
  });
};
function Wz(s, e) {
  const t = typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement;
  if (e) {
    const {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: f = t
    } = e;
    return {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: f
    };
  } else if (typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement && s.parentElement) {
    const {
      width: n,
      height: r,
      top: o,
      left: c
    } = s.parentElement.getBoundingClientRect();
    return {
      width: n,
      height: r,
      top: o,
      left: c,
      updateStyle: t
    };
  } else if (typeof OffscreenCanvas < "u" && s instanceof OffscreenCanvas)
    return {
      width: s.width,
      height: s.height,
      top: 0,
      left: 0,
      updateStyle: t
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0
  };
}
function Xz(s) {
  const e = vd.get(s), t = e == null ? void 0 : e.fiber, n = e == null ? void 0 : e.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const r = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), o = n || Oz(Vb, kb), c = t || Ug.createContainer(o, ud.ConcurrentRoot, null, !1, null, "", r, null);
  e || vd.set(s, {
    fiber: c,
    store: o
  });
  let f, p = !1, h;
  return {
    configure(g = {}) {
      let {
        gl: _,
        size: x,
        scene: M,
        events: T,
        onCreated: R,
        shadows: b = !1,
        linear: E = !1,
        flat: L = !1,
        legacy: C = !1,
        orthographic: U = !1,
        frameloop: Y = "always",
        dpr: B = [1, 2],
        performance: H,
        raycaster: k,
        camera: F,
        onPointerMissed: N
      } = g, X = o.getState(), K = X.gl;
      X.gl || X.set({
        gl: K = Gz(_, s)
      });
      let J = X.raycaster;
      J || X.set({
        raycaster: J = new pR()
      });
      const {
        params: ae,
        ..._e
      } = k || {};
      if (qn.equ(_e, J, td) || ed(J, {
        ..._e
      }), qn.equ(ae, J.params, td) || ed(J, {
        params: {
          ...J.params,
          ...ae
        }
      }), !X.camera || X.camera === h && !qn.equ(h, F, td)) {
        h = F;
        const ne = F instanceof Ip, be = ne ? F : U ? new zp(0, 0, 0, 0, 0.1, 1e3) : new Vi(75, 0, 0.1, 1e3);
        ne || (be.position.z = 5, F && ed(be, F), !X.camera && !(F != null && F.rotation) && be.lookAt(0, 0, 0)), X.set({
          camera: be
        }), J.camera = be;
      }
      if (!X.scene) {
        let ne;
        M instanceof Pg ? ne = M : (ne = new Pg(), M && ed(ne, M)), X.set({
          scene: nd(ne)
        });
      }
      if (!X.xr) {
        var Me;
        const ne = (ht, ve) => {
          const Ue = o.getState();
          Ue.frameloop !== "never" && kb(ht, !0, Ue, ve);
        }, be = () => {
          const ht = o.getState();
          ht.gl.xr.enabled = ht.gl.xr.isPresenting, ht.gl.xr.setAnimationLoop(ht.gl.xr.isPresenting ? ne : null), ht.gl.xr.isPresenting || Vb(ht);
        }, Oe = {
          connect() {
            const ht = o.getState().gl;
            ht.xr.addEventListener("sessionstart", be), ht.xr.addEventListener("sessionend", be);
          },
          disconnect() {
            const ht = o.getState().gl;
            ht.xr.removeEventListener("sessionstart", be), ht.xr.removeEventListener("sessionend", be);
          }
        };
        typeof ((Me = K.xr) == null ? void 0 : Me.addEventListener) == "function" && Oe.connect(), X.set({
          xr: Oe
        });
      }
      if (K.shadowMap) {
        const ne = K.shadowMap.enabled, be = K.shadowMap.type;
        if (K.shadowMap.enabled = !!b, qn.boo(b))
          K.shadowMap.type = ap;
        else if (qn.str(b)) {
          var Fe;
          const Oe = {
            basic: ew,
            percentage: Fg,
            soft: ap,
            variance: ps
          };
          K.shadowMap.type = (Fe = Oe[b]) != null ? Fe : ap;
        } else
          qn.obj(b) && Object.assign(K.shadowMap, b);
        (ne !== K.shadowMap.enabled || be !== K.shadowMap.type) && (K.shadowMap.needsUpdate = !0);
      }
      const Q = gR();
      Q && ("enabled" in Q ? Q.enabled = !C : "legacyMode" in Q && (Q.legacyMode = C)), p || ed(K, {
        outputEncoding: E ? 3e3 : 3001,
        toneMapping: L ? Xs : pS
      }), X.legacy !== C && X.set(() => ({
        legacy: C
      })), X.linear !== E && X.set(() => ({
        linear: E
      })), X.flat !== L && X.set(() => ({
        flat: L
      })), _ && !qn.fun(_) && !bR(_) && !qn.equ(_, K, td) && ed(K, _), T && !X.events.handlers && X.set({
        events: T(o)
      });
      const ue = Wz(s, x);
      return qn.equ(ue, X.size, td) || X.setSize(ue.width, ue.height, ue.updateStyle, ue.top, ue.left), B && X.viewport.dpr !== MR(B) && X.setDpr(B), X.frameloop !== Y && X.setFrameloop(Y), X.onPointerMissed || X.set({
        onPointerMissed: N
      }), H && !qn.equ(H, X.performance, td) && X.set((ne) => ({
        performance: {
          ...ne.performance,
          ...H
        }
      })), f = R, p = !0, this;
    },
    render(g) {
      return p || this.configure(), Ug.updateContainer(/* @__PURE__ */ qt.createElement(qz, {
        store: o,
        children: g,
        onCreated: f,
        rootElement: s
      }), c, null, () => {
      }), o;
    },
    unmount() {
      AR(s);
    }
  };
}
function qz({
  store: s,
  children: e,
  onCreated: t,
  rootElement: n
}) {
  return Gp(() => {
    const r = s.getState();
    r.set((o) => ({
      internal: {
        ...o.internal,
        active: !0
      }
    })), t && t(r), s.getState().events.connected || r.events.connect == null || r.events.connect(n);
  }, []), /* @__PURE__ */ qt.createElement(wR.Provider, {
    value: s
  }, e);
}
function AR(s, e) {
  const t = vd.get(s), n = t == null ? void 0 : t.fiber;
  if (n) {
    const r = t == null ? void 0 : t.store.getState();
    r && (r.internal.active = !1), Ug.updateContainer(null, n, null, () => {
      r && setTimeout(() => {
        try {
          var o, c, f, p;
          r.events.disconnect == null || r.events.disconnect(), (o = r.gl) == null || (c = o.renderLists) == null || c.dispose == null || c.dispose(), (f = r.gl) == null || f.forceContextLoss == null || f.forceContextLoss(), (p = r.gl) != null && p.xr && r.xr.disconnect(), Lz(r), vd.delete(s), e && e(s);
        } catch {
        }
      }, 500);
    });
  }
}
Ug.injectIntoDevTools({
  bundleType: process.env.NODE_ENV === "production" ? 0 : 1,
  rendererPackageName: "@react-three/fiber",
  version: qt.version
});
function Ig() {
  return Ig = Object.assign ? Object.assign.bind() : function(s) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var n in t)
        Object.prototype.hasOwnProperty.call(t, n) && (s[n] = t[n]);
    }
    return s;
  }, Ig.apply(this, arguments);
}
function hS(s, e, t) {
  var n, r, o, c, f;
  e == null && (e = 100);
  function p() {
    var g = Date.now() - c;
    g < e && g >= 0 ? n = setTimeout(p, e - g) : (n = null, t || (f = s.apply(o, r), o = r = null));
  }
  var h = function() {
    o = this, r = arguments, c = Date.now();
    var g = t && !n;
    return n || (n = setTimeout(p, e)), g && (f = s.apply(o, r), o = r = null), f;
  };
  return h.clear = function() {
    n && (clearTimeout(n), n = null);
  }, h.flush = function() {
    n && (f = s.apply(o, r), o = r = null, clearTimeout(n), n = null);
  }, h;
}
hS.debounce = hS;
var Yz = hS;
const Gb = /* @__PURE__ */ vR(Yz);
function jz(s) {
  let {
    debounce: e,
    scroll: t,
    polyfill: n,
    offsetSize: r
  } = s === void 0 ? {
    debounce: 0,
    scroll: !1,
    offsetSize: !1
  } : s;
  const o = n || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!o)
    throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [c, f] = Sx({
    left: 0,
    top: 0,
    width: 0,
    height: 0,
    bottom: 0,
    right: 0,
    x: 0,
    y: 0
  }), p = Po({
    element: null,
    scrollContainers: null,
    resizeObserver: null,
    lastBounds: c
  }), h = e ? typeof e == "number" ? e : e.scroll : null, g = e ? typeof e == "number" ? e : e.resize : null, _ = Po(!1);
  cd(() => (_.current = !0, () => void (_.current = !1)));
  const [x, M, T] = vP(() => {
    const L = () => {
      if (!p.current.element)
        return;
      const {
        left: C,
        top: U,
        width: Y,
        height: B,
        bottom: H,
        right: k,
        x: F,
        y: N
      } = p.current.element.getBoundingClientRect(), X = {
        left: C,
        top: U,
        width: Y,
        height: B,
        bottom: H,
        right: k,
        x: F,
        y: N
      };
      p.current.element instanceof HTMLElement && r && (X.height = p.current.element.offsetHeight, X.width = p.current.element.offsetWidth), Object.freeze(X), _.current && !Kz(p.current.lastBounds, X) && f(p.current.lastBounds = X);
    };
    return [L, g ? Gb(L, g) : L, h ? Gb(L, h) : L];
  }, [f, r, h, g]);
  function R() {
    p.current.scrollContainers && (p.current.scrollContainers.forEach((L) => L.removeEventListener("scroll", T, !0)), p.current.scrollContainers = null), p.current.resizeObserver && (p.current.resizeObserver.disconnect(), p.current.resizeObserver = null);
  }
  function b() {
    p.current.element && (p.current.resizeObserver = new o(T), p.current.resizeObserver.observe(p.current.element), t && p.current.scrollContainers && p.current.scrollContainers.forEach((L) => L.addEventListener("scroll", T, {
      capture: !0,
      passive: !0
    })));
  }
  const E = (L) => {
    !L || L === p.current.element || (R(), p.current.element = L, p.current.scrollContainers = RR(L), b());
  };
  return Jz(T, !!t), Zz(M), cd(() => {
    R(), b();
  }, [t, T, M]), cd(() => R, []), [E, c, x];
}
function Zz(s) {
  cd(() => {
    const e = s;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [s]);
}
function Jz(s, e) {
  cd(() => {
    if (e) {
      const t = s;
      return window.addEventListener("scroll", t, {
        capture: !0,
        passive: !0
      }), () => void window.removeEventListener("scroll", t, !0);
    }
  }, [s, e]);
}
function RR(s) {
  const e = [];
  if (!s || s === document.body)
    return e;
  const {
    overflow: t,
    overflowX: n,
    overflowY: r
  } = window.getComputedStyle(s);
  return [t, n, r].some((o) => o === "auto" || o === "scroll") && e.push(s), [...e, ...RR(s.parentElement)];
}
const Qz = ["x", "y", "top", "bottom", "left", "right", "width", "height"], Kz = (s, e) => Qz.every((t) => s[t] === e[t]);
var $z = Object.defineProperty, eB = Object.defineProperties, tB = Object.getOwnPropertyDescriptors, Wb = Object.getOwnPropertySymbols, nB = Object.prototype.hasOwnProperty, iB = Object.prototype.propertyIsEnumerable, Xb = (s, e, t) => e in s ? $z(s, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : s[e] = t, qb = (s, e) => {
  for (var t in e || (e = {}))
    nB.call(e, t) && Xb(s, t, e[t]);
  if (Wb)
    for (var t of Wb(e))
      iB.call(e, t) && Xb(s, t, e[t]);
  return s;
}, rB = (s, e) => eB(s, tB(e));
function CR(s, e, t) {
  if (!s)
    return;
  if (t(s) === !0)
    return s;
  let n = e ? s.return : s.child;
  for (; n; ) {
    const r = CR(n, e, t);
    if (r)
      return r;
    n = e ? null : n.sibling;
  }
}
function LR(s) {
  try {
    return Object.defineProperties(s, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return s;
  }
}
const nM = LR(qt.createContext(null));
class PR extends qt.Component {
  render() {
    return /* @__PURE__ */ qt.createElement(nM.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
const { ReactCurrentOwner: Yb, ReactCurrentDispatcher: jb } = qt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
function aB() {
  const s = qt.useContext(nM);
  if (s === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = qt.useId();
  return qt.useMemo(() => {
    for (const n of [Yb == null ? void 0 : Yb.current, s, s == null ? void 0 : s.alternate]) {
      if (!n)
        continue;
      const r = CR(n, !1, (o) => {
        let c = o.memoizedState;
        for (; c; ) {
          if (c.memoizedState === e)
            return !0;
          c = c.next;
        }
      });
      if (r)
        return r;
    }
  }, [s, e]);
}
function sB() {
  var s;
  const e = aB(), [t] = qt.useState(() => /* @__PURE__ */ new Map());
  t.clear();
  let n = e;
  for (; n; ) {
    if (n.type && typeof n.type == "object") {
      const o = n.type._context === void 0 && n.type.Provider === n.type ? n.type : n.type._context;
      o && o !== nM && !t.has(o) && t.set(o, (s = jb == null ? void 0 : jb.current) == null ? void 0 : s.readContext(LR(o)));
    }
    n = n.return;
  }
  return t;
}
function oB() {
  const s = sB();
  return qt.useMemo(
    () => Array.from(s.keys()).reduce(
      (e, t) => (n) => /* @__PURE__ */ qt.createElement(e, null, /* @__PURE__ */ qt.createElement(t.Provider, rB(qb({}, n), {
        value: s.get(t)
      }))),
      (e) => /* @__PURE__ */ qt.createElement(PR, qb({}, e))
    ),
    [s]
  );
}
const xx = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function lB(s) {
  const {
    handlePointer: e
  } = Iz(s);
  return {
    priority: 1,
    enabled: !0,
    compute(t, n, r) {
      n.pointer.set(t.offsetX / n.size.width * 2 - 1, -(t.offsetY / n.size.height) * 2 + 1), n.raycaster.setFromCamera(n.pointer, n.camera);
    },
    connected: void 0,
    handlers: Object.keys(xx).reduce((t, n) => ({
      ...t,
      [n]: e(n)
    }), {}),
    update: () => {
      var t;
      const {
        events: n,
        internal: r
      } = s.getState();
      (t = r.lastEvent) != null && t.current && n.handlers && n.handlers.onPointerMove(r.lastEvent.current);
    },
    connect: (t) => {
      var n;
      const {
        set: r,
        events: o
      } = s.getState();
      o.disconnect == null || o.disconnect(), r((c) => ({
        events: {
          ...c.events,
          connected: t
        }
      })), Object.entries((n = o.handlers) != null ? n : []).forEach(([c, f]) => {
        const [p, h] = xx[c];
        t.addEventListener(p, f, {
          passive: h
        });
      });
    },
    disconnect: () => {
      const {
        set: t,
        events: n
      } = s.getState();
      if (n.connected) {
        var r;
        Object.entries((r = n.handlers) != null ? r : []).forEach(([o, c]) => {
          if (n && n.connected instanceof HTMLElement) {
            const [f] = xx[o];
            n.connected.removeEventListener(f, c);
          }
        }), t((o) => ({
          events: {
            ...o.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
const uB = /* @__PURE__ */ qt.forwardRef(function({
  children: e,
  fallback: t,
  resize: n,
  style: r,
  gl: o,
  events: c = lB,
  eventSource: f,
  eventPrefix: p,
  shadows: h,
  linear: g,
  flat: _,
  legacy: x,
  orthographic: M,
  frameloop: T,
  dpr: R,
  performance: b,
  raycaster: E,
  camera: L,
  scene: C,
  onPointerMissed: U,
  onCreated: Y,
  ...B
}, H) {
  qt.useMemo(() => bz(hz), []);
  const k = oB(), [F, N] = jz({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...n
  }), X = qt.useRef(null), K = qt.useRef(null);
  qt.useImperativeHandle(H, () => X.current);
  const J = _R(U), [ae, _e] = qt.useState(!1), [Me, Fe] = qt.useState(!1);
  if (ae)
    throw ae;
  if (Me)
    throw Me;
  const Q = qt.useRef(null);
  Gp(() => {
    const ne = X.current;
    N.width > 0 && N.height > 0 && ne && (Q.current || (Q.current = Xz(ne)), Q.current.configure({
      gl: o,
      events: c,
      shadows: h,
      linear: g,
      flat: _,
      legacy: x,
      orthographic: M,
      frameloop: T,
      dpr: R,
      performance: b,
      raycaster: E,
      camera: L,
      scene: C,
      size: N,
      // Pass mutable reference to onPointerMissed so it's free to update
      onPointerMissed: (...be) => J.current == null ? void 0 : J.current(...be),
      onCreated: (be) => {
        be.events.connect == null || be.events.connect(f ? Az(f) ? f.current : f : K.current), p && be.setEvents({
          compute: (Oe, ht) => {
            const ve = Oe[p + "X"], Ue = Oe[p + "Y"];
            ht.pointer.set(ve / ht.size.width * 2 - 1, -(Ue / ht.size.height) * 2 + 1), ht.raycaster.setFromCamera(ht.pointer, ht.camera);
          }
        }), Y == null || Y(be);
      }
    }), Q.current.render(/* @__PURE__ */ qt.createElement(k, null, /* @__PURE__ */ qt.createElement(xR, {
      set: Fe
    }, /* @__PURE__ */ qt.createElement(qt.Suspense, {
      fallback: /* @__PURE__ */ qt.createElement(Rz, {
        set: _e
      })
    }, e)))));
  }), qt.useEffect(() => {
    const ne = X.current;
    if (ne)
      return () => AR(ne);
  }, []);
  const ue = f ? "none" : "auto";
  return /* @__PURE__ */ qt.createElement("div", Ig({
    ref: K,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: ue,
      ...r
    }
  }, B), /* @__PURE__ */ qt.createElement("div", {
    ref: F,
    style: {
      width: "100%",
      height: "100%"
    }
  }, /* @__PURE__ */ qt.createElement("canvas", {
    ref: X,
    style: {
      display: "block"
    }
  }, t)));
}), cB = /* @__PURE__ */ qt.forwardRef(function(e, t) {
  return /* @__PURE__ */ qt.createElement(PR, null, /* @__PURE__ */ qt.createElement(uB, Ig({}, e, {
    ref: t
  })));
});
function Zb(s) {
  const e = Po(), [t, n] = Sx(!1), [r, o] = Sx(!1);
  return kz((c, f) => e.current.rotation.x += f), /* @__PURE__ */ Jb(
    "mesh",
    {
      ...s,
      ref: e,
      scale: r ? 1.5 : 1,
      onClick: () => o(!r),
      onPointerOver: () => n(!0),
      onPointerOut: () => n(!1),
      children: [
        /* @__PURE__ */ nc("boxGeometry", { args: [1, 1, 1] }),
        /* @__PURE__ */ nc("meshStandardMaterial", { color: t ? "hotpink" : "orange" })
      ]
    }
  );
}
const gB = () => /* @__PURE__ */ Jb(cB, { children: [
  /* @__PURE__ */ nc("ambientLight", { intensity: 1 }),
  /* @__PURE__ */ nc("spotLight", { position: [10, 10, 10], angle: 0.15, penumbra: 1, decay: 0, intensity: Math.PI }),
  /* @__PURE__ */ nc("pointLight", { position: [-10, -10, -10], decay: 0, intensity: Math.PI }),
  /* @__PURE__ */ nc(Zb, { position: [-1.2, 0, 0] }),
  /* @__PURE__ */ nc(Zb, { position: [1.2, 0, 0] })
] });
export {
  gB as Scene
};
